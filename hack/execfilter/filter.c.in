// The core filter implementation for execfilter.
// Written by Lenik, Nov 2013.

#include <sys/types.h>
#include <sys/stat.h>
#include <assert.h>
#include <ctype.h>
#include <dirent.h>
#include <dlfcn.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <bas/path.h>
#include <bas/str.h>

#include "filter.h"
#include "trie.h"
#include "log.h"

#define CONFIGDIR "@configdir@"         /* The directory containing the
                                           configuration files. */

#define PASS_THRU_MODE F_ALLOW          /* The default x-mode if the filter is
                                           disabled. */

int run_level = FILT_UNINIT;

#undef DLSYM_MAX
#define DLSYM_MAX 128

typedef struct _symres_t {
    char libname[PATH_MAX];
    char fn[DLSYM_MAX];
    void *handle;
    void *proc;
} symres_t;

symres_t gate_sr;                       /* the global gate */

GHashTable *formats;                    /* extension -> symres_t */
symres_t *default_format;

#undef LINE_MAX
#define LINE_MAX 4095

GHashTable *pmap;
int pmap_ver;                           /* file version. used in 2.0+ */
program_conf_t *pconf;
program_conf_t *preset;                 /* predefiend config. used in 2.0+ */

static void lazy_init();
static const char *parse_file(const char *path);
static const char *parse_confs(char *script, const char *location);
static void pmap_each_tab(gpointer key, gpointer value, gpointer data);
static void pmap_each_mode(gpointer key, gpointer value, gpointer data);
static bool loadsym(symres_t *, const char *spec);
static pid_t stat_ppid(pid_t pid);

bool pmap_load() {
    DIR *configdir;
    struct dirent *ent;
    char name[PATH_MAX + 1];
    int dirlen;
    const char *errmsg;

    pmap = g_hash_table_new_full(g_str_hash, g_str_equal, free, free);
    formats = g_hash_table_new_full(g_str_hash, g_str_equal, free, free);

    default_format = malloc(sizeof(symres_t));
    memset(default_format, 0, sizeof(symres_t));
    g_hash_table_insert(formats, strdup("*"), default_format);

    memset(&gate_sr, 0, sizeof(symres_t));

    strcpy(name, CONFIGDIR);
    configdir = opendir(name);

    if (configdir) {
        strcat(name, "/");
        dirlen = strlen(name);

        int t;
        for (t = 0; t < 2; t++) {
            rewinddir(configdir);
            while ((ent = readdir(configdir)) != NULL) {
                /* skip hidden files. */
                if (ent->d_name[0] == '.')
                    continue;

                bool isini = endswith(ent->d_name, ".ini");
                int stage = isini ? 0 : 1;

                if (t != stage)
                    continue;

                switch (ent->d_type) {
                case DT_LNK:
                case DT_REG:
                    strcpy(name + dirlen, ent->d_name);
                    errmsg = parse_file(name);
                    if (errmsg != NULL) {
                        log_err("parse error: %s", errmsg);
                        run_level = FILT_ERROR;
                        return false;
                    }
                }
            }
        }
    }

    return true;
}

static const char *parse_file(const char *path) {
    struct stat sb;
    size_t size;
    FILE *in;
    char *data;
    int cb;
    symres_t *format = NULL;
    char *ext_name;

    if (stat(path, &sb) == -1) {
        log_perr("Error: Failed to get file stat: %s", path);
        return "stat";
    }

    size = sb.st_size;
    data = malloc(size + 1);
    if (data == NULL) {
        log_err("Insufficient memory to read config file %s.", path);
        return "memory out";
    }

    in = fopen(path, "rt");
    if (in == NULL) {
        log_perr("Failed to open file %s: ", path);
        return "open config";
    }

    cb = fread(data, 1, size, in);
    if (cb != size)
        return "read incomplete";

    data[cb] = '\0';
    fclose(in);

    /* decode the file if necessary. */
    ext_name = strrchr(path, '.');
    if (ext_name) {
        ext_name++;                     /* chop the dot. */
        format = g_hash_table_lookup(formats, ext_name);
    }
    if (format == NULL)
        format = default_format;

    if (format->proc) {                 /* if any format is defined.. */
        encode_fn decoder = format->proc;
        decoder(data, size);
    } else {
        /* If the format is undefined, just copy it thru. */
        /* or fatal error if encoding is undefined. */
#ifdef FORMAT_DEFINITION_REQUIRED
        return "file format is undefined.";
#endif
    }

    const char *errmsg = parse_confs(data, path);

    free(data);
    return errmsg;
}

static const char *parse_confs(char *script, const char *location) {
    char *head = script;
    char *p;
    char *token;
    program_conf_t *conf = NULL;
    GHashTable *tab;
    xmode_t mode;

    while ((p = strtok_eol(head, &head))) {
        token = readtok(&p);
        if (token == NULL)
            continue;
        else
            rtrim(p);

        switch (*token) {
        case '#':
            continue;                   /* comment line */

        case 'a':
            if (streq("allow", token)) {
                if (conf == NULL) {
                    log_err("program (for-clause) hasn't been specified yet.");
                    continue;
                }

                char *which = path_find(p);
                if (which != NULL)
                    p = which;

                mode = get_execution_mode(conf, p);
                mode |= F_ALLOW;
                mode &= ~F_DENY;
                set_execution_mode(conf, p, mode);
                break;
            }

        case 'd':
            if (streq("default", token)) {
                if (conf == NULL) {
                    log_err("program (for-clause) hasn't been specified yet.");
                    continue;
                }

                if (streq("allow", p))
                    /* This should be the same as implicit rule.  Don't set
                        F_ALLOW here. */
                    conf->mode_all &= ~F_DENY;
                if (streq("deny", p))
                    conf->mode_all |= F_DENY;
                break;
            }

            if (streq("deny", token)) {
                if (conf == NULL) {
                    log_err("program (for-clause) hasn't been specified yet.");
                    continue;
                }

                char *which = path_find(p);
                if (which != NULL)
                    p = which;

                mode = get_execution_mode(conf, p);
                mode &= ~F_ALLOW;
                mode |= F_DENY;
                set_execution_mode(conf, p, mode);
                break;
            }

        case 'f':
            /* for PATH */
            if (streq(token, "for")) {
                conf = g_hash_table_lookup(pmap, p);
                if (conf == NULL) {
                    conf = (program_conf_t *) malloc(sizeof(program_conf_t));
                    tab = g_hash_table_new_full(g_str_hash, g_str_equal,
                                                free, free);
                    conf->modes = tab;
                    conf->mode_all = 0;
                    conf->mask = -1;
                    g_hash_table_insert(pmap, strdup(p), conf);
                }
                tab = conf->modes;
                break;
            }

            /* format EXTNAME LIBNAME FN=decode */
            if (streq("format", token)) {
                char *ext = readtok(&p);
                if (ext == NULL) {
                    log_err("extension name isn't specified.");
                    continue;
                }

                symres_t *sr = g_hash_table_lookup(formats, ext);
                if (sr) {
                    /* some format maybe pre-defined, but not implemented. */
                    if (sr->handle) {
                        log_err("format %s is already defined as %s::%s.",
                                ext, sr->libname, sr->fn);
                        continue;
                    }
                } else {
                    sr = (symres_t *) malloc(sizeof(symres_t));
                    memset(sr, 0, sizeof(symres_t));
                    g_hash_table_insert(formats, strdup(ext), sr);
                }

                if (! loadsym(sr, p)) {
                    log_err("can't resolve format %s.", ext);
                    continue;
                }

                break;
            }

        case 'g':
            /* gate LIBNAME FN=gate */
            if (streq("gate", token)) {
                if (! loadsym(&gate_sr, p)) {
                    log_err("can't resolve gate.");
                    continue;
                }
                break;
            }

        default:
            log_err("illegal syntax in %s: %s %s.",
                    location, token, p);
            /* Dont exit program, otherwise the system will be unusable. */
        } /* switch (token) */
    } /* while: strtok_eol */
    return NULL;
}

static void lazy_init() {
    if (run_level != FILT_UNINIT)
        return;

    if (! pmap_load())
        return;

    /* normalize the current process and grab the entry. */
    char path[PATH_MAX + 1];
    int cc;
    if ((cc = readlink("/proc/self/exe", path, PATH_MAX)) == -1) {
        perror("readlink");
        run_level = FILT_FATAL;
        return;
    }
    path[cc] = '\0';

    /* conf maybe undefined, if the program is not configured.  */
    pconf = g_hash_table_lookup(pmap, path);

    if (pconf == NULL) {
        pconf = (program_conf_t *) malloc(sizeof(program_conf_t));
        pconf->modes = g_hash_table_new_full(g_str_hash, g_str_equal,
                                             free, free);
#ifdef DEBUG
        printf("Warning: %s isn't configured, yet.\n", path);
#endif
    }

    run_level = FILT_ACTIVE;
}

static void pmap_each_mode(gpointer key, gpointer value, gpointer user_data) {
    const char *target = (const char *) key;
    printf("    ");

    xmode_t mode = *(xmode_t *) value;

    if (mode & F_ALLOW)
        printf("allow ");
    if (mode & F_DENY)
        printf("deny ");

    printf("%s", target);
    printf("\n");
}

static void pmap_each_tab(gpointer key, gpointer value, gpointer user_data) {
    const char *program = (const char *) key;
    program_conf_t *conf = (program_conf_t *) value;

    xmode_t m0 = conf->mode_all & conf->mask;

    printf("for %s\n", program);
    switch (m0 & (F_ALLOW | F_DENY)) {
    case F_ALLOW:
        printf("    order allow, deny\n");
        break;
    case F_DENY:
        printf("    order deny, allow\n");
        break;
    case F_ALLOW | F_DENY:
        printf("    order none\n");
        break;
    }

    g_hash_table_foreach(conf->modes, pmap_each_mode, 0);
    printf("\n");
}

void pmap_dump() {
    lazy_init();

    printf("# pmap dump\n");
    printf("# run-level: %d\n", run_level);
    printf("\n");

    g_hash_table_foreach(pmap, pmap_each_tab, 0);
}

xmode_t get_execution_mode(program_conf_t *conf, const char *norm_path) {
    if (conf == NULL) {
        lazy_init();
        conf = pconf;
        assert(conf != NULL);
    }

    gpointer value = g_hash_table_lookup(conf->modes, norm_path);
    xmode_t mode;
    if (value == NULL) {                /* not configured yet.. */
        mode = 0;                       /* the default mode? */
    } else {
        mode = *(xmode_t *) value;
    }

    mode |= conf->mode_all;
    mode &= conf->mask;

    return mode;
}

void set_execution_mode(program_conf_t *conf, const char *norm_path, xmode_t mode) {
    if (conf == NULL) {
        lazy_init();
        conf = pconf;
        assert(conf != NULL);
    }

    xmode_t *data = malloc(sizeof(xmode_t));
    *data = mode;
    g_hash_table_insert(conf->modes, strdup(norm_path), data);
}

static pid_t stat_ppid(pid_t pid) {
    char path[PATH_MAX];
    FILE *f;
    char comm[PATH_MAX];
    char state;
    pid_t ppid;

    sprintf(path, "/proc/%d/stat", pid);
    if ((f = fopen(path, "rt")) == NULL)
        return -1;

    fscanf(f, "%d %s %c %d", &pid, comm, &state, &ppid);
    fclose(f);

    return ppid;
}

xmode_t get_execution_mode_rec(const char *src, pid_t pid, const char *obj) {
    xmode_t all = 0;

    /* NOTICE: the symlink is expanded, you must config the real path. */
    char *obj_norm = path_find_norm(obj);
    if (obj_norm == NULL)               /* obj isn't existed. */
        /* maybe another F_HIDE? */
        return 0;

    lazy_init();

    log_debug("%s() analyze: %s\n", src, obj_norm);

    while (pid != 0 && pid != -1) {
        char psym[PATH_MAX];
        char bin[PATH_MAX];
        int cc;
        program_conf_t *conf;

        sprintf(psym, "/proc/%d/exe", pid);
        cc = readlink(psym, bin, PATH_MAX);

        if (cc == -1) {
            if (errno == EACCES) {
                /* since some pids are owned by root, this is very common. */
                // log_warn("Error access %s, ignored.", psym);
            } else {
                log_warn("The link %s is broken, pass thru forced.", psym);
                return PASS_THRU_MODE;
            }
        } else {
            bin[cc] = '\0';
            conf = g_hash_table_lookup(pmap, bin);
            if (conf) {
                xmode_t m = get_execution_mode(conf, obj_norm);
                log_debug("mode of %s for [%d] %s: %x\n",
                          obj_norm, pid, bin, m);
                all |= m;

                /* explicit deny overrides anything else. */
                if ((all & (F_ALLOW | F_DENY)) == F_DENY)
                    break;
            }
        }

        pid = stat_ppid(pid);
    }

    if ((all & (F_ALLOW | F_DENY)) == F_DENY) {
        log_info("%s() denied: %s", src, obj);
        log_notice("Execution Blocked: %s", obj);
    } else {
        char modes[200] = "";

        if (all & F_ALLOW)
            strcat(modes, " ALLOW");
        if (all & F_DENY)
            strcat(modes, " DENY");
        if (all & ~(F_ALLOW | F_DENY))
            strcat(modes, " OTHER");
        if (!*modes)
            sprintf(modes, "(none)");

        log_debug("execution mode for %s:%s\n", obj_norm, modes);
    }
    return all;
}

static bool loadsym(symres_t *sr, const char *spec) {
    char libfile[PATH_MAX];
    char buf[PATH_MAX * 2];
    strcpy(buf, spec);
    char *p = buf;
    void *handle;
    void *proc;

    char *libname = readtok(&p);
    if (libname == NULL) {
        log_err("library name isn't specified.");
        return false;
    }

    char *fn = readtok(&p);
    if (fn == NULL)
        fn = "decode";

    if (libname[0] == '/') {
        strcpy(libfile, libname);
    } else {
        strcpy(libfile, "lib");
        strcat(libfile, libname);
        strcat(libfile, ".so");
    }

    handle = dlopen(libfile, RTLD_LAZY);
    if (handle == NULL) {
        log_perr("Failed to open library %s", libfile);
        return false;
    }

    proc = dlsym(handle, fn);
    if (proc == NULL) {
        dlclose(handle);
        log_err("No such function in library %s: %s.",
                libname, fn);
        return false;
    }

    if (sr->handle) {
        dlclose(sr->handle);
        memset(sr, 0, sizeof(symres_t));
    }
    sr->handle = handle;
    sr->proc = proc;
    strcpy(sr->libname, libname);
    strcpy(sr->fn, fn);

    return true;
}
