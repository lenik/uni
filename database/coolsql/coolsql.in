#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PROGRAM_TITLE:=Cool SQL Front-End}
    : ${PROGRAM_SYNTAX:=[OPTIONS] [--] <connection> [code]}

    this="$0"
    configdir="$HOME/.config/coolsql"
    driverdir="@driverdir@"

    . shlib-import cliboot
    option -a --each-db     "Eval for each database"
    option -c --console     "Stay with the sql console"
    option -e --eval        "Eval code as SQL script"
    option -f --script-file "Eval script file named by code"
    option -D --list-db     "List databases"
    option -l --list-table  "List tables"
    # option -T --tree        "Dump object tree"
    option -q --quiet       "Repeat to get less info"
    option -v --verbose     "Repeat to get more info"
    option -h --help        "Show this help page"
    option    --version     "Print the version info"

    each_db=
    mode=

function setopt() {
    case "$1" in
        -a|--each-db)
            each_db=1;;
        -c|--console)
            mode=console;;
        -e|--eval)
            mode=eval;;
        -f|--script-file)
            mode=file;;
        -D|--list-db)
            mode=list_db;;
        -l|--list-table)
            mode=list_table;;
        -T|--tree)
            mode=dump_tree;;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    if [ -z "$1" ]; then
        quit "Connection name isn't specified."
    fi

    conn_name="$1"
    conn_rc="$configdir/conn/$1"
    shift

    if [ -z "$mode" ]; then
        if [ -z "$1" ]; then
            mode=console
        else
            mode=eval
        fi
    fi

    db_dialect=pg
    db_host=localhost
    db_port=5432
    db_name=postgres
    db_user=postgres
    db_pass=postgres

    if [ ! -f "$conn_rc" ]; then
        echo "Connection isn't defined: $conn_name"
        read -p "Define it now? (y/n)" yesno
        if [ "$yesno" != 'y' ]; then
            return 1
        fi

        read -p "Database dialect name: " db_dialect
        read -p "Remote host name: "      db_host
        read -p "Remote port number: "    db_port
        read -p "Database name: "         db_name
        read -p "Login user: "            db_user
        read -p "Login password: "        db_pass

        mkdir -p "$configdir/conn"
        echo "# Connection config: $conn_name" >"$conn_rc"

        [ -n "$db_dialect" ] && echo "db_dialect='$db_dialect'" >>"$conn_rc"
        [ -n "$db_host" ] && echo "db_host='$db_host'"       >>"$conn_rc"
        [ -n "$db_port" ] && echo "db_port='$db_port'"       >>"$conn_rc"
        [ -n "$db_name" ] && echo "db_name='$db_name'"       >>"$conn_rc"
        [ -n "$db_user" ] && echo "db_user='$db_user'"       >>"$conn_rc"
        [ -n "$db_pass" ] && echo "db_pass='$db_pass'"       >>"$conn_rc"
    fi

    if ! source "$conn_rc"; then
        quit "Failed to load connection config"
    fi

    driver="$driverdir/${db_dialect}.csd"

    _log2 "Install coolsql driver: $driver"
    source "$driver"

    fn="cool${db_dialect}sql_$mode"
    if ! type -t "$fn" >/dev/null; then
        quit "Unsupported driver cmd: $mode"
    fi

    if [ "$each_db" = 1 ]; then
        databases=( $("$this" -D "$conn_name") )
        for db in "${databases[@]}"; do
            db_name="$db"
            _log1 "-- for database $db:"
            "$fn" "$@"
        done
    else
        "$fn" "$@"
    fi
}

boot "$@"
