#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PROGRAM_TITLE:="Execute commands in each dir"}
    : ${PROGRAM_SYNTAX:=[OPTIONS] [--] COMMAND ARGS}

    . shlib-import cliboot
    option -a --all         "Include hidden files"
    option -s --srcfile =FILE "Read dirs from given file, instead of * (If FILE is '-', then read from stdin.)"
    option -r --recursive   "Find recursive"
    option -f --ifexist =FILE "Only dirs with FILE inside, can be multiple"
    option -F --ifnotexist =FILE "Only dirs without FILE inside, can be multiple"
    option -l --list        "List only, don't execute command"
    option -L --follow-symlinks "Follow symbolic links"
    option -C --chdir =DIR  "Chdir to DIR before enum dirs"
    option -I --replace =STR "Replace the occurence of STR to the dir path"
    option -x --exclude =PATTERN "Simple regex to exclude (NOT IMPL)"
    option -b --background  "Run each cmd in background"
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    shopt -s nullglob

    maxdepth=1
    background=
    chdir=
    list=
    followsym=
    srcfile=
    exclude=
    replace="{}"

    incl=()
    excl=()
    nincl=0
    nexcl=0

function setopt() {
    case "$1" in
        -a|--all)
            shopt -s dotglob;;
        -r|--recursive)
            maxdepth=256;;
        -f|--ifexist)
            incl[nincl++]="$2";;
        -F|--ifnotexist)
            excl[nexcl++]="$2";;
        -b|--background)
            background=1;;
        -l|--list)
            list=1;;
        -L|--follow-symlinks)
            followsym=1;;
        -s|--srcfile)
            srcfile="$2";;
        -C|--chdir)
            chdir="$2";;
        -I|--replace)
            replace="$2";;
        -x|--exclude)
            exclude="$2";;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function search() {
    local start="${1%/}/"
          start="${start#./}"
    local depth="$2"
    local d
    local f
    local fail

    [ $((depth++)) -lt $maxdepth ] || return

    for d in "$start"*/; do
        d="${d%/}"
        if [ -z "$followsym" ] && [ -L "$d" ]; then continue; fi

        fail=
        for f in "${incl[@]}"; do
            if [ ! -e "$d/$f" ]; then
                fail=1
                break
            fi
        done
        if [ -z "$fail" ]; then
            for f in "${excl[@]}"; do
                if [ -e "$d/$f" ]; then
                    fail=1
                    break
                fi
            done
        fi

        if [ -z "$fail" ]; then
            echo "$d"
            continue    # -prune
        fi

        search "$d" $depth
    done
}

function main() {
    if [ -n "$chdir" ]; then
        if ! cd $chdir; then
            echo "Can't chdir to $chdir" >&2
            exit 1
        fi
    fi

    if [ -z "$srcfile" ]; then
        quit_clean=1
        srcfile=/tmp/eachdir-$$-$RANDOM
        search . 0 >$srcfile
    elif [ "$srcfile" = '-' ]; then
        srcfile=/dev/stdin
    fi

    while read dir; do
        _log2 "$dir: "

        cmdline=()
        i=0
        for arg in "$@"; do
            arg="${arg//$replace/$dir}"
            cmdline[i]="$arg"
            ((i++))
        done

        if [ "$list" = 1 ]; then
            if [ $# = 0 ]; then
                echo "$dir"
            else
                echo "${cmdline[@]}"
            fi
            continue
        fi

        if ! pushd $dir >/dev/null; then
            _error "    Failed to enter $dir, skipped"
            continue
        fi

        if [ "$background" = 1 ]; then
            bash -c "${cmdline[*]}" </dev/tty &
        else
            bash -c "${cmdline[*]}" </dev/tty
        fi

        popd >/dev/null
    done <$srcfile

    if [ "$quit_clean" = 1 ]; then
        rm -f $srcfile
    fi
}

boot "$@"
