#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PACKAGE:=@PACKAGE@}
    : ${PROGRAM_TITLE:=Extract from ISO image}
    : ${PROGRAM_SYNTAX:=[OPTIONS] [--] image-files}

    : ${SUDO:=sudo}

    . shlib-import cliboot
    option -l --list            "List the contents of ISO"
    option -o --outdir =DIR     "Where the extracted files be saved"
    option -k --delete          "Auto delete the source archive"
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    opt_list=
    opt_delete=
    opt_outdir=

    isotmp=

function setopt() {
    case "$1" in
        -l|--list)
            opt_list=1;;
        -o|--outdir)
            opt_outdir="$2";;
        -k|--delete)
            opt_delete=1;;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    shopt -s nullglob
    shopt -s dotglob

    isotmp=`mktemp -d`

    for f in "$@"; do
        if [ "$opt_list" = 1 ]; then
            case "$f" in
                *.isz)
                    isz-tool.py info "$f"
                    ;;

                *.iso)
                    blksize=0
                    volsize=0
                    nJoliet=0
                    nRR=0
                    while read -a v; do
                        l="${v[*]}"
                        case "$l" in
                            "Logical block size is:"*)
                            #"Logical block size is:"*)
                                blksize="${v[-1]}";;
                            "Volume size is:"*)
                                volsize="${v[-1]}";;
                            "Juliet "*)
                                nJoliet="${v[-2]}";;
                            "Rock Ridge "*)
                                nRR="${v[-2]}";;
                        esac
                    done < <(isoinfo -d -i "$f")

                    _log1 "Logical block size: $blksize"
                    _log1 "Volume size: $volsize"

                    if [ "$nJoliet" -gt 0 ]; then
                        _log1 "Joliet directory of $f:"
                        isoinfo -l -J -i "$f"
                    elif [ "$nRR" -gt 0 ]; then
                        _log1 "Rock Ridge directory of $f:"
                        isoinfo -l -R -i "$f"
                    else
                        _log1 "ISO9660 directory of $f:"
                        isoinfo -l -i "$f"
                    fi
                    ;;

                *)
                    _warn "Unknown file type: $f"
                    ;;
            esac
            continue
        fi

        srcdir="${f%/*}"
        [ "$srcdir" = "$f" ] && srcdir=.
        base="${f##*/}"
        name="${base%.*}"
        ext="${base##*.}"
        if [ "$ext" = "$name" ]; then
            ext=
        fi

        case "$ext" in
        isz)
            iso="$srcdir/$name.iso"
            _log1 "Convert $f to $iso..."
            if isz-tool.py isz2iso "$f" "$iso"; then
                _log1 "Convertion succeeded."
                if [ "$opt_delete" = 1 ]; then
                    _log1 "Delete the isz file: $f"
                    rm "$f"
                fi
            else
                _error "Failed to convert, error=$?."
                continue
            fi
            ;;

        iso)
            iso="$f"
            ;;

        *)
            _warn "Unknown file type: $f"
            continue
            ;;
        esac

        if [ -z "$opt_outdir" ]; then
            srcdir=$(readlink -f "$srcdir")
            dst="${srcdir/yundl/mmc-lib}/$name"
        else
            dst="$opt_outdir/$name"
        fi

        if ! mkdir -p "$dst"; then
            _error "Can't create dir $dst: $!"
            continue
        fi

        _log2 "Mount ISO at $isotmp"
        if ! $SUDO mount -o loop,ro "$iso" "$isotmp"; then
            _error "Failed to mount: error $?"
            continue
        fi
        
        _log2 "Copy ISO contents to $dst"
        cp -R "$isotmp"/* "$dst"
        status=$?
        
        _log2 "Unmount ISO $isotmp"
        $SUDO umount "$isotmp"

        if [ $status = 0 ]; then
            _log2 "Copy succeeded."

            if [ "$opt_delete" = 1 ]; then
                if [ "$ext" = "iso" ]; then
                    _log2 "Delete the converted ISO file."
                    rm "$iso"
                fi
            fi
        fi

        _log2 "Set executable bits..."
        find "$dst" -type f -exec chmod -x {} +
        find "$dst" -type f -iname '*.exe' -exec chmod -v +x {} +
        find "$dst" -type f -iname '*.com' -exec chmod -v +x {} +
        find "$dst" -type f -iname '*.bat' -exec chmod -v +x {} +

        _log2 "Set files to be writable..."
        chmod -R +w "$dst"
    done

    if [ -d "$isotmp" ]; then
        rmdir "$isotmp"
    fi
}

boot "$@"
