#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PROGRAM_TITLE:=Kill all processes in the list}
    : ${PROGRAM_SYNTAX:=[OPTIONS] [--] [PROCESS-GREP-PATTERN]}

    . shlib-import cliboot
    option -f --list-file =FILE     "Read process names from FILE"
    option -s --signal =opt_signal      "Send specific signal to process"
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version
    option -0 -1 -2 -3 -4 -5 -6 -7 -8 -9 "select signal to send"

    opt_signal=
    opt_sigbuf=

    LISTFILE=
    psopts=(afx)

    killopts=()

function setopt() {
    case "$1" in
        -0|-1|-2|-3|-4|-5|-6|-7|-8|-9)
            opt_sigbuf="$opt_sigbuf$2";;
        -f|--list-file)
            LISTFILE="$2";;
        -s|--signal)
            opt_signal="$2";;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function _kill() {
    local pid="$1"
    if [ ! -d /proc/$pid ]; then # The process is no more existed
        continue
    fi
    read cmdline <"/proc/$pid/cmdline"
    _log1 "Kill pid=$pid"
    _log2 "    -> $cmdline"
    kill "${killopts[@]}" $pid
}

function main() {
    if [ -n "$opt_sigbuf" ]; then
        killopts+=("-$opt_sigbuf")
    fi
    if [ -n "$opt_signal" ]; then
        killopts+=( -s "$opt_signal" )
    fi

    if [ "$#" = 0 ] && [ -z "$LISTFILE" ]; then
        while read pid xxx; do
            _kill $pid
        done
    fi

    if [ -n "$LISTFILE" ]; then
        while read pid xxx; do
            _kill $pid
        done <"$LISTFILE"
    fi

    for pattern in "$@"; do
        COLUMNS=1000 ps "${psopts[@]}" | grep "$pattern" | while read pid xxx; do

            if [ "$xxx" != "${xxx/kill-all}" ]; then continue; fi
            if [ "$xxx" != "${xxx/grep }"    ]; then continue; fi

            _log2 "Matched process: [$pid] $xxx"
            _kill $pid

        done
    done
}

boot "$@"
