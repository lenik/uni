#!/usr/bin/perl

=head1 NAME

domfind - Find elements using CSS-like selector from HTML document from stdin
=cut
use 5.01;
use strict;
use vars qw($LOGNAME $LOGLEVEL);
use cmt::log(2);
    $LOGNAME    = 'domfind'; # $0 =~ /([^\/\\.]+)(?:\.\w+)*$/;
use cmt::vcs('parse_id');
    my %RCSID   = parse_id('$Id: - @VERSION@ @DATE@ @TIME@ - $');
use open(':std', ':encoding(UTF-8)');
use utf8;
use Getopt::Long;
    Getopt::Long::Configure('gnu_getopt');
use Mojo::DOM;

sub _main; sub _version; sub _help;

my $opt_pretty;
my $opt_text;
my $opt_all_text;

sub _boot {
    GetOptions('q|quiet'        => sub { $LOGLEVEL-- },
               'v|verbose'      => sub { $LOGLEVEL++ },
               'version'        => sub { _version; exit 0 },
               'h|help'         => sub { _help; exit 0 },
               'p|pretty'       => \$opt_pretty,
               't|text'         => \$opt_text,
               'T|all-text'     => \$opt_all_text,
               )
        or exit(1);
    _main;
}

=head1 SYNOPSIS

B<domfind>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<...CSS-like selector...> ]>

=head1 DESCRIPTION

B<domfind> is a WHAT used for WHAT. It HOW-WORKS.

BACKGROUND-PROBLEM.

HOW-domfind-RESOLVES.

=head1 OPTIONS

=over 8

=item B<-m> | B<--my-option>

...

=item B<-q> | B<--quiet>

Repeat this option to suppress unimportant information to display.

=item B<-v> | B<--verbose>

Repeat this option to display more detailed information.

=item B<-h> | B<--help>

Display a breif help page and exit(0).

=item B<--version>

Display a short version information and exit(0).

=back

=head1 EXAMPLES

=over 4

=item Show help

    domfind --help

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    &_version;
    print "\nSyntax: \n    $0 [OPTION] [--] css-selector\n", <<'EOM';

Common options:
    -q, --quiet             Repeat to get less info
    -v, --verbose           Repeat to get more info
    -h, --help              Show this help page
        --version           Print the version info
EOM
}

exit (_boot or 0);

sub _main {
    my (@selectors) = @ARGV;
    
    my @lines = <STDIN>;
    my $nline = scalar(@lines);
    _log2 "Read $nline lines.";
    my $html = join('', @lines);
    my $doc = Mojo::DOM->new($html);
    
    process($doc, 0, @selectors);
}

sub process() {
    my ($node, $level, @selectors) = @_;
    my $indent = '';
        $indent = ' ' x ($level * 4) if $opt_pretty;
    
    my ($head, @tail) = @selectors;
    my @list = $node->find($head)->each;
    my $n = scalar(@list);
    if ($n == 0) { return 0; }
    
    _log2 "${indent}found $n results:";
    my $n_tail = scalar(@tail);
    if ($n_tail) {
        for (my $i = 0; $i < $n; $i++) {
            my $item = $list[$i];
            if ($opt_pretty) {
                print "${indent}$i. " . $item->tag . "\n";
            }
            process($item, $level + 1, @tail);
        }
    } else {
        for (my $i = 0; $i < $n; $i++) {
            my $item = $list[$i];
            my $content;
            if ($opt_all_text) {
                $content = $item->all_text;
            } elsif ($opt_text) {
                $content = $item->text;
            } else {
                $content = $item->content;
            }
            $content =~ s/^\s+//;
            $content =~ s/\s+$//;
            print "${indent}$i. " if $opt_pretty;
            print "$content\n";
        }
    }
}

=head1 DIAGNOSTICS

(No Information)

=cut
# (HELPER FUNCTIONS)

=head1 HACKING

(No Information)

=cut
# (MODULE FUNCTIONS)

=head1 HISTORY

=over

=item 0.x

The initial version.

=back

=cut
sub _version {
    print "[$LOGNAME]  \n";
    print "Written by Lenik,  Version 0.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"Perl_simple_cli_program_template">

=head1 AUTHOR

Lenik (谢继雷) <lenik (at) bodz.net>

=cut
