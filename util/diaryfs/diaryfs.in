#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PACKAGE:=@PACKAGE@}
    : ${PROGRAM_TITLE:=DiaryFS commands}
    : ${PROGRAM_SYNTAX:=[OPTIONS] [--] cmd [cmd-args...]}

    DIARYFS_PREFIX=diaryfs_

    . shlib-import cliboot
    option -d --start-dir =DIR       "Specify the start dir of diaryfs."
    option -n --dry-run                 "Don't change real files."
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    opt_start_dir=
    opt_dry_run=0
    
function setopt() {
    case "$1" in
        -d|--start-dir)
            opt_start_dir="$2";;
        -n|--dry-run)
            opt_dry_run=1;;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            die "invalid option: $1";;
    esac
}

function main() {
    if [ -z "$opt_start_dir" ]; then
        local wdir
            wdir=$(readlink -f .) || die "can't get the absolute path of cwd."
        while [ -n "$wdir" ]; do
            if [ -d "$wdir/by-date" ]; then
                opt_start_dir="$wdir"
                break
            fi
            wdir="${wdir%/*}"
        done
        if [ -z "$opt_start_dir" ]; then
            for dir in "$HOME/diary"; do
                if [ -d "$dir" ]; then
                    opt_start_dir="$dir"
                    break
                fi
            done
        fi
        [ -d "$opt_start_dir" ] || die "unknown diary start dir."
        _log2 "Use $opt_start_dir as the diaryfs start directory."
    fi
    by_date_dir="$opt_start_dir/by-date"
    
    [ $# = 0 ] && die "expect cmdname."
    
    local cmdname="$1"
    local fn="$DIARYFS_PREFIX$cmdname"
    shift
    
    [ -z $(type -t "$fn") ] && die "invalid command: $cmdname."
    
    "$fn" "$@"
}

function diaryfs_version() {
    echo 1.0
}

function diaryfs_archive() {
    option -t --tag =TAG "Add a tag to the files. Can be repeated for multi tags."
    option -h --help
    
    local tags=() ntag=0 hashtag i=0 tag
    function _setopt() {
        case "$1" in
            -t|--tag)
                tags[ntag++]="$2";;
            -h|--help)
                help $1; exit;;
            *)
                die "invalid option: $1";;
        esac
    }; parse_opts "$@"; set -- "${g_args[@]}"
    
    if [ $ntag != 0 ]; then
        for tag in $(echoln "${tags[@]}" | sort); do
            if [ $i = 0 ]; then
                hashtag="["
            else
                hashtag="$hashtag, "
            fi
            hashtag="$hashtag#${tag}"
            ((i++))
        done
        hashtag="$hashtag]"
    fi
    
    local arg dir base
    for arg in "$@"; do
        dir="${arg%/*}"
        base="${arg##*/}"
        [ "$dir" = "$arg" ] && dir=.
        if [ -n "$hashtag" ]; then
            local newfile="$dir/$hashtag $base"
            mv -n -- "$arg" "$newfile" || die "failed to rename $arg to $newfile."
            arg="$newfile"
        fi
        by-date $logopts -d "$by_date_dir" -- "$arg"
    done
}

function diaryfs_make() {
    cd "$opt_start_dir" || die "failed to access $opt_start_dir."
    mkdir -p by-date by-tag by-user current
    mkdir -p by-mime by-mime-category
    diaryfs_make_symlinks
}

function diaryfs_make_symlinks() {
    cd "$opt_start_dir" || die "failed to access $opt_start_dir."
    local YYYY_MM_DD='%Y-%m-%d'

    local day_0=$( date +"$YYYY_MM_DD" )
    local day_1=$( date +"$YYYY_MM_DD" -d '1 days ago' )

    lang=en
    if [ $lang = en ]; then
        K_TODAY=today
        K_YESTERDAY=yesterday
        K_DAYS_AGO=_days_ago
        K_PASTWEEK=past_weekday_

        K_WEEKS_AGO=_weeks_ago
        K_WEEKDAY=weekday_
        K_THISWEEK=week
        K_LASTWEEK=last_week

        K_MONTHS_AGO=_months_ago
        K_MONTHDAY=day_
        K_THISMONTH=month
        K_LASTMONTH=last_month
    else
        K_TODAY=今天
        K_YESTERDAY=昨天
        K_DAYS_AGO=天以前
        K_PASTWEEK=过去周

        K_WEEKS_AGO=星期以前
        K_WEEKDAY=星期
        K_THISWEEK=本星期
        K_LASTWEEK=上星期

        K_MONTHS_AGO=月以前
        K_MONTHDAY=日
        K_THISMONTH=本月
        K_LASTMONTH=上月
    fi

    function dayRefInCurrent() {
        local dir="$1"; shift
        local date="$1"; shift
        local yearMonth="${date%-*}"
        local year="${yearMonth%-*}"
        local datePath="by-date/$year/$yearMonth/$date"
        local tag

        for tag in "$@"; do
            mk_symlink "$datePath" "$dir/$tag"
        done
    }

    refPrefix=''
    ndays=7
        dayRefInCurrent current "$day_0" "${refPrefix}$K_TODAY"
        dayRefInCurrent current "$day_1" "${refPrefix}$K_YESTERDAY"
        for ((i = 1; i <= ndays; i++)); do
            fmt=$( date +"$YYYY_MM_DD %u_%a" -d "$i days ago" )
            date="${fmt% *}"
            weekday="${fmt#* }"
            dayRefInCurrent "current" "$date" \
                "${refPrefix}$K_PASTWEEK${i}" \
                "${refPrefix}${i}$K_DAYS_AGO"
        done

    nweeks=3
        for ((i = 0; i < nweeks; i++)); do
            dir="$K_THISWEEK"
            [ $i != 0 ] && dir="$i$K_WEEKS_AGO"
            for ((j = 0; j < 7; j++)); do
                date=$( date +"$YYYY_MM_DD" -d "last monday - $i week + $j day" )
                dayRefInCurrent "current/$dir" "$date" \
                    "${refPrefix}$K_WEEKDAY$((j+1))"
            done
        done
        ( cd current; mk_symlink "1$K_WEEKS_AGO" "$K_LASTWEEK" )

    nmonths=3
        for ((i = 0; i < nmonths; i++)); do
            dir="$K_THISMONTH"
            [ $i != 0 ] && dir="$i$K_MONTHS_AGO"
            m_this=$( date +"$YYYY_MM_DD" -d "- $i month" )
            m_this_day="${m_this##*-}"
            #m_begin="${m_this%-*}-01"
            m_this_mo=${m_this%-*}
            m_this_year=${m_this_mo%-*}

            local direct=1
            if [ $direct == 1 ]; then
                mk_symlink "by-date/$m_this_year/$m_this_mo" "current/$dir"
            else
                m_next=$( date +"$YYYY_MM_DD" -d "$((- (i-1) )) month" )
                m_next_day=${m_next##*-}
                m_end=$(  date +"$YYYY_MM_DD" -d "$((- (i-1) )) month - $m_next_day day" )
                #m_end="${m_next%-*}-01"
                m_end_day=${m_end##*-}

                for ((j=1; j <= m_end_day; j++)); do
                    j_padded=000$j
                    j_padded=${j_padded: -2}
                    date="$m_this_mo-$j_padded"
                    dayRefInCurrent "current/$dir" "$date" "${refPrefix}$K_MONTHDAY$j"
                done
            fi
        done
        ( cd current; mk_symlink "1$K_MONTHS_AGO" "$K_LASTMONTH" )
}

function mk_symlink() {
    local target="$1"
    local symlink_file="$2"

    local goback=
    local remain="$symlink_file"
    local chop="${remain%/*}"
    while [ "$chop" != "$remain" ]; do
        goback="$goback../"
        remain="$chop"
        chop="${remain%/*}"
    done

    if [ "$opt_dry_run" = 1 ]; then
        echo ln -snf "$goback$target" "$symlink_file"
    else
        local parent="${symlink_file%/*}"
        if [ "$parent" != "$symlink_file" ]; then
            mkdir -p "$parent" || return 1
        fi

        if [ ! -e "$target" ]; then
            mkdir -p "$target"
        fi

        local old=$( readlink "$symlink_file" )
        if [ "$goback$target" != "$old" ]; then
            ln -snf "$goback$target" "$symlink_file"
        fi
    fi
}

boot "$@"
