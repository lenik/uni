#!/bin/bash
    RCSID='$Id: - @VERSION@ @DATE@ @TIME@ - $'
    PROGRAM_TITLE="Unzip archives with specific encoding"
    PROGRAM_SYNTAX="[OPTIONS] [--] "

    : ${UNRAR:=unrar}
    : ${UNZIP:=unzip}
    : ${_7Z:=7z}
    : ${BSDTAR:=bsdtar}

    . shlib
    import cliboot
    import trash

    option -o --output =DIR     "Extract to this directory"
    option -f --from =CHARSET   "Convert from this charset"
    option -O =CHARSET          "Convert from this charset (Ubuntu mod)"
    option -t --to =CHARSET     "Convert to this charset"
    option -y --yes             "Always answer yes"
    option -s --seperate        "Unzip in separate directories"
    option -k --delete          "Trash (or repeat to delete) the archive"
    option -x --extractor =CMD  "Use this command (default auto)"
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version
    
    if which unrar-auto >/dev/null; then
        UNRAR=unrar-auto
    fi

    opt_outdir=
    opt_from=gbk
    opt_to=utf-8
    opt_separate=0
    opt_delete=0
    opt_extractor=

    _7zopts=()
    bsdtaropts=(-v)
    unraropts=()
    unzipopts=()

function setopt() {
    case "$1" in
        -o|--output)
            opt_outdir="$2";;
        -f|--from)
            opt_from="$2";;
        -t|--to)
            opt_to="$2";;
        -y|--yes)
            _7zopts=("${_7zopts[@]}" -y)
            # othersie, bsdtaropts=("${bsdtaropts[@]}" -k)
            unraropts=("${unraropts[@]}" -y)
            unzipopts=("${unzipopts[@]}" -o)
            ;;
        -s|--separate)
            opt_separate=1;;
        -k|--delete)
            (( opt_delete++ ));;
        -x|--extractor)
            opt_extractor="x-$2";;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    which convmv >/dev/null || quit "convmv isn't available."

    for ar in "$@"; do
        dir="${ar%/*}"
        base="${ar##*/}"
        if [ "$dir" = "$ar" ]; then
            dir=.
        fi
        name="${base%.*}"
        ext="${base##*.}"
        if [ "$ext" = "$base" ]; then
            ext=
        fi

        xfn="$opt_extractor"
        if [ -z "$xfn" ]; then
            case "$ext" in
                7z)
                    xfn=x-7z;;
                rar)
                    xfn=x-unrar;;
                zip)
                    xfn=x-bsdtar;;
                *)
                    _log1 "Unknown archive type: $ar"
                    continue;;
            esac
        fi
        _conv_type=$( type -t $xfn-conv )
        if [ "$_conv_type" = "function" ]; then
            xfn=$xfn-conv
        fi
        if [ "$opt_separate" = 1 ]; then
            _cwd_type=$( type -t $xfn-cwd )
            if [ "$_cwd_type" = "function" ]; then
                xfn=$xfn-cwd
            fi
        fi

        olddir="$PWD"

        outdir="$dir"
        if [ -n "$opt_outdir" ]; then
            outdir="$opt_outdir"
        fi

        if [ "$opt_separate" = 1 ]; then
            outdir="$outdir/$name"
            mkdir -p "$outdir" || quit "Failed to create directory $outdir."
        fi

        _log1 "Enter into $outdir"
        dir=$( readlink -f "$dir" )
        ar="$dir/$base"
        if ! cd "$outdir"; then
            _error "Can't enter into $outdir: $?"
            continue
        fi

        _log1 "Extract $ar using $xfn..."
        if $xfn "$dir" "$base"; then
            _log1 "Extraction succeeded."
            case $opt_delete in
                1)
                    _log1 "Trash the archive $ar."
                    trash "$ar" || _error "Failed to trash"
                    ;;
                2)
                    _log1 "Delete the archive $ar."
                    rm "$ar" || _error "Failed to delete."
                    ;;
            esac
        else
            _error "Failed to extract $ar."
        fi
        
        _log1 "Leave from $outdir"
        cd "$olddir"
    done
}

function execute() {
    _log2 "Run: $*"
    "$@"
}

function x-unrar() {
    execute $UNRAR x "${unraropts[@]}" "$1/$2"
}

function x-unzip() {
    execute $UNZIP "${unzipopts[@]}" "$1/$2"
}

function x-7z() {
    execute $_7Z x "${_7zopts[@]}" "$1/$2"
}

function x-7z-conv() {
    local dir="$1"
    local base="$2"

    local list=`tempfile`
    local status=0

    local adds=()
    local passwd=
    local f
    for f in .passwd .password; do
        if [ -f "$dir/$f" ]; then
            read passwd <"$dir/$f"
            _log1 "Use password $passwd to extract."
            adds=("${adds[@]}" -p"$passwd")
            break
        fi
    done

    LANG=en.latin1 \
    # execute $_7Z x "${_7zopts[@]}" "${adds[@]}" "$dir/$base" > >(tee $list)
    _log2 "Run: " $_7Z x "${_7zopts[@]}" "${adds[@]}" "$dir/$base"
    $_7Z x "${_7zopts[@]}" "${adds[@]}" "$dir/$base" > >(tee $list)
    status=$?

    if [ $status = 0 ]; then
        v=()
        n=0
        while read path; do
            v[n++]="$path"
        done < <(cat $list \
                | sed -n 's/^Extracting //p' \
                | sed '1!G;h;$!d')
        _log1 "Convert filename encodings (listing)..."
        execute convmv -f $opt_from -t $opt_to --notest "${v[@]}"
    fi
    
    rm $list
    return $status
}

function x-bsdtar-conv-cwd() {
    local status=0

    LANG=C.UTF-8 \
    $BSDTAR -x "${bsdtaropts[@]}" -f "$1/$2"
    status=$?

    if [ $status = 0 ]; then
        _log1 "Convert filename encodings (all)..."
        execute convmv -f $opt_from -t $opt_to -r --notest .
    fi
    return $status
}

function x-bsdtar-conv() {
    local list=`tempfile`
    local status=0

    LANG=C.UTF-8 \
    execute $BSDTAR -x "${bsdtaropts[@]}" -f "$1/$2" > >(tee $list) 2>&1
    status=$?
    
    if [ $status = 0 ]; then
        v=()
        n=0
        while read x_char path; do
            v[n++]="$path"
            _log2 "  - $path"
        done <$list
        _log1 "Convert filename encodings (list)..."
        execute convmv -f $opt_from -t $opt_to --notest "${v[@]}"
    fi

    rm $list
    return $status
}

boot "$@"
