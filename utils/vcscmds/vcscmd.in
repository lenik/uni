#!/bin/bash

# master-file

    . shlib-import cliboot

    RCSID='$Id: - @VERSION@ @DATE@ @TIME@ - $'
    short_opts="hqv"
    long_opts="help,quiet,verbose,version,no-refname,iso-8601,timestamp,relative-date"

    VCS_DEFAULT=git
      VCS_PROBE=

    VCS_bazaar=(bzr)
    VCS_cvs=(cvs)
    VCS_git=(git)
    VCS_mercurial=(hg)
    VCS_rcs=(rcs)
    VCS_svn=(svn)

    FLAGS_git_rm=(-f)
    FLAGS_git_mv=(-f)

    refname=1
    git_log_date='%ar'

function version() {
    parse_id "$RCSID"
    echo "[$BASENAME] Common VCS commands dispatcher"
    echo "Written by Lenik, Version $rcs_rev, Last updated at $rcs_date"
}

function help() {
    version
    echo
    echo "Syntax: "
    echo "    $0 [OPTION|VCS-OPTION] [--] CMD|VCS-CMD ARGS|VCS-ARGS"
    echo
    echo "Options: "
    echo "    -q, --quiet             Repeat to get less info"
    echo "    -v, --verbose           Repeat to get more info"
    echo "    -h, --help              Show this help page"
    echo "        --version           Print the version info"
    echo
    echo "        --no-refname        Hide ref-name in the log"
    echo "        --iso-8601          Show date in ISO 8601 format"
    echo "        --timestamp         Show date in UNIX timestamp format"
    echo "        --relative-date     Show date in relative format"
    echo
    echo "VCS-Command: "
    echo "  add-dir                 Add a directory without its contents"
    echo "  checkout-branch(cobr)   Create a branch if it's not existed, and switch to it"
    echo "  commit+ (ci+)           Commit with minor version increased (autover)"
    echo "  commit-gui (cig)        Commit in GUI mode"
    echo "  grep (egrep, fgrep, pgrep) GREP but excludes VCS dir"
    echo "  ignore (ig)             Manipulate ignore list"
    echo "  localname               Show the relative pathname to the repository"
    echo "  log-graph (lg)          Show log in ascii arts"
    echo "  restore (rst)           Revert any change in working copy"
    echo "  rootpath                Show the root path of the checked out working copy"
    echo "  slist                   List file status in a canonical way"
    echo "  slupdate                Update and list the file status along"
    echo "  system (sys)            Print the VCS system to use"
    echo "  unadd                   Remove files from the commit-index"
    echo "  url [-r]                Print the URL (-r for root) which can be checked out"
    echo "  visualize (viz)         Show history animation"
}

function setopt() {
    case "$1" in
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        --no-refname)
            refname=0;;
        --iso-8601)
            date_format=iso-8601
            git_log_date='%ai'
            ;;
        --timestamp)
            date_format=timestamp
            git_log_date='%at'
            ;;
        --relative-date)
            date_format=relative
            git_log_date='%ar'
            ;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    for p in \
            svn=.svn \
            svn=_svn \
            git=.git \
            mercurial=.hg \
            rcs=.rcs \
            cvs=CVS \
            ; do
        sys=${p%%=*}
        pred="${p#*=}"
        if [ -d "$pred" ]; then
            _log2 "Detected VCS system $sys"
            VCS_PROBE=$sys
            break
        fi
    done

    [ -z "$VCS_PROBE" ] && git-probe `readlink -f .`

    if [ -n "$VCS_PROBE" ]; then
        VCS=$VCS_PROBE
    else
        if [ -f ~/.vcs ]; then
            VCS=`cat ~/.vcs`
        else
            VCS=$VCS_DEFAULT
        fi
    fi

    _log2 "Using VCS: $VCS"

    delegate=

    cmd="$1"
    shift
    cmdopts=("$@")

    case "$cmd" in
        sys|system)
            if [ -n "$VCS_PROBE" ]; then
                echo "$VCS_PROBE"
            else
                if [ "$1" = "-f" ]; then
                    if [ -n "$2" ]; then
                        echo "$2"
                    else
                        echo "$VCS"
                    fi
                else
                    exit 1
                fi
            fi
            ;;

        cobr|checkout-branch)
            $VCS-cobr "$@"
            ;;

        grep|egrep|fgrep|pgrep)
            GREPOPTS=(-`uc -e ${cmd:0:1}`)
            if [ -z `type -t $VCS-grep` ]; then
                cmd=grep
                cmdopts=("${GREPOPTS[@]}" "$@")
                delegate=1
            else
                $VCS-grep "${GREPOPTS[@]}" "$@"
            fi
            ;;

        add-dir)
            if [ -z `type -t $VCS-add-dir` ]; then
                cmd=add
                delegate=1
            else
                $VCS-add-dir "$@"
            fi
            ;;

        ig|ignore)
            export -f $VCS-il       $VCS-setil
            export -f $VCS-il-local $VCS-setil-local
            vcscmd-ignore \
                --read          $VCS-il \
                --write         $VCS-setil \
                --read-local    $VCS-il-local \
                --write-local   $VCS-setil-local \
                "$@"
            ;;

        ci+|commit+)
            delegate=1; cmd=commit-incr;;

        cig)    delegate=1; cmd=commit-gui;;
        rst)    delegate=1; cmd=restore;;
        lg)     delegate=1; cmd=log-graph;;
        viz)    delegate=1; cmd=visualize;;
        *)
            delegate=1;;
    esac
    [ -z "$delegate" ] && return

    if [ "`type -t $VCS-$cmd`" = 'function' ]; then

        $VCS-$cmd "$@"

    else
        VCSref="VCS_${VCS}[0]"
        VCS_CMD=${!VCSref}

        FLAGSref="FLAGS_${VCS}_$cmd[@]"
        CMD_FLAGS=("${!FLAGSref}")
        if [ -n "$CMD_FLAGS" ]; then
            cmdopts=("${CMD_FLAGS[@]}" "${cmdopts[@]}")
        fi

        _log2 "Delegate to $VCS_CMD $cmd ${cmdopts[@]}"
        if [ -z "$cmd" ]; then
            $VCS_CMD
        else
            $VCS_CMD "$cmd" "${cmdopts[@]}"
        fi
    fi
}


# Git Implementation
# ------------------

    function git-url() {
        read _fetch _url url \
            < <(LANG=C git remote show origin | grep "Fetch URL:")
        echo "$url"
    }

    function git-rootpath() {
        local d="$1"
        [ -z "$d" ] && d=.
        d=`readlink -f "$d"`
        while [ -n "$d" ]; do
            if [ -d "$d/.git" ]; then
                echo "$d"
                return 0
            fi
            d="${d%/*}"
        done
        die "Not a Git checkout: $d"
    }

    function git-localname() {
        [ $# = 0 ] && set .
        for f in "$@"; do
            f=`readlink -f "$f"`
            local root;
            root=`git-rootpath "$f"` || exit 1
            if [ "$f" = "$root" ]; then
                echo
            else
                echo "${f#$root/}"
            fi
        done
    }

    function git-probe() {
        local d="$1"
        [ -z "$d" ] && return 1
        if [ -d "$d/.git" ]; then
            VCS_PROBE=git
            git_root="$d"
            return 0
        fi
        git-probe "${d%/*}"
    }

    function git-add-dir() {
        _log2 "git add-dir do nothing. "
    }

    function git-add() {
        local dirs=()
        local ndir
        local f
        for f in "$@"; do
            if [ -f "$f" ]; then
                git add -f "$f"
            else
                dirs[ndir++]="$f"
            fi
        done

        if [ "${#dirs[@]}" != 0 ]; then
            git add "${dirs[@]}"
        fi
    }

    function git-unadd() {
        git reset HEAD "$@"
    }

    git_stage_il=1

    function git-il-local() {
        local d="$1"
        [ -z "$d" ] && die "Dirname is an empty string. "
        [ -f "$d/.gitignore" ] && cat "$d/.gitignore"
    }

    function git-setil-local() {
        local d="$1"
        cat >"$d/.gitignore"
        [ -n "$git_stage_il" ] && git add "$d/.gitignore"
    }

    function git-il() {
        local d="$1"
        [ -z "$d" ] && die "Not a Git checkout. "
        [ -f "$d/.gitignore" ] && cat "$d/.gitignore"

        if [ ! -d "$d/.git" ]; then
            [ "${d:0:1}" = '/' ] || d=`readlink -f "$d"`
            git-il "${d%/*}"
        fi
    }

    function git-setil() {
        local d="$1"
        local start="$2"
        [ -z "$d" ] && die "Not a Git checkout. "
        [ -z "$start" ] && start="$d"

        if [ -f "$d/.gitignore" ]; then
            cat >"$d/.gitignore"
            [ -n "$git_stage_il" ] && git add "$d/.gitignore"
            return
        fi

        if [ -d "$d/.git" ]; then
            _log2 "No .gitignore found in the path ancestors. "
            _log2 "Create a new one in the start point"
            cat >"$start/.gitignore"
            [ -n "$git_stage_il" ] && git add "$start/.gitignore"
        else
            [ "${d:0:1}" = '/' ] || d=`readlink -f "$d"`
            git-setil "${d%/*}" "$start"
        fi
    }

    function git-setil-local() {
        local d="$1"
        cat >"$d/.gitignore"
        [ -n "$git_stage_il" ] && git add "$d/.gitignore"
    }

    function git-cobr() {
        local name="$1"
        shift
        git branch "$name"
        git checkout "$name" "$@"
    }

    function git-restore() {
        git checkout "$@"
    }

    function git-slist() {
        [ $# = 0 ] && set .
        for dir in "$@"; do
            prefix=`git-localname "$dir"`
            nprefix=${#prefix}
            (
                git diff --name-status
                git diff --name-status --cached
            ) | sort -u | while IFS='|' read line; do
                char="${line:0:1}"
                path="${line:2}"
                path_prefix="${path:0:nprefix}"
                if [ "$prefix" != "$path_prefix" ]; then
                    continue
                fi
                path_local="${path:nprefix}"
                path_local="${path_local#/}"
                # SVN does really use space instead of TAB.
                # echo "$char"$'\t'"$path_local"
                echo "$char       $path_local"
            done
        done
    }

    function git-update() {
        git pull
    }

    function git-sl() {
        local method="$1"
        shift

        local d="$d"
        local prefix=`git-localname "${d:=.}"` || exit 1
            [ -n "$prefix" ] && prefix="$prefix/"
            _log2 "prefix: $prefix"
        local nprefix=$(( ${#prefix} + 1 ))

        PREV=`git show --format=format:%H --summary | head -1`
        case "$method" in
            pull) git pull >&2;;
            pure) git pull --rebase >&2;;
        esac
        NEXT=`git show --format=format:%H --summary | head -1`

        vers=()
        case "$method" in
            pull|pure)
                vers=($PREV $NEXT);;
        esac

        # [AMCD] \t PATH
        _log3 "git diff --name-status $PREV $NEXT"

        git diff --name-status "${vers[@]}" \
            | cut -d$'\t' -f2- \
            | grep "^$prefix" \
            | cut -c$nprefix-
    }

    function git-slupdate() {
        git-sl pure "$@"
    }

    function git-sldiff() {
        git-sl diff "$@"
    }

    function git-commit-incr() {
        die "Not impl"
    }

    function git-commit-gui() {
        gitg
    }

    function git-log-graph() {
        _hash_color=$'\e[47m'
        _ref_color=$'\e[1;45m'
        _author_color=$'\e[1;31m'
        _date_color=$'\e[1;34m'
        _reset=$'\e[0m'

        # %h%d [%an] %s %ar: <hash-abbr><ref-name> <author-name> <subject> <author-date-relative>
            logformat=
            logformat="$logformat$_hash_color%h$_reset"
        [ "$refname" = 1 ] &&
            logformat="$logformat$_ref_color%d$_reset"
            logformat="$logformat $_author_color[%an]$_reset"
            logformat="$logformat %s"
            logformat="$logformat $_date_color$git_log_date$_reset"

        logopts=(--graph --format="$logformat")
        nlogopt=2

        if [ "$1" = '-' ]; then
            shift
            [ "$#" != 0 ] && logopts[nlogopt++]=--follow
        fi

        git log "${logopts[@]}" "$@"
    }

    function git-visualize() {
        file="$1"
        if [ $# = 0 ]; then
            file=.
        else
            shift
        fi

        gource=`which gource` || quit "gource isn't installed."

        gitcmd=`gource --log-command git`
        tmplog=`tempfile`

        $gitcmd "$file" "$@" >$tmplog
        gource $tmplog

        rm -f "$tmplog"
    }


# SVN Implementation
# ------------------

    function svn-url() {
        local m=URL k v
        if [ "$1" = '-r' ]; then
            m="Repository Root"
            shift
        fi
        LANG=C svn info "$@" | while IFS=: read k v; do
            while [ "${v:0:1}" = ' ' ]; do
                v="${v# }"
            done
            if [ "$k" = "$m" ]; then
                echo "$v"
                return
            fi
        done
        false
    }

    function svn-rootpath() {
        local fullpath="$1"
        [ -z "$fullpath" ] && fullpath=.
        fullpath=`readlink -f "$fullpath"`

        local localname=`svn-localname "$fullpath"`
        local rootpath=${fullpath%$localname}
        rootpath="${rootpath%/}"
        echo "$rootpath"
    }

    function svn-localname() {
        local d="$1"
        [ -z "$d" ] && d=.

        read _url url \
            < <(LANG=C svn info "$d" | grep '^URL: ')
        read _repo _root root \
            < <(LANG=C svn info "$d" | grep '^Repository Root: ')

        name="${url#$root}"
        name="${name#/}"
        echo "$name"
    }

    function svn-add-dir() {
        svn add --depth empty "$@"
    }

    function svn-grep() {
        grep -r --exclude-dir .svn --color=auto "$@" .
    }

    function svn-il-local() { svn-il "$@"; }
    function svn-il() {
        svn propget svn:ignore "$1"
    }

    function svn-setil-local() { svn-setil "$@"; }
    function svn-setil() {
        grep -v '^$' | svn propset svn:ignore -F - "$1"
    }

    function svn-cobr() {
        die "SVN-cobr isn't implemented, yet. "
    }

    function svn-restore() {
        svn revert "$@"
    }

    function svn-unadd() {
        for f in "$@"; do
            read icon path <  <(svn st "$f")
            if [ "$icon" = 'A' ]; then
                svn revert --depth infinity "$f"
            fi
        done
    }

    function svn-slist() {
        # ACDIMRX?!~  Property:CM L HistoryCopy:+ Switch/Ext:SX Lock:KOTB Conflict:C
        svn status "$@"
        # | cut -c9-
    }

    function svn-slupdate() {
        svn update "$@" | svn-slnorm
    }

    function svn-commit-gui() {
        svn commit "$@"
    }


boot "$@"
