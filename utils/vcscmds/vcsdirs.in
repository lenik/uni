#!/bin/bash
# master-file

    RCSID='$Id: - @VERSION@ @DATE@ @TIME@ - $'
    PROGRAM_TITLE="Pull all vcs-managed projects"
    PROGRAM_SYNTAX="[OPTIONS] [--] VCS-ARGS"

    . shlib-import cliboot
    option -f --foreground  "Run vcscmd in foreground one by one"
    option -q --quiet       "Repeat to get less info"
    option -v --verbose     "Repeat to get more info"
    option -h --help        "Show this help page"
    option     --version    "Print the version info"

    list=~/.vcsdirs
    parallel=1

function setopt() {
    case "$1" in
        -f|--foreground)
            parallel=;;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    [ -r "$list" ] || die "Can't read from $list"

    pids=()
    n=0

    while read dir; do

        [ -z "$dir" ] && continue
        [ "${dir:0:1}" = '#' ] && continue

        if [ "${dir:0:1}" != '/' ]; then
            dir="$HOME/$dir"
        fi

        _log2 "Update $dir"
        pushd "$dir" >/dev/null || die "Failed to enter $dir"

        if [ "$parallel" = 1 ]; then
            _vcscmd "$@" &
        else
            _vcscmd "$@"
        fi

        pids[n++]=$!
    done <"$list"

    if [ "$parallel" = 1 ]; then
        _log2 "Wait for: ${pids[@]}"
        wait "${pids[@]}"
    fi
}

function _vcscmd() {
    if vcscmd "$@"; then
        _log1  "[DONE] <$1> $dir"
    else
        _error "[FAIL] <$1> $dir"
    fi
}

boot "$@"
