#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PROGRAM_TITLE:=Quick Logger}
    : ${PROGRAM_SYNTAX:=[OPTIONS] [--] CMD [OPTIONS] [--] MESSAGE}

    . shlib-import cliboot
    option -d --dir ="~/.qlog"  "The home directory for qlog database"
    option -C --color           "Turn on highlight colors"
    option -q --quiet       "Repeat to get less info"
    option -v --verbose     "Repeat to get more info"
    option -h --help        "Show this help page"
    option    --version     "Print the version info"

    qlog_dir=$HOME/.qlog
    color=

#TODO helpmore..
function help2() {
    echo
    echo "Task Schedule: "
    echo "    push <child-spec>     Add to the child list and jump to the task"
    echo "    pop                   Back to the parent task"
    echo "    st|stack              Stack trace"
    echo "    tree <task>           Show the task tree"
    echo "    grep [-EFPG] <regex>  Search matching tasks"
    echo
    echo "Task Operations: "
    echo "      (command-name [task-spec] [--] message)"
    echo "    P|pause [-<timeout>]  Pause the task, timeout alert if specified"
    echo "    r|resume              Resume the task"
    echo "    e|end                 Transit the task to the end state"
    echo "    c|cancel              Transit the task to the canceled state"
    echo "    V|done                End the task and put the Victory icon"
    echo "    X|fail                Cancel the task and put the failure icon"
    echo "    R|renice [<priority>] Change the priority of the task, default high"
    echo "    F|focus [<distance>]  Synchronize the task state with your attention, default on"
    echo "    T|title <title>       Change the task title"
    echo "    (empty)|log           Simple add log message"
    echo "    G|graph [-<format>]   Plot the graph to stdout or display, default png"
    echo "    :<attrib>[=<value>]   Print or change the attribute"
    echo
    echo "Task-specifier: "
    echo "    %id                   Specify the task by explicit id"
    echo "    <title>               Specify the task by the normalized name of the full title."
    echo "    <norm>=<task-spec>    Specify the task and change its normalization form"
    echo
    echo "Other commands: "
    echo "    category [add/rm/show/list ...]"
    echo "    priority [add/rm/show/list ...]"
    echo "    distance [add/rm/show/list ...]"
}

function setopt() {
    case "$1" in
        -d|--dir)
            [ -f "$2" ] || die "File existed: $2"
            qlog_dir="$2";;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    [ -d "$qlog_dir" ] || mkdir -p "$qlog_dir" \
        || die "Failed to create directory $qlog_dir"

    if [ "$1" == '--' ]; then
        cmd=
    else
        cmd="$1"
        shift
    fi

    [ -z "$cmd" ] && cmd=log

    case "$cmd" in
        st) cmd=stack;;
        P) cmd=pause;;
        r) cmd=resume;;
        e) cmd=end;;
        c) cmd=cancel;;
        V) cmd=done;;
        X) cmd=fail;;
        R) cmd=renice;;
        F) cmd=focus;;
        T) cmd=title;;
        G) cmd=graph;;
        :*) cmd=attrib;;
    esac

    case "$cmd" in
    'push')
        task_action push
        task_action resume parent
        ;;

    'pop')
        parent=task_revlog | task_last_resume
        task_action break parent
        ;;

    'stack')
        task_stack ''
        ;;

    'tree')
        task_tree ''
        ;;

    'grep')
        task_grep
        ;;

    'pause')
        task_action pause "$@"
        ;;

    'resume')
        if [ -n "$current_task" ]; then
            task_action break "$current_task"
        fi
        task_action resume "$@"
        task_chdir queue
        ;;

    'end')
        task_action end "$@"
        task_chdir stopped
        ;;

    'cancel')
        task_action cancel "$@"
        task_chdir stopped
        ;;

    'done')
        task_action done "$@"
        task_chdir done
        ;;

    'fail')
        task_action fail "$@"
        task_chdir stopped
        ;;

    'log')
        task_action log
        ;;

    'renice')
        task_action log "Adjust the priority from to"
        ;;

    'focus')
        task_action focus
        ;;

    'title')
        task_action log "Change the title from to"
        ;;

    'graph')
        task_action log "Plotted the graph"
        task_graph
        ;;

    'attrib')
        task_action log "Set attribute X to Y"
        ;;
    esac
}

function task_action() {
    local cmd="$1"
    local mesg="$2"

boot "$@"
