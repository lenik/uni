#!/bin/bash
# master-file

    RCSID='$Id: - @VERSION@ @DATE@ @TIME@ - $'
    PROGRAM_TITLE="Pull all vcs-managed projects"
    PROGRAM_SYNTAX="[OPTIONS] [--] <vcscmd>|<executable> [args...]"

    . shlib-import cliboot term
    option -f --foreground      "Run vcscmd in foreground one by one"
    option -c --cmd             "Execute cmdline instead of vcscmd"
    option -q --quiet
    option -v --verbose
    option -h --help
    option     --version        "Print the version info"

    list=~/.vcsdirs
    parallel=1
    run_mode=auto

function setopt() {
    case "$1" in
        -f|--foreground)
            parallel=;;
        -c|--cmd)
            run_mode=cmd;;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    [ -r "$list" ] || die "Can't read from $list"

    pids=()
    n=0

    oldpwd="$PWD"

    while read dir; do

        [ -z "$dir" ] && continue
        [ "${dir:0:1}" = '#' ] && continue

        [ $n != 0 ] && hline

        if [ "${dir:0:1}" != '/' ]; then
            dir="$HOME/$dir"
        fi

        _log2 "Update $dir"
        cd "$dir" >/dev/null || die "Failed to enter $dir"

        if [ "$parallel" = 1 ]; then
            run "$@" &
            pids[n++]=$!
        else
            run "$@"
        fi

        cd "$oldpwd"

    done <"$list"

    if [ "$parallel" = 1 ]; then
        _log2 "Wait for: ${pids[@]}"
        wait "${pids[@]}"
    fi
}

function run() {
    local withenv=1
    if [ "$withenv" = 1 ]; then
        PAGER= \
        _run "$@"
    else
        _run "$@"
    fi
}

function _run() {
    if [ "$run_mode" = auto ]; then
        type=$( vcscmd -t "$1" )
        if [ "$type" = 'function' ]; then
            run_mode=vcscmd
        fi

        case "$1" in
            status|push|pull|stash)
                run_mode=vcscmd
                ;;
            *)
                run_mode=cmd
                ;;
        esac
    fi

    case "$run_mode" in
        vcscmd)
            _log1 "vcscmd $1 in $dir..."
            vcscmd "$@" || _error "    Failed to run vcscmd $1 in $dir."
            ;;
        cmd)
            _log1 "exec in $dir: $*"
            if [ $# = 1 ]; then
                $SHELL -c "$1"
            else
                "$@" || _error "    Failed to exec $* in $dir."
            fi
            ;;
    esac
}

boot "$@"
