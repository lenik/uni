#!/bin/bash
    . shlib-import cliboot

    RCSID='$Id: - @VERSION@ @DATE@ @TIME@ - $'
    short_opts="abc:di:j:p:tD:I:PT:hqv"
    long_opts="auto,batch,class:,daemon,include:,job:,package:,define:,input-path:,want-ps,tex:,help,quiet,verbose,version"

    TEX=xelatex
    TEXOPTS=()
    texoptn=0

    DIFF=diff
    DIFFOPTS=-q

    opt_v=

    auto_rebuild=
    batch_mode=             # nonstopmode
    daemon_mode=
    job_name=
    want_ps=

    class_spec=
    packages=()
    packagen=0
    include_onlies=()
    include_onlyn=0
    test_only=
    defines=()
    definen=0

    change_count=0
    rerun_c=0

function version() {
    parse_id "$RCSID"
    echo "[$BASENAME] Cool Tex Builder"
    echo "Written by Lenik, Version $rcs_rev, Last updated at $rcs_date"
}


function help() {
    version
    echo
    echo "Syntax: "
    echo "    $0 [OPTION] [--] FILE[.[tex]]"
    echo
    echo "Options: "
    echo "    -a, --auto              Auto rebuild when necessary (for toc, idx, etc.)"
    echo "    -b, --batch             Run in \\nonstopmode"
    echo "    -c, --class=CLASS[...]  Declare document class, and prepare document environment"
    echo "    -d, --daemon            Daemon mode, auto rebuild on file change"
    echo "    -i, --include=FILE      Add file to include-only list"
    echo "    -j, --job=JOBNAME       Specify a job name different to file's basename"
    echo "    -p, --package=PKG[...]  Add package to use: \\usepackage[...]{PKG}"
    echo "    -t, --test-only         For Tex lint, fast but don't generate anything"
    echo "    -D, --define=NAM=VAL    Define macro/command"
    echo "    -I, --input-path=DIR    Add directory to \\input search path"
    echo "    -P, --want-ps           Output in PostScript, instead of PDF"
    echo "    -T, --tex=<program>     Use specific tex, xelatex by default"
    echo "    -q, --quiet             Repeat to get less info"
    echo "    -v, --verbose           Repeat to get more info"
    echo "    -h, --help              Show this help page"
    echo "        --version           Print the version info"
}

function setopt() {
    case "$1" in
        -a|--auto)
            auto_rebuild=1;;
        -b|--batch)
            batch_mode=1;;
        -c|--class)
            class_spec="$2";;
        -d|--daemon)
            daemon_mode=1;;
        -i|--include)
            include_onlies[include_onlyn++]="$2";;
        -j|--job)
            job_name="$2";;
        -p|--package)
            packages[packagen++]="$2";;
        -t|--test-only)
            test_only=1;;
        -D|--define)
            defines[definen++]="$2";;
        -I|--input-path)
            if [ -z "$TEXINPUTS" ]; then
                TEXINPUTS=.
            fi
            export TEXINPUTS="$TEXINPUTS:$2";;
        -P|--want-ps)
            want_ps=1;;
        -T|--tex)
            TEX="$2";;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    if [ $LOGLEVEL -ge 2 ]; then
        COLORDIFF=`which colordiff` && DIFF="$COLORDIFF"
        DIFFOPTS=-u
        opt_v=-v
    fi

    if [ "$#" = 0 ]; then quit ".tex file isn't specified."; fi

    texmode=tex
    texoutfmt=dvi
    case "${TEX##*/}" in
        xetex)
            texmode=tex
            texoutfmt=pdf;;
        xelatex)
            texmode=latex
            texoutfmt=pdf;;
        *latex)
            texmode=latex;;
    esac

    file="$1"
        if [ ! -e "$file" ]; then
            if [ -e "$file.tex" ]; then
                file="$file.tex"
            elif [ -e "${file}tex" ]; then
                file="${file}tex"
            fi
        fi
    base="${file%.*}"

    if [ -n "$job_name" ]; then
        TEXOPTS[texoptn++]="-jobname=$job_name"
        base="$job_name"
    fi

    preamble=
    beginhook=
    begindoc=
    enddoc=

    for def in "${defines[@]}"; do
        key="${def%%=*}"
        val="${def#*=}"
        preamble="$preamble\\def\\$key{$val}"
    done

    [ "$batch_mode" = 1 ] && preamble="$preamble\\nonstopmode"

    if [ -n "$class_spec" ]; then
        classname="${class_spec%%[*}"
        if [ "$classname" = "$class_spec" ]; then
            classopts=
        else
            classopts="${class_spec#*[}["
        fi
        preamble="$preamble\\documentclass$classopts{$classname}"
        begindoc='\begin{document}'
        enddoc='\end{document}'
    fi

    [ "$test_only"  = 1 ] && beginhook="$beginhook\\usepackage{syntonly}"

    for pkg_spec in "${packages[@]}"; do
        pkgname="${pkg_spec%%[*}"
        if [ "$pkgname" = "$pkg_spec" ]; then
            pkgopts=
        else
            pkgopts="${pkg_spec#*[}{"
        fi
        preamble="$preamble\\usepackage$pkgopts{$pkgname}"
    done

    onlies=
        for only in "${include_onlies[@]}"; do
            onlies="$onlies,$only"
        done
        if [ -n "$onlies" ]; then
            onlies="${onlies:1}"
            preamble="$preamble\\includeonly{$onlies}"
        fi

    [ -n "$beginhook" ] && preamble="$preamble\\AtBeginDocument{$beginhook}"

    while true; do
        [ -r "$file" ] || quit "File isn't readable: $file"

        if [ "$auto_rebuild" = 1 ]; then
            _log2 "Backup aux files (.aux, .idx, etc.) to detect changes for re-run"
            # for e in aux idx toc lot lof; do
            for e in aux idx; do        # .toc, .lot, .lof are generatd in aux.
                if [ -f "$base.$e" ]; then
                    cp $opt_v -f "$base.$e" "$base.$e~"
                fi
            done
        fi

        outfile="$base.$texoutfmt"
        _log2 "Assumed output file be $outfile..."

        if ! run_tex "${TEXOPTS[@]}" "$preamble$begindoc\\input{$file}$enddoc"; then
            if [ "$daemon_mode" != 1 ]; then
                if [ "$outfile" -nt "$file" ]; then
                    # Though there's errors, but still the file is created.
                    _warn "Got the file. Continue with error. "
                else
                    exit 1
                fi
            fi
        fi

        if [ "$auto_rebuild" = 1 ]; then
            _log1 "Auto checking if additional rebuild is needed..."
            rerun=

            # check if .idx is changed
            if [ -f "$base.idx" ]; then
                # if [ "$outfile" -ot "$base.idx" ]; then
                if ! _diff "$base.idx" "$base.idx~"; then
                    # Convert .idx(\indexentry*) -> .ind(minipage)
                    _log1 "  Updating index page"
                    makeindex "$base.idx"
                    rerun=1
                fi
            fi

            # makeglossarie

            # check if .aux is changed
            if [ -f "$base.aux" ]; then
                # if [ "$outfile" -ot "$base.aux" ]; then
                if ! _diff "$base.aux" "$base.aux~"; then
                    _log1 "  Auxiliary files were changed, rebuild the document"
                    rerun=1
                fi
            fi

            # check if .toc is changed
           # if [ -f "$base.toc" ]; then
           #     # if [ "$outfile" -ot "$base.toc" ]; then
           #     if ! _diff "$base.toc" "$base.toc~"; then
           #         _log1 "  Updating table of contents"
           #         rerun=1
           #     fi
           # fi

            if [ "$rerun" = 1 ]; then
                _warn "Something changed, the document is going to be rebuilt again" \
                    "($((++rerun_c)))"
                continue
            else
                rerun_c=0
            fi
        fi

        case "$texoutfmt" in
            dvi)
                if [ -z "$want_ps" ]; then
                    _log1 "Convert $base.dvi to $base.pdf"
                    # dvips "$base.dvi"
                    # ps2pdf "$base.ps"
                    dvipdf "$base.dvi"
                else
                    _log1 "Convert $base.dvi to $base.ps"
                    dvips "$base.dvi"
                fi
                ;;
            ps)
                if [ -z "$want_ps" ]; then
                    _log1 "Convert $base.ps to $base.pdf"
                    ps2pdf "$base.ps"
                fi
                ;;
            pdf)
                if [ "$want_ps" = 1 ]; then
                    _log1 "Convert $base.pdf to $base.ps"
                    pdf2ps "$base.pdf"
                fi
                ;;
        esac

        #_log2 "dvips/ps2pdf $base.dvi -> $base.pdf"
        #dvips "$base.dvi"
        #ps2pdf "$base.ps"

        if [ "$daemon_mode" = 1 ]; then
            _log1 "Waiting until $file is changed: $((++change_count)) times"

            # wait for notify by until-changed from coolcmd
            until-changed "$file" && continue

            # until-changed errorred.
            quit "until-changed failed, have you installed the coolcmd package?"
        fi

        break
    done
}

function run_tex() {
    _log2 "Execute: $TEX" "$@"
    if "$TEX" "$@"; then # 2>&1 | colorlog
        return 0
    else
        _error "Failed to run $TEX: error=$?"
        return 1
    fi
}

function _diff() {
    if [ -r "$1" ] && [ -r "$2" ]; then
        if [ $LOGLEVEL -ge 2 ]; then
            $DIFF $DIFFOPTS "$@"
        else
            $DIFF $DIFFOPTS "$@" >/dev/null 2>/dev/null
        fi
    else
        return 1
    fi
}

boot "$@"
