#!/usr/bin/perl
# master-file

=head1 NAME

treetex - Print directory tree in TeX

=cut
use strict;
use vars qw($LOGNAME $LOGLEVEL);
use cmt::log(2);
    $LOGNAME    = 'treetex'; # $0 =~ /([^\/\\.]+)(?:\.\w+)*$/;
use cmt::vcs('parse_id');
    my %RCSID   = parse_id('$Id: - @VERSION@ @DATE@ @TIME@ - $');
use DirHandle;
use File::Spec::Link;
use Getopt::Long;
    Getopt::Long::Configure('gnu_getopt');

sub _main; sub _version; sub _help;
sub qtex($);
sub treetex;

my $opt_framedoc        = 0;
my $opt_roottex         = undef;
my $opt_caption         = undef;
my $opt_all             = 0;
my $opt_dir_only        = 0;
my $opt_follow_syms     = 0;
my $opt_show_user       = 0;
my $opt_show_group      = 0;
my $opt_show_size       = 0;
my $opt_human           = 0;
my $opt_si1000          = 0;
my $opt_show_date       = 0;
my $opt_classify        = 0;
my $opt_color           = 0;

my $opt_hspan           = '0.5';
my $opt_vspan           = '0.7';
my $opt_vspan2          = '1.4';

sub _boot {
    GetOptions('q|quiet'        => sub { $LOGLEVEL-- },
               'v|verbose'      => sub { $LOGLEVEL++ },
               'version'        => sub { _version; exit 0 },
               'help'           => sub { _help; exit 0 },
               'a|all'          => \$opt_all,
               'c|caption=s'    => \$opt_caption,
               'C|color'        => \$opt_color,
               'd|dir'          => \$opt_dir_only,
               'D|date'         => \$opt_show_date,
               't|testdoc'      => \$opt_framedoc,
               'F|classify'     => \$opt_classify,
               'g|show-group'   => \$opt_show_group,
               'h|human-size'   => \$opt_human,
               'H|si'           => \$opt_si1000,
               'l|follow-syms'  => \$opt_follow_syms,
               'r|root=s'       => \$opt_roottex,
               's|size'         => \$opt_show_size,
               'u|show-user'    => \$opt_show_user,
                )
        or exit(1);

    $opt_human = 1 if $opt_si1000;
    $opt_show_size = 1 if $opt_human;

    _main;
}

=head1 SYNOPSIS

B<treetex>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<...the rest of arguments...> ]>

=head1 DESCRIPTION

B<treetex> is a WHAT used for WHAT. It HOW-WORKS.

BACKGROUND-PROBLEM.

HOW-treetex-RESOLVES.

=head1 OPTIONS

=over 8

=item B<-m> | B<--my-option>

...

=item B<-q> | B<--quiet>

Repeat this option to suppress unimportant information to display.

=item B<-v> | B<--verbose>

Repeat this option to display more detailed information.

=item B<-h> | B<--help>

Display a breif help page and exit(0).

=item B<--version>

Display a short version information and exit(0).

=back

=head1 EXAMPLES

=over 4

=item Show help

    treetex --help

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    &_version;
    print "\nSyntax: \n    $0 [OPTION] [--] ...\n", <<'EOM';

Common options:
    -a, --all               All files are included
    -c, --caption=TEXT      (LaTeX) Figure caption
    -d, --dir               List directories only
    -g, --show-group        Show owner group
    -h, --human-size        Show size in human readable way
    -H, --si                Like --human, but use powers of 1000 not 1024
    -l, --follow-syms       Follow symlinks
    -r, --root=TEXT         (LaTeX) Root node text
    -s, --size              Show size
    -t, --testdoc           Generate document skeleton for test
    -u, --show-user         Show owner user
    -C, --color             Turn on colorization
    -D, --date              Show last modified date
    -F, --classify          Append indicator (*/=>@|) to entries
    -q, --quiet             Repeat to get less info
    -v, --verbose           Repeat to get more info
        --help              Show this help page
        --version           Print the version info
EOM
}

exit (_boot or 0);

sub _main {
    if ($opt_framedoc) {
        print <<"EOT"
\\documentclass[CJK]{z-article}
\\usepackage{z-filetree}
\\begin{document}
EOT
    }

    for (@ARGV) {
        # dir, base, level
        my $root = mktree(undef, $_, 0);
        my $dirtitle = qtex($_);
        my $caption = $opt_caption;
            $caption = "Directory Of $dirtitle" unless defined $caption;

        $root->{text} = $opt_roottex if defined $opt_roottex;

        print <<"EOT";
\\begin{figure}
\\caption{$caption}
\\begin{tikzpicture}[
    grow via three points={one child at ($opt_hspan,-$opt_vspan) and
      two children at ($opt_hspan,-$opt_vspan) and ($opt_hspan,-$opt_vspan2)},
    edge from parent path={(\\tikzparentnode.south) |- (\\tikzchildnode.west)}]
    \\path
EOT
        texdump($root, '    ');
        print ";\n";
        print "\\end{tikzpicture}\n";
        print "\\end{figure}\n";
        print "\n";
    }

    if ($opt_framedoc) {
        print "\\end{document}\n";
    }
}

=head1 DIAGNOSTICS

(No Information)

=cut
# (HELPER FUNCTIONS)
sub qtex($) {
    my $s = shift;
    $s =~ s/\\/\\textbackslash/g;
    $s =~ s/([{}&^_\$\#%])/\\\1/g;
    #$s =~ s/~/\\textasciitilde/g;
    $s =~ s/~/\$\\sim\$/g;
    return $s;
}

=head1 HACKING

(No Information)

=cut
# (MODULE FUNCTIONS)

# node struct:
#   $node->{name}       \node (name)
#   $node->{attrs}      \node [attrs]
#   $node->{text}       \node {text} (Different to attrs.label)
#   $node->{description}
#   $node->{edge}
#   $node->{children}
sub mktree {
    my ($dir, $base, $level) = @_;
    my $path = (defined $dir) ? "$dir/$base" : $base;
    my $slash = rindex($path, '/');
    if ($slash == -1) {
        $dir = '.';
        $base = $path;
    } else {
        $dir = substr($path, 0, $slash);
        $base = substr($path, $slash + 1);
    }

    my $attrs = {};
    my $styles = [];
    my $children = [];
    my $node = {
        name    => $path,      # tr|/|_|... Not used currently.
        attrs   => $attrs,
        styles  => $styles,
        children=> $children,
    };

    my $label = qtex($base);
    my $description = '';

    if (defined $opt_roottex and $level == 0) {
        $label = $opt_roottex;
    }

    if (-d $path) { # dir
        push @$styles, 'dir';
        $label = "$label\\fileflag{/}" if $opt_classify;
    }

    if (-l $path) { # symlink
        my $target = File::Spec::Link->linked($path);
        push @$styles, 'symlink';
        $node->{target} = $target;
    }

    if (-x $path and -f $path) { # executable
        push @$styles, 'executable';
        $label = "$label\\fileflag{*}" if $opt_classify;
    }

    if (-p $path) { # pipe
        push @$styles, 'pipe';
        $label = "$label\\fileflag{|}" if $opt_classify;
    }

    if (-S $path) { # socket
        push @$styles, 'socket';
        $label = "$label\\fileflag{=}" if $opt_classify;
    }

    if (scalar(@$styles) == 0) {
        push @$styles, 'plain';
    }

    if ($opt_show_size and -f $path) { # file
        my @stat = stat($path);
        my $size = $stat[7];
        if ($opt_human) {
            my $unit = $opt_si1000 ? 1000 : 1024;
            my $level = 0;
            while ($size >= $unit) {
                $size = int($size / $unit);
                $level++;
            }
            my @units = qw(bytes kB MB GB TB PB);
            $unit = $units[$level];
            $size = "$size $unit";
        }
        $label = " ($size) $label";
        $node->{size} = $size;
    }

    $node->{text} = $label;
    $node->{description} = $description;

    my $hsum = 0;
    if (-d $path and
            not (-l $path and not $opt_follow_syms)) {

        my $dh = new DirHandle($path);
        my @files = $dh->read();
        @files = sort @files;
        $dh->close();

        for (@files) {
            next if $_ eq '.' or $_ eq '..';

            # hidden files
            next if substr($_, 0, 1) eq '.' and ! $opt_all;

            if ($opt_dir_only) {
                my $_path = $path . '/' . $_;
                next unless -d $_path;
            }

            $hsum++;

            my $child = mktree($path, $_, $level + 1);
            push @$children, $child;
            $hsum += $child->{innerheight};
        }
    }
    $node->{innerheight} = $hsum;

    return $node;
}

sub texdump($$) {
    my ($node, $lead) = @_;
    my $name = $node->{name};
    my $text = $node->{text};
    my $description = $node->{description};
    my $styles = $node->{styles};
    my $attrs = $node->{attrs};
    my $children = $node->{children};

    #if ($opt_show_size) {
    #    print "node[file size] {$node->{size}}";
    #    print "\n${lead}";
    #}

    print "node";
    # if ($name ...) print "($name)";

    $styles = join(', ', @$styles);
    print "[$styles";
        my $iattr = $styles eq '' ? 0 : 1;
        foreach my $key (keys %$attrs) {
            my $val = $attrs->{$key};
            print ', ' if ($iattr != 0);
            print "$key=$val";
            $iattr++;
        }
        print "]";

    print " {$text}";

    my $sublead = $lead.'    ';
    foreach my $child (@$children) {
        my $cc = $child->{children};
        my $leaf = scalar(@$cc) == 0;
        my $target = $child->{target};

        print "\n";
        print "${lead}child";

        print $leaf ? '{ ' : "{\n$sublead";
        texdump($child, $sublead);

        if (defined $target) {
            $target = qtex($target);
            print " child[->, parallel] { node[annotation] { $target } }";
        }
        print $leaf ? ' }' : "\n${lead}}";

        my $skip = $child->{innerheight};
        for (my $i = 0; $i < $skip; $i++) {
            print "\n${lead}child[missing] {}";
        }
    }
}

=head1 HISTORY

=over

=item 0.x

The initial version.

=back

=cut
sub _version {
    print "[$LOGNAME] Print directory tree in TeX \n";
    print "Written by Lenik,  Version 0.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"Perl_simple_cli_program_template">

=head1 AUTHOR

lenik <lenik (at) bodz.net>

=cut
