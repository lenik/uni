#!/bin/bash
    . shlib-import cliboot

    RCSID='$Id: - @VERSION@ @DATE@ @TIME@ - $'
    short_opts="e:s:12hqv"
    long_opts="editor:,suffix:,first-pass,second-pass,help,quiet,verbose,version"

    editor=$EDITOR
    suffix=
    p1=0
    p2=0

function version() {
    parse_id "$RCSID"
    echo "[$BASENAME] Batch edit"
    echo "Written by Lenik, Version $rcs_rev, Last updated at $rcs_date"
}

function help() {
    version
    echo
    echo "Syntax: "
    echo "    $0 [OPTION] [--] < FILELIST"
    echo
    echo "Options: "
    echo "    -e, --editor=EDITOR     Use specific editor"
    echo "    -s, --suffix=SUFFIX     Save each file with this suffix"
    echo "    -1, --first-pass        Gather all files into a temp file but not edit/merge"
    echo "    -2, --second-pass       Merge temp file into fs"
    echo "    -q, --quiet             Repeat to get less info"
    echo "    -v, --verbose           Repeat to get more info"
    echo "    -h, --help              Show this help page"
    echo "        --version           Print the version info"
}

function setopt() {
    case "$1" in
        -e|--editor)
            editor="$2";;
        -s|--suffix)
            suffix="$2";;
        -1|--first-pass)
            p1=1;;
        -2|--second-pass)
            p2=1;;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    if [ "$p1$p2" = 00 ]; then
        p1=1
        p2=1
    fi

    [ $# = 0 ] && set /dev/stdin
    [ -z "$editor" ] && editor="$EDITOR"

    if [ "$p1" = 0 ]; then
        tmpf="$1"
        [ -f "$tmpf" ] || die "Failed to open the temp file $tmpf"
    else
        tmpf=`tempfile` || die "Failed to create temp file"

        echo .DIR "$PWD" >>$tmpf
        echo DATE `date` >>$tmpf
        echo "---------------------------------------------------------------------" >>$tmpf

        for list in "$@"; do
                if [ ! -r "$list" ]; then
                        _warn "Can't read from list file $list, skipped"
                        continue
                fi

                echo "Process list file $list"
                while IFS= read file; do
                        if [ -d "$file" ]; then
                                _warn "Directory entry is skipped: $file"
                                continue
                        fi

                        base="${file##*/}"

                        if [ -n "$suffix" ]; then
                                if [ "${base: -${#suffix}}" = "$suffix" ]; then
                                        _log2 "Skip file with suffix: $f"
                                        continue
                                fi
                        fi

                        echo FILE "$file" >>$tmpf
                        echo DATE `stat -c %y "$file"` >>$tmpf
                        sed -e 's/^/  | /' "$file" >>$tmpf
                        echo "---------------------------------------------------------------------" >>$tmpf
                done <"$list"
        done
    fi

    case "$p1$p2" in
    01)
        _log1 "Batch updating with $tmpf..."
        ;;
    10)
        _log1 "Please edit $tmpf and call $0 -2 $tmpf later."
        ;;
    11)
        if ! "${editor[@]}" $tmpf; then
            die "Edit failed, see the temporary file $tmpf for recovery."
        fi
        ;;
    esac

    if [ "$p2" = 1 ]; then
        cname=
        cfile=
        cfile_s=
        ctmp=`tempfile`
        cdate=

        while IFS=$'\x1' read l; do
            c4="${l:0:4}"

            if [ "$c4" = '  | ' ]; then
                if [ -z "$cfile" ]; then
                    _warn "Skipped content: $content"
                    continue
                fi

                echo "$l" >>$ctmp
                continue
            fi

            param="${l:4}"
            while [ "${param:0:1}" == ' ' ]; do
                param="${param:1}"
            done

            case "$c4" in
            '')
                _warn "pure empty line occurred, skipped";;
            -*)
                continue;;
            .*)
                continue;;
            FILE)
                commit
                #cfile="$DIR$param"
                cfile="$param"
                cfile_s="$cfile$suffix"
                ;;
            DATE)
                cdate="$param";;
            *)
                _warn "Invalid C4 class: $c4"
                ;;
            esac

        done <"$tmpf"

        commit

        # Only clean immediately if p1p2=11
        [ "$p1" = 1 ] && rm -f $tmpf
    fi
}

function commit() {
    if [ -n "$cfile" ]; then
        _log2 "Check if modified: $cfile"
        cut -c5- $ctmp >$ctmp.2
        if ! diff -q "$cfile" $ctmp.2 >/dev/null; then
            _log1 "Update $cfile"
            cat $ctmp.2 >"$cfile_s"
        fi
        echo -n >$ctmp
        unset cfile
        unset cfile_s
    fi
}

boot "$@"
