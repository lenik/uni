#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PACKAGE:=@PACKAGE@}
    : ${PROGRAM_TITLE:=Move and resize a window}
    : ${PROGRAM_SYNTAX:=[OPTIONS] [--] ...}

    . shlib
    
    import cliboot
    import winfn
    
    option -e --echo                "echo the window id."
    option -i --win-id =ID          "specify the window to move/resize."
    option -W --max-width =NUM      "specify the max window width."
    option -H --max-height =NUM     "specify the max window height."
    option -w --width =NUM          "specify the exact window width."
    option -l --left =NUM           "the left position to place the window."
    option -t --top =NUM            "the top position to place the window."
    option -h --height =NUM         "specify the exact window height."
    option -c --center              "center the window."
    option -f --fill                "fill the window in the screen, used with --margin."
    option -m --margin =W:H         "fill with margin, W/H can be percent%. implied --fill."
    option -q --quiet
    option -v --verbose
    option    --help
    option    --version

    opt_echo=0
    opt_id=
    opt_max_width=
    opt_max_height=
    opt_width=
    opt_height=
    opt_center=
    opt_fill=0
    opt_margin_w=0
    opt_margin_h=0
    
function setopt() {
    case "$1" in
        -e|--echo)
            opt_echo=1;;
        -i|--win-id)
            opt_id="$2";;
        -W|--max-width)
            opt_max_width="$2";;
        -H|--max-height)
            opt_max_height="$2";;
        -w|--width)
            opt_width="$2";;
        -h|--height)
            opt_height="$2";;
        -c|--center)
            opt_center=1;;
        -f|--fill)
            opt_fill=1;;
        -m|--margin)
            opt_fill=1;;
            opt_margin_w=$2
            opt_margin_h=$2
            if [ "${opt_margin_w%:*}" != "$opt_margin_w" ]; then
                opt_margin_w=${opt_margin_w%%:*}
                opt_margin_h=${opt_margin_w#*:}
            fi
            ;;
        --help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    init_id "$opt_id" "$@"
    _log1 "window id $id (hex $id_hex)"
    
    local -A geom
    xdotool_query geom $opt_id
    left=${geom[left]}
    top=${geom[top]}
    width=${geom[width]}
    height=${geom[height]}
    _log1 "left $left, top $top, width $width, height $height. (from xdotool)"
    
    right=$(( left + width ))
    bottom=$(( top + height ))

    disp_found=0
    disp_left=
    disp_top=
    disp_w=
    disp_h=

    while read display _connected arg1 arg2 _; do
        # _log2 "> $display '$_connected' $arg1, $arg2, $_"
        #eDP-1 connected primary 2160x1350+0+0 (normal left inverted right x axis y axis) 280mm x 175mm
        #DP-2 connected 3840x2400+2160+0 (normal left inverted right x axis y axis) 708mm x 399mm
        gstr=
        if [ "$arg1" = 'primary' ]; then
            gstr="$arg2"
        else
            gstr="$arg1"
        fi

        IFS=x+ read disp_w disp_h disp_left disp_top _ < <(echo "$gstr")
        _log2 "display $display $disp_w x $disp_h at $disp_left, $disp_top"

        disp_right=$(( disp_left + disp_w ))
        disp_bottom=$(( disp_top + disp_h ))

        if [ $left -ge $disp_left ] && [ $top -ge $disp_top ] && 
            [ $right -le $disp_right ] && [ $bottom -le $disp_bottom ]; then
            disp_found=1
            break
        fi
    done < <(xrandr -q | grep '\bconnected')

    if [ $disp_found == 0 ]; then
        #local disp_w disp_h
        #read disp_w disp_h _ < <(xdotool getdisplaygeometry)
        quit "can't find the dispaly."
    fi
    _log1 "found the containing display $display at $disp_left, $disp_top of size $disp_w x $disp_h"

    local fill_w=$( subtract $disp_w $opt_margin_w $opt_margin_w )
    local fill_h=$( subtract $disp_h $opt_margin_h $opt_margin_h )
    
    local max_width=$( min $opt_max_width $fill_w )
    local max_height=$( min $opt_max_height $fill_h )

    local mod=0
    if [ -n "$max_width" ]; then
        [ $width -gt $max_width ] && width=$max_width && mod=1
        local right=$(( left + width ))
        if [ $right -gt $max_width ]; then
            left=$(( right - width ))
            [ $left -lt 0 ] && left=0
            mod=1
        fi
    fi
    if [ -n "$max_height" ]; then
        [ $height -gt $max_height ] && height=$max_height && mod=1
        local bottom=$(( top + height ))
        if [ $bottom -gt $max_height ]; then
            top=$(( bottom - height ))
            [ $top -lt 0 ] && top=0
            mod=1
        fi
    fi
    
    if [ "$opt_center" = 1 ]; then
        left=$(( ( disp_w - width ) / 2 ))
        top=$(( ( disp_h - height ) / 2 ))
        mod=1
    fi
    
    (( left += disp_left ))
    (( top += disp_top ))

    [ -n "$opt_left" ]   &&   left=$opt_left    && mod=1
    [ -n "$opt_top" ]    &&    top=$opt_top     && mod=1
    [ -n "$opt_width" ]  &&  width=$opt_width   && mod=1
    [ -n "$opt_height" ] && height=$opt_height  && mod=1
    
    if [ $mod = 0 ]; then
        _log1 "Nothing to do."
        return 0
    fi

    _log1 "resize window $id_hex ($id) to $width x $height and moved to $left x $top"
    wmctrl -i -r $id -e 0,$left,$top,$width,$height
}

function xdotool_query() {
    local -n map=$1
    shift
    local hwnd=$1
    
    _log2 "Use xdotool to get the window geometry for window $hwnd"
    local name val extra
    while read name val extra; do
        case "$name" in
            Position:)
                map[left]=${val%,*}
                map[top]=${val##*,}
                ;;
            Geometry:)
                map[width]=${val%x*}
                map[height]=${val##*x}
                ;;
        esac
    done < <(xdotool getwindowgeometry $hwnd)
}

function fsleep() {
    sleepenh "$@" >/dev/null
}

function subtract() {
    local num=$1
    shift

    local delta
    for delta in "$@"; do
        [ -z "$delta" ] && continue
        case "$delta" in
            *%)
                (( num -= num * ${delta%\%} / 100 ))
                ;;
            *)
                (( num -= delta ))
                ;;
        esac
    done
    echo $num
}

function min() {
    local a=$1
    local b=$2
    if [ -z "$a" ]; then
        echo "$b"
    elif [ -z "$b" ]; then
        echo "$a"
    else
        if [ $a -le $b ]; then
            echo $a
        else
            echo $b
        fi
    fi
}

function mul_10e() {
    local f=$1
    local pow=${2:-0}
    if [ $pow -lt 0 ]; then
        div_10e $f ${pow#-}
        return
    fi
    local int=${f%%.*}
    local dec=${f#*.}
    [ $int = $f ] && dec=
    local dec_len=${#dec}
    if [ $dec_len -lt $pow ]; then
        dec=${dec}00000000000000000
        dec=${dec:0:pow}
    fi
    f=$int${dec:0:pow}
    dec=${dec:pow}
    [ -n "$dec" ] && f=$f.$dec
    echo "$f"
}

function div_10e() {
    local f=$1
    local pow=${2:-0}
    if [ $pow -lt 0 ]; then
        mul_10e $f ${pow#-}
        return
    fi
    
    local int=${f%%.*}
    local dec=${f#*.}
    [ $int = $f ] && dec=
    local dec_len=${#dec}
    if [ $int_len -lt $pow ]; then
        int=000000000000000000000${int}
        int=${int: -pow}
    fi
    f=${int:0: -pow}
    dec=${int:pow}$dec
    [ -n "$dec" ] && f=$f.$dec
    echo "$f"
}

function div() {
    local pow=${3:-8}
    local a=$( mul_10e $1 $pow )
    local b=$( mul_10e $2 $pow )
    echo $(( a / b ))
}

function mul_f() {
    local pow=${3:-8}
    local a=$1
    local b=$( mul_10e $2 $pow )
    local ab = a * b
    div_10e $ab $pow
}

boot "$@"
