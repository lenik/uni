#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PACKAGE:=@PACKAGE@}
    : ${PROGRAM_TITLE:=}
    : ${PROGRAM_SYNTAX:=[OPTIONS] [--] CMDLINE...}

    . shlib-import cliboot
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version
    option -t --timeout =SECS       "seconds to wait for the window of child process, default 5"
    
    opt_ntry=50

function setopt() {
    case "$1" in
        -t|--timeout)
            opt_ntry=$(( $2 * 10 ));;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    if [ $# = 0 ]; then
        _error "cmdline is not specified."
        exit 1
    fi
    
    "$@" &
    
    local child_pid=$!
    local child_hwnd=
    
    _log2 "wait for the window for PID $child_pid..."
    local itry=0
    while [ $itry -lt $opt_ntry ]; do
        while read hwnd desktop pid host title; do
            # desktop=-1 for sticky window
            if [ $pid = $child_pid ]; then
                child_hwnd=$hwnd
                break
            fi
        done < <( wmctrl -lp )
        [ -n "$child_hwnd" ] && break
        (( itry++ ))
        sleepenh 0.1 >/dev/null
    done
    
    if [ -z "$child_hwnd" ]; then
        _error "can't find window for the child process $pid."
        return 2
    fi
    
    _log1 "find window: $child_hwnd"
    
    while true; do
        d=$( window-decorations $child_hwnd )
        if [ "$d" != 0 ]; then
            window-decorations -r $child_hwnd
        else
            break
        fi
        sleepenh 0.001 >/dev/null
    done
}

boot "$@"
