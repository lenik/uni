#!/usr/bin/perl

=head1 NAME

runx - Interpreter of .x file

=cut
use strict;
use vars qw($LOGNAME $LOGLEVEL);
use cmt::log(2);
    $LOGNAME    = 'runx'; # $0 =~ /([^\/\\.]+)(?:\.\w+)*$/;
use cmt::path('path_split', 'path_splitext', 'path_join');
use cmt::util('qsplit');
use cmt::vcs('parse_id');
    my %RCSID   = parse_id('$Id$');
use Getopt::Long;
use IPC::Open2;

sub _main; sub _version; sub _help;

sub mk_cmdline;

our $opt_path_find      = 0;
our $opt_kill_header    = 0;

my $opt_program;
my @opt_args;

# GET:  send program-file as an argument to the shell
# POST: send program-file to STDOUT to the shell
my $opt_method          = 'POST';

my %opt_escapes;

sub _boot {
    %opt_escapes = (
        "\\" => "\\\\",
        "\n" => "\\n",
        "\r" => "\\r",
        "\t" => "\\t",
        "\"" => "\\\"",
        "\'" => "\\\'",
        "|"  => "\\|",      # pipe
        "<"  => "\\<",      # redirect
        ">"  => "\\>",      # redirect
        );
    for my $i (0..31) {
        $opt_escapes{chr($i)} ||= '\x'.substr('00'.$i, -2);
    }

    for (my $i = 0; $i <= $#ARGV; $i++) {
        # next unless defined $ARGV[$i]; # ??
        if ($ARGV[$i] eq '--') {
            @opt_args = splice(@ARGV, $i + 1);
            pop @ARGV;
        }
    }

    GetOptions('quiet|q'        => sub { $LOGLEVEL-- },
               'verbose|v'      => sub { $LOGLEVEL++ },
               'version'        => sub { _version; exit 0 },
               'help|h'         => sub { _help; exit 0 },
               'path-find',
               'kill-header',
               );
    if (@ARGV) {
        push @opt_args, @ARGV;
        @ARGV = ();
    }

    $opt_program = shift @opt_args;
    die "No program specified. " unless $opt_program;

    unless (-f $opt_program) {
        if ($opt_path_find) {
            $opt_program = which($opt_program)
                or die "Program $opt_program isn't existed (in PATH)";
        } else {
            die "Program $opt_program isn't existed";
        }
    }

    _log2 "program       = $opt_program";
    _log2 "arguments     = ".join(',', @opt_args);

    _main;
}

=head1 SYNOPSIS

B<runx>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<...the rest of arguments...> ]>

=head1 DESCRIPTION

B<runx> is a WHAT used for WHAT. It HOW-WORKS.

BACKGROUND-PROBLEM.

HOW-runx-RESOLVES.

=head1 OPTIONS

=over 8

=item B<-m> | B<--my-option>

...

=item B<-q> | B<--quiet>

Repeat this option to suppress unimportant information to display.

=item B<-v> | B<--verbose>

Repeat this option to display more detailed information.

=item B<-h> | B<--help>

Display a breif help page and exit(0).

=item B<--version>

Display a short version information and exit(0).

=back

=head1 EXAMPLES

=over 4

=item Show help

    runx --help

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    &_version;
    print "\nSyntax: \n    $0 [OPTION] [--] COMMAND [ARGUMENTS]\n", <<'EOM';

Common options:
    -p, --path-find         find command in PATH and PATHEXT
    -k, --kill-header       remove #! headers
                              this will create a tmp file for GET method
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
    -h, --help              show this help page
        --version           print the version info
EOM
}

exit (_boot or 0);

sub _main {
  # Parse headers and guess method
    open PF, "<$opt_program"
        or die("Can't open program $opt_program: $!");
    my $header;
    while (<PF>) {
        if (/^#!\s*(.*)$/) {
            $header .= $1;
            last unless $header =~ s/\\$//;
        } elsif (/^#\?\s*(.*)$/) {
            $opt_method = 'GET';
            $header .= $1;
            last unless $header =~ s/\\$//;
        }
    }

    my @sh_args = qsplit(qr/\s+/, $header);
    my $appear = 0;
    if (grep { /\?$/ } @sh_args) {
        $opt_method = 'GET';
        $appear = 1;
    }

    _log2 "method        = $opt_method";

  # Prepare tmp file
    my $runtmp = $opt_kill_header && $opt_method eq 'GET';
    my $runpath= $opt_program;
    if ($runtmp) {
        my ($tdir, $tbase) = path_split($opt_program);
        # my ($tfile, $text) = path_splitext($tbase);
        $runpath = path_join($tdir, 't_'.int(rand 10000).'_'.$tbase);
        open TF, ">$runpath"
            or die("Can't create tmp file $runpath: $!");
        print TF while (<PF>);
        close TF;
        at_exit {
            _log2 "remove tmp file $runpath";
            unlink $runpath;
        }
    }

    # unshift @opt_args, $runpath;
    $ENV{PROGRAM} = $runpath;

    close PF;

  # Preprocess shell arguments
    for my $i (0..$#sh_args) {
        $_ = $sh_args[$i];
        if (/\?$/) {
            chop;
            $_ .= $runpath;
        }
        s/\$\{([^}]+)\}/$ENV{$1}/g;
        $sh_args[$i] = $_;
    }
    push @sh_args, $runpath unless $appear;

    my $sh_cmd = shift @sh_args;
    die "No shell-command specified in the header lines"
        unless defined $sh_cmd;

    unless (-f $sh_cmd) {
        if ($opt_path_find) {
            $sh_cmd = which($sh_cmd)
                or die "Shell-command $sh_cmd isn't existed (in PATH)";
        } else {
            die "Shell-command $sh_cmd isn't existed";
        }
    }

    _log2 "sh-command    = $sh_cmd";
    _log2 "sh-arguments  = ".join(',', @sh_args);

  # Invoking shell
    my $ret;
    my @args = ($sh_cmd, @sh_args, @opt_args);
    my $cmdline = mk_cmdline @args;
    _log2 "sh-commandline= $cmdline";

    if ($opt_method eq 'GET') {
        _log2 "system: $cmdline";
        $ret = system(@args);
    } elsif ($opt_method eq 'POST') {
        open PF, "<$runpath"
            or die("Can't read from $runpath");

        # my $pid = open2(\*RDOUT, \*WRIN, @args)
        #     or die("Can't open command for piping: $!");
        _log2 "Open command for piping: $cmdline";
        open PROC, "|$cmdline"
            or die("Can't open command for piping: $!");
        while (<PF>) {
            next if $opt_kill_header && /^#!/;
            _log2 "POST: $_";
            print PROC;
        }

        close PROC;
        close PF;
    } else {
        die "Unexpected: unknown method: $opt_method";
    }
    return $ret;
}

=head1 DIAGNOSTICS

(No Information)

=cut
# (HELPER FUNCTIONS)
sub mk_cmdline {
    my $line;
    for (@_) {
        if (/[\x01-\x20|<>]|\s/) {
            s/([\x01-\x1F"'|<>\\])/$opt_escapes{$1}/g;
        }
        $line .= $_ . ' ';
    }
    chop $line;
    return $line;
}

=head1 HACKING

(No Information)

=cut
# (MODULE FUNCTIONS)

=head1 HISTORY

=over

=item 0.x

The initial version.

=back

=cut
sub _version {
    print "[$LOGNAME] Interpreter of .x file \n";
    print "Written by Lenik,  Version 0.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"Perl_simple_cli_program_template">

=head1 AUTHOR

Xima Lenik <name@mail.box>

=cut
