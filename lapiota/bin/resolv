#!/usr/bin/perl

=head1 NAME

resolv - Simple Domain Name Resolver

=cut
use strict;
use vars qw($LOGNAME $LOGLEVEL);
use cmt::dnsutil('resolv');
use cmt::lang('_or');
    $LOGNAME    = 'resolv'; # $0 =~ /([^\/\\.]+)(?:\.\w+)*$/;
use cmt::log(2);
use cmt::util();
use cmt::vcs('parse_id');
    my %RCSID   = parse_id('$Id$');
use Getopt::Long;
use Socket('inet_ntoa');

sub _main; sub _version; sub _help;
sub resolv_addr;

our $opt_arp;
our $opt_test_dnsutil   = 0;

sub _boot {
    GetOptions('quiet|q'        => sub { $LOGLEVEL-- },
               'verbose|v'      => sub { $LOGLEVEL++ },
               'version'        => sub { _version; exit 0 },
               'help|h'         => sub { _help; exit 0 },
               'arp|a',
               'test-dnsutil',
               );
    require cmt::dnsutil if $opt_test_dnsutil;

    _main;
}

=head1 SYNOPSIS

B<resolv>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<...the rest of arguments...> ]>

=head1 Simple Domain Name Resolver

B<resolv> is a WHAT used for WHAT. It HOW-WORKS.

BACKGROUND-PROBLEM.

HOW-resolv-RESOLVES.

=head1 OPTIONS

=over 8

=item B<-m> | B<--my-option>

...

=item B<-q> | B<--quiet>

Repeat this option to suppress unimportant information to display.

=item B<-v> | B<--verbose>

Repeat this option to display more detailed information.

=item B<-h> | B<--help>

Display a breif help page and exit(0).

=item B<--version>

Display a short version information and exit(0).

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    &_version;
    print "\nSyntax: \n    $0 [OPTION] [--] DOMAIN-NAMES\n", <<'EOM';

Common options:
    -a, --arp               send arp packet
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
    -h, --help              show this help page
        --version           print the version info
EOM
}

exit (_boot or 0);

sub _main {
    # cmd::dnsutil test
    if ($opt_test_dnsutil) {
        for my $domain (@ARGV) {
            my $addr = resolv($domain);
            _log1 "$domain - $addr";
            return;
        }
    }

    for my $domain (@ARGV) {
        _log2 "     name: $domain";

        # ($name,$aliases,$addrtype,$length,@addrs) = gethost*
        my @res = gethostbyname($domain);

        _log2 "true name: " . _or($res[0], 'n/a');
        if ($res[1]) {
            _log2 "    alias: " . $_ for split(/\s+/, $res[1]);
        }
        _log2 " addrtype: " . _or($res[2], 'n/a');
        _log2 "   length: " . _or($res[3], 'n/a');

        my @addrs;
        for (@res[4..$#res]) {
            my $addr = inet_ntoa($_);
            push @addrs, $addr;
        }

        if (@addrs) {
            my $max = $LOGLEVEL > 1 ? $#addrs : 0;
            resolv_addr $addrs[$_] for 0..$max;
        } else {
            _P2 "(empty address list)";
        }
    }
}

=head1 DIAGNOSTICS

(No Information)

=cut
# (HELPER FUNCTIONS)

=head1 HACKING

(No Information)

=cut
# (MODULE FUNCTIONS)
sub resolv_addr {
    my $addr = shift;
    my $buf = $addr;
    if ($opt_arp) {

    }
    _P1 $buf;
}

=head1 HISTORY

=over

=item 0.x

The initial version.

=back

=cut
sub _version {
    print "[$LOGNAME] Simple Domain Name Resolver \n";
    print "Written by Lenik,  Version 0.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"Perl_simple_cli_program_template">

=head1 AUTHOR

Xima Lenik <lenik@bodz.net>

=cut
