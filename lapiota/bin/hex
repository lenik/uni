#!/usr/bin/perl

=head1 NAME

hex - convert numbers between different systems

=cut
use strict;
use vars qw($LOGNAME $LOGLEVEL);
use cmt::log(2);
    $LOGNAME    = 'hex'; # $0 =~ /([^\/\\.]+)(?:\.\w+)*$/;
use cmt::util('readfile');
use cmt::vcs('parse_id');
    my %RCSID   = parse_id('$Id$');
use Getopt::Long;

sub _main; sub _version; sub _help;
sub systemDecode;
sub systemEncode;
sub radixTable;

our $opt_table          = '0123456789abcdefghijklmnopqrstuvwxyz';
our $opt_upper          = 0;
our $opt_force          = 0;
our $opt_from           = 0;
our $opt_to             = 0;
our $opt_print          = '<report>';       # default is table-report
our $opt_width          = 1;
our $opt_ccr_mode       = 0;
our $opt_dump;

# Control-Code Representation
our @ccr_table_n2c  = (
        '.', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',     # 00
        'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '[', '\\',']', '^', '_',     # 10
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',     # 20
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',     # 30
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',     # 40
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',     # 50
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',     # 60
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',     # 70
        ' ', '!', '"', '#', '$', '%', '&', '!', '(', ')', '*', '+', ',', '-', ' ', '/',     # 80
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?',     # 90
        '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',     # A0
        'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', ' ', ' ', ' ', ' ',     # B0
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',     # C0
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',     # D0
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',     # E0
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',     # F0
        );

our @ccr_table_c2n  = (
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,      # 00
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,      # 10
       128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,   0, 143,      # 20
       144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,      # 30
       160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,      # 40
       176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,      # 50
        -1,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,      # 60
        16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,      # 70
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,      # 80
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,      # 90
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,      # A0
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,      # B0
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,      # C0
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,      # D0
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,      # E0
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,      # F0
        );

sub _boot {
    GetOptions('quiet|q'        => sub { $LOGLEVEL-- },
               'verbose|v'      => sub { $LOGLEVEL++ },
               'version'        => sub { _version; exit 0 },
               'help|h'         => sub { _help; exit 0 },
               'alphabet=s'     => \$opt_table,
               'uppercase'      => sub { $opt_upper = 1 },
               'lowercase'      => sub { $opt_upper = 0 },
               'from|f=n',
               'to=n',
               'print:s',
               'width=n',
               'ccr-mode',
               'force',
               'dump:n',
               );
    $opt_table = uc $opt_table if $opt_upper;
    $opt_table = lc $opt_table if not $opt_upper;
    $opt_print = '$dh' if $opt_print eq '';

    $opt_dump ||= 16 if defined $opt_dump;
    _main;
}

=head1 SYNOPSIS

B<hex>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<...the rest of arguments...> ]>

=head1 convert numbers between different systems

B<hex> is a WHAT used for WHAT. It HOW-WORKS.

BACKGROUND-PROBLEM.

HOW-hex-RESOLVES.

=head1 OPTIONS

=over 8

=item B<-m> | B<--my-option>

...

=item B<-q> | B<--quiet>

Repeat this option to suppress unimportant information to display.

=item B<-v> | B<--verbose>

Repeat this option to display more detailed information.

=item B<-h> | B<--help>

Display a breif help page and exit(0).

=item B<--version>

Display a short version information and exit(0).

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    &_version;
    print "\nSyntax: \n    $0 [OPTION] [--] <TEXT OR \@FILE>\n", <<'EOM';

Common options:
    -f, --from=ORDIX
    -t, --to=ORDIX
    -a, --alphabet=STRING
    -c, --ccr-mode
        --force
    -p, --print=FORMAT      default '$dh'
    -l, --lowercase
    -u, --uppercase
    -w, --width=WIDTH
    -d, --dump[=LINEWIDTH]  default 16
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
    -h, --help              show this help page
        --version           print the version info

Format:
    CHAR    $VARS   \ESC_CHAR

Examples:
    hex -p=\$dh. 233 12 55 302 34           Output: e9.c.37.12e.22.
    hex 233 12 55 302 34 -p                 Output: e9c3712e22
    hex -c -p=$dd. '.brp'                   Output:
EOM
}

exit (_boot or 0);

sub _main {
    if (defined $opt_dump) {
        die "Only hex-dump is supported, yet" if $opt_dump != 16;
        my $s = join(' ', @ARGV);
        $s = readfile $s if $s =~ s/^\@//;
        for (my $i = 0; $i < length($s); $i++) {
            my $c = substr($s, $i, 1);
            printf("%02x", ord $c);
        }
        print "\n";
        exit;
    }

    for (@ARGV) {
        if (m/^[\'\"]/) {
            my @chars = split('', substr($_, 1, -1));
            for (@chars) {
                my $num = ord;
                if ($opt_ccr_mode) {
                    $num = $ccr_table_c2n[$num];
                    die "Undefined CCR character: $_" if ($num < 0);
                }
                radixTable $num;
            }
        } else {
            die "Only positive integer are supported. " if (m/^\s*-/);
            radixTable;
        }
    }
}

=head1 DIAGNOSTICS

(No Information)

=cut
# (HELPER FUNCTIONS)

sub systemDecode {
    my ($text, $sys) = @_;
    my @chars = split('', $text);
    my $num = 0;
    for (@chars) {
        my $order = index($opt_table, $_);
            die "Invalid digit: $_" if ($order < 0 and !$opt_force);
        $num = $num * $sys + $order;
    }
    return $num;
}

sub systemEncode {
    my ($num, $sys) = @_;
    my $text = '';
    my $zero = substr($opt_table, 0, 1);
    my $len = 0;

    while ($num > 0) {
        $text = substr($opt_table, $num % $sys, 1) . $text;
        $num = int($num / $sys);
        $len++;
    }
    $text = $zero x ($opt_width-$len) . $text if ($len < $opt_width);
    return $text;
}

sub radixTable {
    local $_ = $_;
    $_ = shift if @_;

    my $num_b = systemDecode($_, 2);
    my $num_o = systemDecode($_, 8);
    my $num_d = systemDecode($_, 10);
    my $num_h = systemDecode($_, 16);

    my $bb = systemEncode($num_b, 2);
    my $bo = systemEncode($num_b, 8);
    my $bd = systemEncode($num_b, 10);
    my $bh = systemEncode($num_b, 16);

    my $ob = systemEncode($num_o, 2);
    my $oo = systemEncode($num_o, 8);
    my $od = systemEncode($num_o, 10);
    my $oh = systemEncode($num_o, 16);

    my $db = systemEncode($num_d, 2);
    my $do = systemEncode($num_d, 8);
    my $dd = systemEncode($num_d, 10);
    my $dh = systemEncode($num_d, 16);

    my $hb = systemEncode($num_h, 2);
    my $ho = systemEncode($num_h, 8);
    my $hd = systemEncode($num_h, 10);
    my $hh = systemEncode($num_h, 16);

    if ($opt_print eq '<report>') {
        format =
Number @<
       $_
    From  \  To |    Binary    |    Octal     |   Decimal    | Hexadecimal
    ------------+--------------+--------------+--------------+--------------
    Binary      |@>>>>>>>>>>>> |@>>>>>>>>>>>> |@>>>>>>>>>>>> |@>>>>>>>>>>>>
                 $bb,           $bo,           $bd,           $bh,
    Octal       |@>>>>>>>>>>>> |@>>>>>>>>>>>> |@>>>>>>>>>>>> |@>>>>>>>>>>>>
                 $ob,           $oo,           $od,           $oh,
    Decimal     |@>>>>>>>>>>>> |@>>>>>>>>>>>> |@>>>>>>>>>>>> |@>>>>>>>>>>>>
                 $db,           $do,           $dd,           $dh,
    Hexadecimal |@>>>>>>>>>>>> |@>>>>>>>>>>>> |@>>>>>>>>>>>> |@>>>>>>>>>>>>
                 $hb,           $ho,           $hd,           $hh,

.
        write;
    } else {
        print eval("\"$opt_print\"");
    }
}

=head1 HACKING

(No Information)

=cut
# (MODULE FUNCTIONS)

=head1 HISTORY

=over

=item 0.x

The initial version.

=back

=cut
sub _version {
    print "[$LOGNAME] convert numbers between different systems \n";
    print "Written by Lenik,  Version 0.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"Perl_simple_cli_program_template">

=head1 AUTHOR

Xima Lenik <name@mail.box>

=cut
