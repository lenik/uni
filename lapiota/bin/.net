#!/usr/bin/perl

=head1 NAME

UnKnOwN - Perl_simple_net_cli_program_template

=cut
use strict;
use cmt::log;
use cmt::serv;
use cmt::util;
use cmt::vcs('parse_id');
    my %RCSID = parse_id('$Id$');
use Data::Dumper;
use Getopt::Long;
use Socket;
use Term::ReadKey;

sub _main; sub _version; sub _help;

sub binded;
sub unbinded;
sub gotdata;
sub askdata;
sub goterr;

our $opt_daemon         = 0;
our $opt_serv_addr      = 'localhost';
our $opt_serv_port      = $cmt::serv::DEFAULT_PORT;
our $opt_serv_type      = SOCK_STREAM;
our $opt_serv_proto     = 'tcp';
our $opt_serv_cap       = $cmt::serv::DEFAULT_CAP;
our $opt_serv_intv      = $cmt::serv::DEFAULT_INTERVAL;

BEGIN {
    ($opt_verbtitle) = 'UnKnOwN'; # $0 =~ /([^\/\\.]+)(?:\.\w+)*$/;
    sub _log2 { $opt_verbose >= 2 && &_log }
    sub _log3 { return if $opt_verbose < 3; &_log }
    sub _sig2 { return if $opt_verbose < 2; &_sig }
    sub _sig3 { return if $opt_verbose < 3; &_sig }
}

sub _boot {
    GetOptions('quiet|q'    => sub { $opt_verbose-- },
               'verbose|v'  => sub { $opt_verbose++ },
               'version'    => sub { _version; exit },
               'help|h'     => sub { _help; exit },
               'daemon|d',
               'serv-addr|s',
               'serv-port|p',
               'serv-type',
               'serv-proto',
               'serv-cap',
               'serv-intv',
               );

    _log2 "serv-addr:   $opt_serv_addr";
    _log2 "serv-port:   $opt_serv_port";
    _log2 "serv-type:   $opt_serv_type";
    _log2 "serv-proto:  $opt_serv_proto";
    _log2 "serv-cap:    $opt_serv_cap";
    _log2 "serv-intv:   $opt_serv_intv";

    _main;
}

=head1 SYNOPSIS

B<UnKnOwN>
    S<[ B<-d> | B<--daemon> ]>
    S<[ B<-s> | B<--serv-addr> = I<ADDR> ]>
    S<[ B<-p> | B<--serv-port> = I<PORT> ]>
    S<[ B<--serv-type> = I<TYPE> ]>
    S<[ B<--serv-proto> = I<PROTO> ]>
    S<[ B<--serv-cap> = I<NUM> ]>
    S<[ B<--serv-intv> = I<NUM> ]>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<ADDR> ]>
    S<[ I<PORT> ]>
    S<[ I<...the rest of arguments...> ]>

=head1 DESCRIPTION

B<UnKnOwN> is a WHAT used for WHAT. It HOW-WORKS.

BACKGROUND-PROBLEM.

HOW-UnKnOwN-RESOLVES.

=head1 OPTIONS

=over 8

=item S<[ B<-m> | B<--my-option> ]>

...

=item S<[ B<-d> | B<--daemon> ]>

running in daemon-mode, no kbd input

=item S<[ B<-s> | B<--serv-addr> = I<ADDR> ]>

bind with net-if of this address/host

=item S<[ B<-p> | B<--serv-port> = I<PORT> ]>

listen at this PORT

=item S<[ B<--serv-type> = I<TYPE> ]>

default SOCK_STREAM, not used

=item S<[ B<--serv-proto> = I<PROTO> ]>

set the transfer protocol, default tcp

=item S<[ B<--serv-cap> = I<NUM> ]>

the max clients allowed

=item S<[ B<--serv-intv> = I<NUM> ]>

interval(idle timeout) in seconds.

=item S<[ B<-q> | B<--quiet> ]>

Repeat this option to suppress unimportant information to display.

=item S<[ B<-v> | B<--verbose> ]>

Repeat this option to display more detailed information.

=item S<[ B<-h> | B<--help> ]>

Display a breif help page and exit(0).

=item S<[ B<--version> ]>

Display a short version information and exit(0).

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    &_version;
    print "\nSyntax: \n    $0 [OPTION] [--] [ADDR [PORT]]\n", <<'EOM';

Common options:
    -d, --daemon            running in daemon-mode, no kbd input
    -s, --serv-addr=ADDR    bind with net-if of this address/host
    -p, --serv-port=PORT    listen at this PORT
        --serv-type=TYPE    default SOCK_STREAM, not used
        --serv-proto=PROTO  set the transfer protocol, default tcp
        --serv-cap=NUM      the max clients allowed
        --serv-intv=NUM     interval(idle timeout) in seconds
    -h, --help              show this help page
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
        --version           print the version info
EOM
}

exit (_boot or 0);

sub _main {
    my $serv = new cmt::serv(
        sub {
            new cmt::stream(
                -binded     => \&binded,
                -unbinded   => \&unbinded,
                -gotdata    => \&gotdata,
                -askdata    => \&askdata,
                -goterr     => \&goterr,
            )
        },
        -name   => $opt_verbtitle,
        -addr   => $opt_serv_addr,
        -port   => $opt_serv_port,
        -proto  => $opt_serv_proto,
        -cap    => $opt_serv_cap,
      # -intv   => $opt_serv_intv,
    );
    $serv->verbose($opt_verbose - 1);

    my $stat;
    if ($opt_daemon) {
        $stat = $serv->serv();
    } else {
        my $mios = $serv->create_ios()->merge;
        _log "start $opt_verbtitle service at $opt_serv_addr:$opt_serv_port";
        my $mctx = $mios->create_context;
        while ($mctx->iterate) {
            my $k = ReadKey -1;
            if ($k) {
                _log2 'pressed: $k('.ord($k).')';
                last if $k eq 'q';
            }
        }
        $stat = $mctx->{STAT};
    }
    _log Dumper($stat);
}

=head1 DIAGNOSTICS

(No Information)

=cut
# (HELPER FUNCTIONS)

=head1 HACKING

(No Information)

=cut
sub binded {
    my ($s, $fd) = @_;
    _log2 "binded $s to $fd";
}

sub unbinded {
    my ($s, $fd) = @_;
    _log2 "unbinded $s from $fd";
}

sub gotdata {
    my ($s, $data) = @_;
    _log2 "gotdata from $s: $data";
}

sub askdata {
    my ($s) = @_;
    _log2 "askdata from $s";
    undef
}

sub goterr {
    my ($s) = @_;
    _log2 "goterr from $s";
}

=head1 HISTORY

=over

=item 0.x

The initial version.

=back

=cut
sub _version {
    print "[$opt_verbtitle] Perl_simple_net_cli_program_template \n";
    print "Written by Lenik,  Version 0.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"Perl_simple_cli_program_template">

=head1 AUTHOR

Xima Lenik <lenik@bodz.net>

=cut
