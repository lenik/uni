#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PACKAGE:=@PACKAGE@}
    : ${PROGRAM_TITLE:=AP #711 login util}
    : ${PROGRAM_SYNTAX:=[OPTIONS] [--] ...}

    . shlib-import cliboot
    option -o --logout      'Logout instead of login'
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    opt_logout=0
    
    url_host=
    url_port=
    
    params=
    headers=()
    
function setopt() {
    case "$1" in
        -o|--logout)
            opt_logout=1;;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function cleanup() {
    case "$tmp" in
    /tmp/*)
        if [ -f "$tmp" ]; then
            _log2 "Remove temp file $tmp."
            rm -f -- "$tmp"
        fi
    esac
}

function main() {
    tmp=`mktemp`
    trap cleanup 0
    curl -s http://10.2.160.1 | sed -e 's/&/&amp;/g' >$tmp
    
    while IFS== read k v; do
        case "$k" in
            /WISPAccessGatewayParam/Proxy/MessageType)
                msgtype="$v";;
            /WISPAccessGatewayParam/Proxy/NextURL)
                nexturl="$v";;
            /WISPAccessGatewayParam/Proxy/ResponseCode)
                respcode="$v";;
        esac
    done < <(xml2 <$tmp 2>/dev/null)

    header 'Connection: keep-alive'
    header 'sec-ch-ua: "Google Chrome";v="105", "Not)A;Brand";v="8", "Chromium";v="105"'
    header 'sec-ch-ua-mobile: ?0'
    header 'sec-ch-ua-platform: "Windows"'
    header 'Upgrade-Insecure-Requests: 1'
    header 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'
    header 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'
    header 'Sec-Fetch-Site: none'
    header 'Sec-Fetch-Mode: navigate'
    header 'Sec-Fetch-User: ?1'
    header 'Sec-Fetch-Dest: document'
    header 'Accept-Encoding: gzip, deflate, br'
    header 'Accept-Language: en-US,en;q=0.9,zh;q=0.8,zh-CN;q=0.7'

    if [ "$opt_logout" == 1 ]; then
        logout
    else
        if [ -z "$respcode" ]; then
            _log1 "Already logged in."
            return 0
        fi
        
        _log1 "msgtype $msgtype, respcode $respcode, next $nexturl"
        if [ "$respcode" != 200 ]; then
            _error "error get nexturl."
            exit 1
        fi
        login
    fi
}

function login() {
    htmltmp=`mktemp --suffix=.html`
    echo "<base href=\"$nexturl\">" >$htmltmp
    GET -s -L "$nexturl" >>$htmltmp
    
    input_name=
    declare -A form
    while IFS== read k v; do
        case "$k" in
            /html/body/div/form/div/input/@name)
                input_name="$v";;
            /html/body/div/form/div/input/@value)
                form[$input_name]="$v";;
        esac
    done < <(html2 <$htmltmp 2>/dev/null)
    
    # for k in "${!form[@]}"; do echo "$k => ${form[$k]}"; done
    read -p 'Enter you phone number: ' phoneNo
    param phoneNo="$phoneNo"
    param jikeId=${form[jikeId]}
    param usermac=${form[usermac]}
    param wlanuserip=${form[wlanuserip]}
    
    POST https://112.15.229.33:5090/applyDynaPasswd.do | iconv -f gb2312 -t utf8
    xdg-open "$htmltmp"
}

function logout() {
    param sj=00:00:11
    local url="https://$url_host:$url_port/GWlanRes/default/OnlineURL/pc/include/logout_result.jsp$params"
    GET -v "$url"
}

function param() {
    local arg
    for arg in "$@"; do
        if [ -z "$params" ]; then
            params="?$arg"
        else
            params="$params&$arg"
        fi
    done
}

function header() {
    headers+=("$*")
}

function readHostPort() {
    local url="$1"
    local hp="${url#*://}"
        hp="${hp%/*}"
    url_host="${hp%:*}"
    url_port="${hp##*:}"
}

function GET() {
    local opts=()
    local h i
    
    for h in "${headers[@]}"; do
        opts+=(-H "$h")
    done

    local args=()
    while [ $# -ge 2 ]; do
        args+=("$1")
        shift
    done
    
    local url="$1"
    readHostPort "$url"

    curl "${opts[@]}" \
        -H "Host: $url_host:$url_port" \
        --compressed \
        "${args[@]}" \
        "$url"
    
    params=
}

function POST() {
    local opts=()
    local h i
    
    for h in "${headers[@]}"; do
        opts+=(-H "$h")
    done

    local args=()
    while [ $# -ge 2 ]; do
        args+=("$1")
        shift
    done
    
    local url="$1"
    local hp="${url#*://}"
        hp="${hp%/*}"
    local host="${hp%:*}"
    local port="${hp##*:}"

    curl -v "${opts[@]}" \
        -H "Host: $host:$port" \
        --compressed \
        -d "${params#?}" \
        "${args[@]}" \
        "$url"
    
    params=
}

boot "$@"

