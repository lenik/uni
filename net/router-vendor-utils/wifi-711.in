#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PACKAGE:=@PACKAGE@}
    : ${PROGRAM_TITLE:=AP #711 login util}
    : ${PROGRAM_SYNTAX:=[OPTIONS] [--] ...}

    . shlib-import cliboot
    option -p --phone =NUM          'Specify the mobile phone no'
    option -s --sms-code =CODE      'Specify the SMS verification code'
    option -f --force               'Force re-login'
    option -o --logout              'Logout instead of login'
    option -d --debug               'Debug mode. keep temp files.'
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    CURL=$(which curl)

    __FILE__=${0##*/}
    SMSCACHE=/tmp/$__FILE__-smscode

    opt_phone=
    opt_smscode=
    opt_force=0
    opt_logout=0
    opt_debug=0
    
    url_host=
    url_port=
    
    params=
    headers=()

function setopt() {
    case "$1" in
        -p|--phone)
            opt_phone="$2";;
        -s|--sms-code)
            opt_smscode="$2";;
        -f|--force)
            opt_force=1;;
        -o|--logout)
            opt_logout=1;;
        -d|--debug)
            opt_debug=1;;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function cleanup() {
    case "$workdir" in
    /tmp/*)
        if [ "$opt_debug" != 1 ]; then
            if [ -e "$workdir" ]; then
                _log2 "Remove temp workdir $workdir."
                rm -fr -- "$workdir"
            fi
        fi
    esac
}

function main() {
    workdir=`mktemp -d`
    trap cleanup 0

    curl -s http://10.2.160.1 | sed -e 's/&/&amp;/g' >$workdir/start.html
    
    while IFS== read k v; do
        case "$k" in
            /WISPAccessGatewayParam/Proxy/MessageType)
                msgtype="$v";;
            /WISPAccessGatewayParam/Proxy/NextURL)
                nexturl="$v";;
            /WISPAccessGatewayParam/Proxy/ResponseCode)
                respcode="$v";;
        esac
    done < <(xml2 <$workdir/start.html 2>/dev/null)

    header 'Connection: keep-alive'
    header 'sec-ch-ua: "Google Chrome";v="105", "Not)A;Brand";v="8", "Chromium";v="105"'
    header 'sec-ch-ua-mobile: ?0'
    header 'sec-ch-ua-platform: "Windows"'
    header 'Upgrade-Insecure-Requests: 1'
    header 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'
    header 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'
    header 'Sec-Fetch-Site: none'
    header 'Sec-Fetch-Mode: navigate'
    header 'Sec-Fetch-User: ?1'
    header 'Sec-Fetch-Dest: document'
    header 'Accept-Encoding: gzip, deflate, br'
    header 'Accept-Language: en-US,en;q=0.9,zh;q=0.8,zh-CN;q=0.7'

    if [ "$opt_logout" == 1 ]; then
        logout
    else
        if [ -z "$respcode" ]; then
            if [ "$opt_force" != 1 ]; then
                _log1 "Already logged in."
                return 0
            fi
        fi
        
        _log1 "msgtype $msgtype, respcode $respcode, next $nexturl"
        if [ "$respcode" != 200 ]; then
            _error "error get nexturl."
            exit 1
        fi
        login
    fi
}

function login() {
    echo "<base href=\"$nexturl\">" >$workdir/next.html
    GET -s -L "$nexturl" >>$workdir/next.html
    
    input_name=
    declare -A form
    while IFS== read k v; do
        case "$k" in
            /html/body/div/form/div/input/@name)
                input_name="$v";;
            /html/body/div/form/div/input/@value)
                form[$input_name]="$v";;
        esac
    done < <(sed -e '1,6d' $workdir/next.html | html2 2>/dev/null)
    
    # for k in "${!form[@]}"; do echo "$k => ${form[$k]}"; done
    if [ -z "$opt_smscode" ]; then
        while true; do
            if [ -z "$opt_phone" ]; then
                read -p 'Enter you phone number: ' opt_phone
            fi
            param phoneNo="$opt_phone"
            param jikeId=${form[jikeId]}
            param usermac=${form[usermac]}
            param wlanuserip=${form[wlanuserip]}
            
            _log1 "request for SMS verification code"
            POST "https://112.15.229.33:5090/applyDynaPasswd.do" \
                | iconv -f gbk -t utf8 \
                | tee "$workdir/sms.resp"
            echo

            read sms_resp < $workdir/sms.resp
            case "$sms_resp" in
                '动态密码已经下发到手机中'*)
                    phone_ok=1;;
                *)
                    opt_phone=
                    continue
                    ;;
            esac
            break
        done

        if [ -f "$SMSCACHE" ]; then
            read code _ < $SMSCACHE
            echo "Found previously entered code: [$code]."
            confirm=
            while [ -z "$confirm" ]; do
                read -p "    Is it ok to reuse $code as SMS verfication code?" confirm
            done
            if [ "$confirm" = y ]; then
                opt_smscode="$code"
            fi
        fi

        if [ -z "$opt_smscode" ]; then
            while true; do
                read -p "Enter SMS verification code: " opt_smscode _
                if check_smscode "$opt_smscode"; then
                    break
                else
                    _error "Invalid SMS code detected, please retry..."
                fi
            done

            echo "$opt_smscode" > $SMSCACHE
        fi
    fi

    # Read all form entries
        for k in "${!form[@]}"; do
            v="${form[$k]}"
            param "$k=$v"
        done
        smsenc=$(encrypt "$opt_smscode")
        param password="$smsenc"

    POST "https://112.15.229.33:5090/login.do" | tee "$workdir/login.html"

    xdg-open "$workdir/login.html"
}

function logout() {
    param sj=00:00:11
    local url="https://$url_host:$url_port/GWlanRes/default/OnlineURL/pc/include/logout_result.jsp$params"
    GET -v "$url"
}

function check_smscode() {
    local code="$1"
    local len=${#code}
    [ $len == 6 ] || return 1
    [ -z "${code//[0-9]/}" ] || return 2
    return 0
}

function param() {
    local arg
    for arg in "$@"; do
        _log2 "Parameter: $arg"
        if [ -z "$params" ]; then
            params="?$arg"
        else
            params="$params&$arg"
        fi
    done
}

function header() {
    headers+=("$*")
}

function readHostPort() {
    local url="$1"
    local hp="${url#*://}"
        hp="${hp%/*}"
    url_host="${hp%:*}"
    url_port="${hp##*:}"
}

function GET() {
    local opts=()
    local h i
    
    for h in "${headers[@]}"; do
        opts+=(-H "$h")
    done

    local args=()
    while [ $# -ge 2 ]; do
        args+=("$1")
        shift
    done
    
    local url="$1"
    readHostPort "$url"

    curl "${opts[@]}" \
        -H "Host: $url_host:$url_port" \
        --compressed \
        "${args[@]}" \
        "$url"
    
    params=
}

function POST() {
    local opts=()
    local h i
    
    for h in "${headers[@]}"; do
        opts+=(-H "$h")
    done

    local args=()
    while [ $# -ge 2 ]; do
        args+=("$1")
        shift
    done
    
    local url="$1"
    local hp="${url#*://}"
        hp="${hp%/*}"
    local host="${hp%:*}"
    local port="${hp##*:}"

    curl -v "${opts[@]}" \
        -H "Host: $host:$port" \
        --compressed \
        -d "${params#?}" \
        "${args[@]}" \
        "$url"
    
    params=
}

function curl() {
    _log1 "Execute: $CURL $*"
    "$CURL" "$@"
}

function encrypt() {
    openssl enc -aes-256-cbc -nosalt -e -in <(echo -n "$1") \
        -K  3132333435363738393041424344454631323334353637383930414243444566 \
        -iv 30313233343536373839414243444546 | xxd -p
}

boot "$@"

