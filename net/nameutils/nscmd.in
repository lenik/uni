#!/bin/bash
    . shlib-import cliboot

    RCSID='$Id: - @VERSION@ @DATE@ @TIME@ - $'
    short_opts="k:R:s:p:z:c:t:D:hqv"
    long_opts="keyfile:,random:,server:,port:,zone:,class:,ttl:,ddns:,help,quiet,verbose,version"

    NSUPDATE=nsupdate

    keyfile=
    random=/dev/urandom
    server=localhost
    port=53
    zone=
    class=
    ttl=
    ddns=
    ddns_ttl=600
    extras=()
    nextra=0

function version() {
    parse_id "$RCSID"
    echo "[$BASENAME] Single command nsupdate utility"
    echo "Written by Lenik, Version $rcs_rev, Last updated at $rcs_date"
}

function help() {
    version
    echo
    echo "Syntax: "
    echo "    $0 [OPTION] [--] { update-command | '-' raw-command } ..."
    echo
    echo "Options: "
    echo "    -k, --keyfile=FILE      The shared secret to generate TSIG record"
    echo "    -R, --random=DEV        A source of randomness."
    echo "    -s, --server=HOSTNAME   Send all requests to this server, default localhost"
    echo "          (You can set to __master__ to use the master NS of the specific zone"
    echo "    -p, --port=PORT         The UDP port to use, default 53 (DNS)"
    echo "    -z, --zone=ZONE         All updates are to be made to this zone (optional)"
    echo "    -c, --class=CLASS       Specify the defautl class, default IN"
    echo "    -t, --ttl=TTL           Specify the default time to live. Default $ddns_ttl for ddns"
    echo "          (You can set to 'none' to clear the default ttl)"
    echo "    -D, --ddns=HOST=IP      This is a shortcut for update delete & add ..."
    echo "    -q, --quiet             Repeat to get less info"
    echo "    -v, --verbose           Repeat to get more info"
    echo "    -h, --help              Show this help page"
    echo "        --version           Print the version info"
}

function setopt() {
    case "$1" in
        -k|--keyfile)
            [ -r "$2" ] || quit "Can't read from $2"
            keyfile="$2";;
        -R|--random)
            random="$2";;
        -s|--server)
            if [ "$2" = __master__ ]; then
                server=
            else
                server="$2"
            fi;;
        -p|--port)
            port="$2";;
        -z|--zone)
            zone="$2";;
        -c|--class)
            class="$2";;
        -t|--ttl)
            ttl="$2";;
        -D|--ddns)
            ddns="$2"
            ddns_host="${ddns%%=*}"
            ddns_ip="${ddns#*=}"
            if [ "$ddns_host" = "$ddns" ]; then
                quit "Bad ddns spec: it must be HOST=IP"
            fi
            extras[nextra++]="update delete $ddns_host"
            extras[nextra++]="update add    $ddns_host A $ddns_ip"
            ;;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function file_header() {
    local file="$1"
    echo ";; nscmd nsupdate-script"                         >"$file"
    echo ";; This file is automatically generated by nscmd ($0)" >>"$file"
    echo ";; It should be removed after nscmd is completed.">>"$file"
    echo ";; Please don't modify this file."                >>"$file"
    echo >>"$file"

    [ -n "$server" ] && echo "server $server" >>"$file"
    [ -n "$zone" ]   && echo "zone   $zone"   >>"$file"
    [ -n "$class" ]  && echo "class  $class"  >>"$file"

    [ -z "$ttl" -a -n "$ddns" ] && ttl=$ddns_ttl
    [ -n "$ttl" ]    && echo "ttl    $ttl"  >>"$file"
}

function main() {

    [ -n "$keyfile" ] || quit "Keyfile isn't specified."

    tmp=`tempfile`
    _log2 "Create nsupdate script: $tmp"

    [ $LOGLEVEL -ge 4 ] && echo "debug" >>$tmp

    file_header $tmp
    for extra in "${extras[@]}"; do
        echo "$extra" >>$tmp
    done
    for cmd in "$@"; do
        if [ "${cmd:0:1}" = '-' ]; then
            cmd="${cmd:1}"
        else
            cmd="update $cmd"
        fi
        echo "$cmd" >>$tmp
    done

    [ $LOGLEVEL -ge 2 ] && echo "show" >>$tmp
    echo "send" >>$tmp
    [ $LOGLEVEL -ge 1 ] && echo "answer" >>$tmp

    args=()
    narg=0

    [ $LOGLEVEL -ge 3 ] && args[narg++]=-v
    [ $LOGLEVEL -ge 5 ] && args[narg++]=-D

    if [ -n "$port" ]; then
        args[narg++]=-p; args[narg++]="$port"
    fi

    if [ -n "$keyfile" ]; then
        args[narg++]=-k; args[narg++]="$keyfile"
    fi

    if [ -n "$random" ]; then
        args[narg++]=-R; args[narg++]="$random"
    fi

    _log1 Execute $NSUPDATE "${args[@]}" $tmp

    if ! $NSUPDATE "${args[@]}" $tmp; then
        echo "Failed to execute nsupdate, exit code = $?" >&2
        echo "See also $tmp for the generated nsupdate script" >&2
        [ $LOGLEVEL -ge 2 ] && cat $tmp
    else
        rm -f "$tmp"
    fi
}

boot "$@"
