#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PROGRAM_TITLE:="Single command nsupdate utility"}
    : ${PROGRAM_SYNTAX:="[OPTIONS] [--] { update-command | '-' raw-command } ..."}
    : ${NSUPDATE:=nsupdate}

    . shlib-import cliboot
    option -k --keyfile =FILE "The shared secret to generate TSIG record"
    option -R --random =DEV "A source of randomness."
    option -s --server =HOSTNAME "Send all requests to this server, default localhost (Set to '__master__'  to use the master NS)"
    option -p --port =PORT  "The UDP port to use, default 53 (DNS)"
    option -z --zone =ZONE  "All updates are to be made to this zone (optional)"
    option -c --class =CLASS "Specify the defautl class, default IN"
    option -t --ttl =TTL    "Specify the default time to live (Default: ddns=600, cname=3600. set to 'none' to clear the default ttl)"
    option -C --cname =NAME=DEST "Same to delete-add A RRs"
    option -D --ddns =NAME=IP "Same to delete-add CNAME RRs"
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    keyfile=
    random=/dev/urandom
    server=localhost
    port=53
    zone=
    class=
    ttl=
    ttl_default=
    ddns=
    extras=()
    nextra=0

function setopt() {
    case "$1" in
        -k|--keyfile)
            [ -r "$2" ] || quit "Can't read from $2"
            keyfile="$2";;
        -R|--random)
            random="$2";;
        -s|--server)
            if [ "$2" = __master__ ]; then
                server=
            else
                server="$2"
            fi;;
        -p|--port)
            port="$2";;
        -z|--zone)
            zone="$2";;
        -c|--class)
            class="$2";;
        -t|--ttl)
            ttl="$2";;
        -C|--cname)
            cname="$2"
            cname_name="${cname%%=*}"
            cname_dest="${cname#*=}"
            if [ "$cname_name" = "$cname" ]; then
                quit "Bad cname spec: it must be HOST=DEST"
            fi
            extras[nextra++]="update delete $cname_name"
            extras[nextra++]="update add    $cname_name CNAME $cname_dest"
            ttl_default=3600
            ;;
        -D|--ddns)
            ddns="$2"
            ddns_name="${ddns%%=*}"
            ddns_ip="${ddns#*=}"
            if [ "$ddns_name" = "$ddns" ]; then
                quit "Bad ddns spec: it must be HOST=IP"
            fi
            extras[nextra++]="update delete $ddns_name"
            extras[nextra++]="update add    $ddns_name A $ddns_ip"
            ttl_default=600
            ;;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function file_header() {
    local file="$1"
    echo ";; nscmd nsupdate-script"                         >"$file"
    echo ";; This file is automatically generated by nscmd ($0)" >>"$file"
    echo ";; It should be removed after nscmd is completed.">>"$file"
    echo ";; Please don't modify this file."                >>"$file"
    echo >>"$file"

    [ -n "$server" ] && echo "server $server" >>"$file"
    [ -n "$zone" ]   && echo "zone   $zone"   >>"$file"
    [ -n "$class" ]  && echo "class  $class"  >>"$file"
    [ -n "$ttl" ]    && echo "ttl    $ttl"  >>"$file"
}

function main() {
    [ -n "$keyfile" ] || quit "Keyfile isn't specified."
    ttl=${ttl:-$ttl_default}

    tmp=`tempfile`
    _log2 "Create nsupdate script: $tmp"

    [ $LOGLEVEL -ge 4 ] && echo "debug" >>$tmp

    file_header $tmp
    for extra in "${extras[@]}"; do
        echo "$extra" >>$tmp
    done
    for cmd in "$@"; do
        if [ "${cmd:0:1}" = '-' ]; then
            cmd="${cmd:1}"
        else
            cmd="update $cmd"
        fi
        echo "$cmd" >>$tmp
    done

    [ $LOGLEVEL -ge 2 ] && echo "show" >>$tmp
    echo "send" >>$tmp
    [ $LOGLEVEL -ge 1 ] && echo "answer" >>$tmp

    args=()
    narg=0

    [ $LOGLEVEL -ge 3 ] && args[narg++]=-v
    [ $LOGLEVEL -ge 5 ] && args[narg++]=-D

    if [ -n "$port" ]; then
        args[narg++]=-p; args[narg++]="$port"
    fi

    if [ -n "$keyfile" ]; then
        args[narg++]=-k; args[narg++]="$keyfile"
    fi

    if [ -n "$random" ]; then
        args[narg++]=-R; args[narg++]="$random"
    fi

    _log1 Execute $NSUPDATE "${args[@]}" $tmp

    if ! $NSUPDATE "${args[@]}" $tmp; then
        echo "Failed to execute nsupdate, exit code = $?" >&2
        echo "See also $tmp for the generated nsupdate script" >&2
        [ $LOGLEVEL -ge 2 ] && cat $tmp
    else
        rm -f "$tmp"
    fi
}

boot "$@"
