BODZ | S-FIA & TC
Dir-T|Note                                                  http://tc.bodz.net
Snima Denik Personal                                            denik@bodz.net

NOTES FOR SPEED                                 STATUS Draft   SERIAL NFS00197

   TITLE  ____________________________________________________________________
KEYWORDS  ____________________________________________________________________


> Todo

    A  几种不同的递增开发方法
    B  PA:: Market -> [Wox -> Xlf -> Cpf]  (PA:进度保证)


> 没事找事 (整理)

世界上有那么多的城市，
宇宙中有那么多的星球。

我在追寻什么。
不只是过往的情怀。

春暖花开，
我看不见绿的景象。
秋火连绵，

寒冬岁末，
年复一年。

人活着就是要没事找事。
人生就是自作自受。

害怕，
路的尽头。
怀疑，
烛泪渐枯。

程序不知我的倦怠。
数字不懂我的柔情。


A.  几种不同的递增开发方法

    LaS (HAD)
        通过分层实现 AOP，可用于净室作业和高度可复用的结构。
        广范围适用性。
        工具：UV/CM, Soli

    XMM
        通过实现一定程度的 MDA，增强对变化的适应性。
        工具：BAS XMM SIX

    CPF
        1，命名问题
            应该不需要使用宏。
            应该不强制使用前缀。
            因为 CPF 是 “公共接口”，应该提供命名冲突的解决办法。

            - 只包含所需要的模块
                CPF 内部模块间的引用，应该体现在.c中，
                总之尽量减少模块.h的符号定义数目。
            - .lib/.dll 有独立的名字空间，因此可以所有模块连接在一个文件中。

        2，扩充问题（周边支持）
            - 使用 C/C++ ?
                既然使用 C，那可以模拟 C++ 的虚表。
                如果使用虚表等特性，那么也可以从 C++ 通过工具生成 C 代码。

                C++ 转换至 C 有两个问题：异常模型、使用的库 很难转换至 C。

            - 增加 AOP 支持。这一点和 C/C++ 无关，而与设计有关。
                ”与原有系统的冲突“哲学

                像可定制的 allocator、在数据结构附加调试信息，这些将和
                原有系统冲突，则必须通过编译选项控制。

        3，快速开发
            在使用 Perl 经验中，程序总是能够快速的完成。
            需要将这种快速的能力应用在大规模 C/C++ 程序的开发上。

            3.1 基础库
                矛盾主要在于基础库，以及高级应用
                    - 要不要基于基础库？
                        可以对事件异常，输入输出等统一配置。
                    - 基于何种基础库？
                        CPF, GLib, STL/Boost, LibC, ... ??

            3.2 动态扩充的基础库
                之所以要偏向于使用 CPF、POS 等自己的基础库，主要有以下好处

                - 变化灵活
                - 可以递增式扩充

                困难就在于基础库本身也是库，基于某种更基础的库。
