BODZ | S-FIA & TC
Dir-T|Note                                                  http://tc.bodz.net
Snima Denik Personal                                            denik@bodz.net

NOTES FOR SPEED                                 STATUS Draft   SERIAL NFS00103

   TITLE  ____________________________________________________________________
KEYWORDS  ____________________________________________________________________


> blog update

很久没有更新了，实在是好听的音乐太多，本想就某个乐队推荐一二首精品，总觉得挂一漏万。

Maired Sullivan - Connemara Cradle Song


〉tasks

    X  unicode-lib for C
    V  unicode user range, allocation
    xjl/www - common web/cvs/local sync method
    xjl/www - unified xml scheme for news/releases/development


> Esperanto

很久没有看世界语的新闻了，看看世界语版的中国报道，国内世界语的网站实在不多
http://www.chinareport.com.cn/
看到不久前，180名（国际蒙古 大学？）的学生开始学习世界语，（准备迎接？）第4届东北三省世界语大会 （蒙古和东北三省有什么关系？），8月11-14日在包头市举行。
好无聊的新闻！看来中华世协需要更多的引入年轻人才行。

绿网的世界语者名单，凑巧把我排在了最后。还有一位莫海洋的玉环老乡，如果我记得没错，他10年前应该在我家学过电脑，可惜他的联系方法不对，写的 e-mail 也被退回来了。如果莫先生有幸看到这篇 blog 务必要 skribu leteron al min。

相关资源：

英世/世英在线辞典 （这个解释非常详细，而且速度很快）
http://wwwtios.cs.utwente.nl/traduk/EN-EO/Traduku/

国际语/英语（另一种不同于世界语的人工语）
http://www.interlingua.com/dict-instructiones.htm

以及一个超全的在线辞典列表，连藏/英都包括了
http://www.helsinki.fi/~hkantola/dict.html


> simxml 的字符集问题

为了与 unicode 兼容，特殊控制字符需使用 unicode 的用户保留区，而保留区可能也被其它系统所使用，因此只能寻找 unicode 规范里定义永远不会使用的区域。根据 unicode 4.0 规范 15.8 节定义了以下区域作为“非字符区”，并明确规定此区域禁止用于公共数据交换：

    U+?FFFE
    U+?FFFF     ? = 0..10
    U+FDD0 .. U+FDEF

总计66个字符。simxml 根据一般约定，定义

    U+FFFF = 文件结束符
    U+FFFE = 数据未准备

参考
http://www.unicode.org/versions/Unicode4.0.1/
http://www.opengroup.or.jp/jvc/cde/ucs-conv-e.html

为了尽早实现，我决定放弃对 unicode 代理对和 ucs-4 的支持。说到底这是一个国际化的问题，而这个问题实在太复杂，不是完全支持 unicode 就能完全解决的。尽管如此，仅仅是 unicode 就已经足够复杂了。这包括几个部分：字符的显示、传输，代理对和其它更大的代码空间、与不同代码页间的转换，与旧系统的接口等等。

除掉代理对和 ucs-4 还是有几个问题比较麻烦：

    考虑到性能，希望同时提供 ascii 和 unicode/ucs-2 两个版本，TCHAR 不具备必要的移植性，
    而 glib 对 ucs-2 支持又很少（只有 wcscmp 和 wcslen 两个函数可用），需要另寻支持。

    对于那些有意使用 unicode 的小应用，提供 utf-8 编码支持，以便于使用传统的函数操纵内容。这要求 input-source 输出的字符直接被序列化到 utf-8。

本来打算忽略第二个问题，但看了很多建议特别是 unix 系统实现建议使用 utf-8 作为内部编码，这使我重新评估 wchar_t 的好处：唯一的好处就是速度稍微快一点，以及 windows 平台内部对 wchar_t 的直接支持，而作为主要面向 xml 的应用，utf-8 则是主要的编码形式。

参考：
http://www.haible.de/bruno/packages-libutf8.html
http://sybooks.sybase.com/onlinebooks/group-ucarc/ucg0200e/ulrefman/@Generic__BookTextView/178
http://www.opengroup.or.jp/jvc/cde/ucs-conv-e.html


顺便一提，大名鼎鼎的 Perl 在内部使用 utf-8 编码，坚持 TCHAR 的 windows 程序员恐怕要失望了。

> xml 1.1

XML 升级主要是 Unicode 标准改进引起的，1.1 版看起来比 1.0 词法上更宽松一些，主要一点是 1.0 版使用了严格定义：凡是未作规定的都是禁止的；而 1.1 版则相反：凡是未作规定的都是允许的，这样更适应于将来 Unicode 的持续改进。

 http://www.w3.org/TR/2004/REC-xml11-20040204/

 2.3 节修改了元素名称语法，允许 : _ 作为开头字符，- . 作为中间和结束字符。
    （本来只有 - 可以作为中间字符。）

 2.11 节规范化了换行，所有没有被字符#xA或字符#x85跟随的字符#xD

 4.3.4 引入了新的实体版本 (Entity Version)，允许 XML 1.1 的文档内部使用 XML 1.0 的实体。

