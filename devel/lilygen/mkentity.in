#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PACKAGE:=@PACKAGE@}
    : ${PROGRAM_TITLE:=}
    : ${PROGRAM_SYNTAX:=[OPTIONS] [--] FQCN...}

    . shlib-import cliboot strfn
    option -l --layout =LAYOUT      "Specify the source layout"
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    opt_layout=simple

function setopt() {
    case "$1" in
        -l|--layout)
            case "$2" in
                simple)
                    opt_layout=simple;;
                db)
                    opt_layout=db;;
                dbhtm)
                    opt_layout=dbhtm;;
                *)
                    quit "Bad layout name: $2";;
            esac;;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    for d in src/main/java src/main/resources; do
        [ -d $d ] || quit "Non-existed directory: $d."
    done

    for fqcn in "$@"; do
        pkg=${fqcn%.*}
        Base=${fqcn##*.}
        [ "$Base" != "$fqcn" ] || quit "Not an FQCN: $fqcn"
        dir_pojo=${pkg//.//}

        case "$opt_layout" in
            simple)
                pkg_db=$pkg.impl
                pkg_web=$pkg.impl
                dir_db=$dir_pojo/impl
                dir_web=$dir_pojo/impl
                ;;
            db)
                pkg_db=${pkg%.*}.db
                pkg_web=${pkg}
                dir_db=${dir_pojo%/*}/db
                dir_web=${dir_pojo}
                ;;
            dbhtm)
                pkg_db=${pkg%.*}.db
                pkg_web=${pkg%.*}.htm
                dir_db=${dir_pojo%/*}/db
                dir_web=${dir_pojo%/*}/htm
                ;;
        esac
        
        B=${Base:0:1}
        base="$(tolower $B)${Base:1}"
        _log1 "Generating files for $pkg::$Base $base (in */$dir_pojo)."

        mk_ent          "src/main/java/$dir_pojo/$Base.java"
        mk_ent_htm      "src/main/java/$dir_web/${Base}_htm.java"
        mk_htm_inf      "$pkg_web.${Base}_htm"
        mk_criteria     "src/main/java/$dir_db/${Base}Criteria.java"
        mk_mapper       "src/main/java/$dir_db/${Base}Mapper.java"
        mk_mapper_xml   "src/main/resources/$dir_db/${Base}Mapper.xml"
        mk_mapper_inf   "$pkg_db.${Base}Mapper"
        mk_index        "src/main/java/$dir_web/${Base}Index.java"
        mk_index_inf    "$pkg_web.${Base}Index"
        mk_index_htm    "src/main/java/$dir_web/${Base}Index_htm.java"
        mk_htm_inf      "$pkg_web.${Base}Index_htm"
    done
}

function findfile() {
    file="$1"
    if [ -f "$file" ]; then
        _log2 "Reusing file $file."
        return 0
    fi

    dirname="${file%/*}"
    if [ "$dirname" = "$file" ]; then
        dirname=.
    fi
    if [ ! -d "$dirname" ]; then
        _log2 "Creating directory $dirname..."
        mkdir -p "$dirname"
    fi
    _log1 "Creating $file..."
    return 1
}

function mk_ent() {
    file="$1"
    findfile "$file" && return
    cat <<EOT >"$file"
package $pkg;

import com.tinylily.model.base.CoEntity;

@IdType(Integer.class)
public class $Base
        extends CoEntity<Integer> {

    private static final long serialVersionUID = 1L;
    
    public $Base() {
    }

    public String toString() {
        StringBuilder sb = new StringBuilder(128);
        sb.append("$base: ...");
        return sb.toString();
    }

}
EOT
}

function mk_ent_htm() {
    file="$1"
    findfile "$file" && return

    local simplename="${file##*/}"
    simplename="${simplename%.java}"

    cat <<EOT >"$file"
package $pkg_web;

import java.io.IOException;

import $fqcn;

public class ${simplename}
        extends SlimForm_htm<$Base> {
    
    public ${simplename}() {
        super($Base.class);
    }

}
EOT
}

function mk_criteria() {
    file="$1"
    findfile "$file" && return
    cat <<EOT >"$file"
package $pkg_db;

import net.bodz.bas.err.ParseException;

import com.tinylily.model.base.CoObjectCriteria;

/**
 * @see $fqcn
 */
public class ${Base}Criteria
        extends CoObjectCriteria {

    @Override
    protected void populate(QVariantMap<String> map)
            throws ParseException {
        super.populate(map);
    }

}
EOT
}

function mk_mapper() {
    file="$1"
    findfile "$file" && return
    cat <<EOT >"$file"
package $pkg_db;

import java.util.List;

import org.apache.ibatis.annotations.Delete;

import net.bodz.bas.db.batis.IMapper;

import $fqcn;

public interface ${Base}Mapper
        extends IMapperTemplate<$Base, ${Base}Criteria> {

}
EOT
}

function mk_mapper_xml() {
    file="$1"
    findfile "$file" && return
    cat <<EOT >"$file"
<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper 
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="$pkg_db.${Base}Mapper">

    <resultMap id="map1" type="$fqcn" extends="co.mapUS">
    </resultMap>

    <sql id="select1"><![CDATA[
        select
            a.*,
            u.label "uid_label",
            g.label "gid_label"
        from $base a
            left join "user" u on a.uid=u.id
            left join "group" g on a.gid=g.id
        ]]>
    </sql>

    <sql id="select2"><![CDATA[
        select
            a.*,
            u.label "uid_label",
            g.label "gid_label"
        from $base a
            left join "user" u on a.uid = u.id
            left join "group" g on a.gid = g.id
        ]]>
    </sql>

    <sql id="filtconds">
        <!-- co -->
        <include refid="co.modefilt" />
    </sql>

    <select id="all" resultMap="map1">
        <include refid="select1" />
    </select>

    <select id="filter" resultMap="map1">
        <include refid="select1" />
        <where>
            <include refid="filtconds" />
        </where>
    </select>

    <select id="select" parameterType="int" resultMap="map1">
        <include refid="select2" />
        <where>
            <if test="_parameter != null">a.id = #{id}</if>
        </where>
    </select>

    <select id="insert" resultType="long"><![CDATA[
        insert into $base(
            code, label, description)
        ) values(
            #{codeName},#{label},#{description}
        ) returning id
    ]]></select>

    <update id="update">
        update $base
        <set>
            <include refid="co.setUS" />
        </set>
        <where>
            <if test="id != null">id = #{id}</if>
        </where>
    </update>

    <delete id="delete">
        delete from $base where id = #{id}
    </delete>

    <select id="count" resultType="hashmap">
        select count(*) "total" from ${base}
        <where>
            <include refid="filtconds" />
        </where>
    </select>

</mapper>
EOT
}

function mk_index() {
    file="$1"
    findfile "$file" && return
    cat <<EOT >"$file"
package $pkg_web;

import net.bodz.bas.rtx.IQueryable;

import $fqcn;

/**
 * TITLE
 * 
 * @label LABEL
 * 
 * @rel HREF1: TEXT1
 * 
 * @see <a href="HREF2">TEXT2</a>
 */
@ObjectType($Base.class)
public class ${Base}Index
        extends CoObjectIndex {

    public ${Base}Index(IQueryable context) {
        super(context);
    }

}
EOT
}

function mk_index_htm() {
    file="$1"
    findfile "$file" && return
    cat <<EOT >"$file"
package $pkg_web;

import java.io.IOException;
import java.util.List;

import net.bodz.bas.c.reflect.NoSuchPropertyException;
import net.bodz.bas.c.string.Strings;
import net.bodz.bas.err.ParseException;
import net.bodz.bas.html.dom.tag.HtmlDivTag;
import net.bodz.bas.html.dom.tag.HtmlTrTag;
import net.bodz.bas.html.util.IFontAwesomeCharAliases;
import net.bodz.bas.html.viz.IHttpViewContext;
import net.bodz.bas.repr.viz.ViewBuilderException;
import net.bodz.bas.rtx.IOptions;
import net.bodz.bas.ui.dom1.IUiRef;

import com.tinylily.model.base.security.User;

import $fqcn;

public class ${Base}Index_htm
        extends SlimIndex_htm<${Base}Index, $Base, ${Base}Criteria> {

    public ${Base}Index_htm()
            throws NoSuchPropertyException, ParseException {
        super(${Base}Index.class);
        indexFields.parse("i*sa", "label", "description");
    }


    @Override
    protected ${Base}Criteria buildSwitchers(IHttpViewContext ctx, SwitcherModelGroup switchers)
            throws ViewBuilderException {
        // ${Base}Mapper mapper = ctx.query(${Base}Mapper.class);
        ${Base}Criteria criteria = fn.criteriaFromRequest(new ${Base}Criteria(), ctx.getRequest());

        SwitcherModel<Integer> sw;
        sw = switchers.entityOf("表单", true, //
                ctx.query(FormDefMapper.class).filter(FormDefCriteria.all()), //
                "form", criteria.formId, criteria.noForm);
        criteria.formId = sw.getSelection1();
        criteria.noForm = sw.isSelectNull();

        return criteria;
    }

    @Override
    public void dataIndex(IHttpViewContext ctx, DataViewAnchors<$Base> a, IUiRef<${Base}Index> ref, IOptions options)
            throws ViewBuilderException, IOException {
        ${Base}Mapper mapper = ctx.query(${Base}Mapper.class);
        ${Base}Criteria criteria = ctx.query(${Base}Criteria.class);
        List<${Base}> list = postfilt(mapper.filter(criteria));

        IndexTable itab = new IndexTable(a.data);
        itab.buildHeader(ctx, indexFields.values());
        if (a.dataList())
            for (${Base} o : list) {
                HtmlTrTag tr = itab.tbody.tr();
                itab.cocols("i", tr, o);
                itab.cocols("u", tr, o);
                itab.cocols("sa", tr, o);
            }

        if (a.extradata != null)
            dumpFullData(a.extradata, list);
    }

}
EOT
}

function mk_index_inf() {
    list="src/main/resources/META-INF/services/net.bodz.lily.model.base.CoObjectIndex"
    add_inf "$list" "$@"
}

function mk_mapper_inf() {
    list="src/main/resources/META-INF/services/net.bodz.bas.db.ibatis.IMapper"
    add_inf "$list" "$@"
}

function mk_htm_inf() {
    list="src/main/resources/META-INF/services/net.bodz.bas.html.viz.IHttpViewBuilder"
    add_inf "$list" "$@"
}

function add_inf() {
    list="$1"
    shift
    findfile "$list"

    items=()
    if [ -f "$list" ]; then
        mapfile -t items<$list
    fi

    items=( "${items[@]}" "$@" )
    for a in "${items[@]}"; do
        echo "$a"
    done | sort -u >$list
}

boot "$@"
