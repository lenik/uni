#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PACKAGE:=@PACKAGE@}
    : ${PROGRAM_TITLE:=}
    : ${PROGRAM_SYNTAX:=[OPTIONS] [--] FQCN...}

    pkgdatadir='@pkgdatadir@'
    if [ "${pkgdatadir:0:1}" = '@' ]; then
        __FILE__=$(readlink -f "$0")
        pkgdatadir="${__FILE__%/*}"
    fi
    templatedir="$pkgdatadir/template"

    . shlib-import cliboot strfn
    option -l --layout =LAYOUT      "Specify the source layout"
    option -f --force               "Override existing source files"
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    opt_layout=auto
    opt_force=

    E_SET_FILE=100

function setopt() {
    case "$1" in
        -l|--layout)
            case "$2" in
                auto)
                    opt_layout=auto;;
                baseimpl)
                    opt_layout=baseimpl;;
                separate)
                    opt_layout=separate;;
                *)
                    quit "Bad layout name: $2";;
            esac;;
        -h|--help)
            help $1; exit;;
        -f|--force)
            opt_force=1;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    _log2 "pkgdatadir: $pkgdatadir"
    _log2 "template-dir: $templatedir"

    for d in src/main/java src/main/resources; do
        [ -d $d ] || quit "Non-existed directory: $d."
    done

    for fqcn in "$@"; do
        pkg=${fqcn%.*}
        Base=${fqcn##*.}
        [ "$Base" != "$fqcn" ] || quit "Not an FQCN: $fqcn"

        pkg_pojo="$pkg"
        layout=$opt_layout
        if [ "$layout" = auto ]; then
            case "$pkg" in
                *.model)
                    pkg=${pkg_pojo%.*}
                    layout=separate
                    ;;
                *)
                    layout=baseimpl
                    ;;
            esac
        fi

        case "$layout" in
            baseimpl)
                pkg_db=$pkg_pojo.impl
                pkg_web=$pkg_pojo.impl
                ;;
            separate)
                pkg_db=$pkg.db
                pkg_web=$pkg.htm
                ;;
        esac
        dir_pojo=${pkg_pojo//.//}
        dir_db=${pkg_db//.//}
        dir_web=${pkg_web//.//}
        
        B=${Base:0:1}
        base="$(tolower $B)${Base:1}"
        _log1 "Generating files for $pkg::$Base $base (in */$dir_pojo)."

        template=default
        for tmpl in "$templatedir/$template"/*; do
            file=
            file=$(set -e; . $tmpl)
            if [ -z "$file" ]; then
                quit "Illegal template $tmpl: file isn't set."
            fi

            findfile "$file" && continue
            . $tmpl
        done
    done
}

# return 1 if create new.
function findfile() {
    local file="$1"
    if [ -f "$file" ]; then
        if [ "$opt_force" != 1 ]; then
            _log2 "Reusing file $file."
            return 0
        else
            _log2 "Overwrite file $file."
            return 1
        fi
    fi

    local dirname="${file%/*}"
    if [ "$dirname" = "$file" ]; then
        dirname=.
    fi
    if [ ! -d "$dirname" ]; then
        _log2 "Creating directory $dirname..."
        mkdir -p "$dirname"
    fi
    _log1 "Creating $file..."
    return 1
}

function file() {
    if [ -z "$file" ]; then
        echo "$1"
        return $E_SET_FILE
    else
        return 0
    fi
}

function add_inf() {
    list="$1"
    shift
    findfile "$list"

    items=()
    if [ -f "$list" ]; then
        mapfile -t items<$list
    fi

    items=( "${items[@]}" "$@" )
    for a in "${items[@]}"; do
        echo "$a"
    done | sort -u >$list
}

boot "$@"
