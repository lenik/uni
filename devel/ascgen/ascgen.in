#!/usr/bin/perl

=head1 NAME

ascgen - Auto source comment generator

=cut
use strict;
use vars qw($LOGNAME $LOGLEVEL);
use cmt::log(2);
    $LOGNAME    = 'ascgen'; # $0 =~ /([^\/\\.]+)(?:\.\w+)*$/;
use cmt::util('readfile');
use cmt::vcs('parse_id');
    my %RCSID   = parse_id('$Id: - @VERSION@ @DATE@ @TIME@ - $');
use Getopt::Long;
    Getopt::Long::Configure('gnu_getopt');

sub _main; sub _version; sub _help;
sub process_c;
sub process_sh;
sub process_tex;
sub to_desc;

our %EXTMAP = (
    'c'         => 'C',
    'cpp'       => 'C',
    'cxx'       => 'C',
    'h'         => 'C',
    'hpp'       => 'C',
    'hxx'       => 'C',
    'd'         => 'D',
    'pl'        => 'perl',
    'pm'        => 'perl',
    'p'         => 'perl',
    'py'        => 'python',
    'sh'        => 'sh',
    'tex'       => 'tex',
);

my $opt_type;
my @header;

sub _boot {
    GetOptions('q|quiet'        => sub { $LOGLEVEL-- },
               'v|verbose'      => sub { $LOGLEVEL++ },
               'version'        => sub { _version; exit 0 },
               'h|help'         => sub { _help; exit 0 },
               't|type=s'       => \$opt_type,
               )
        or exit(1);
    _main;
}

=head1 SYNOPSIS

B<ascgen>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<...the rest of arguments...> ]>

=head1 DESCRIPTION

B<ascgen> is a WHAT used for WHAT. It HOW-WORKS.

BACKGROUND-PROBLEM.

HOW-ascgen-RESOLVES.

=head1 OPTIONS

=over 8

=item B<-m> | B<--my-option>

...

=item B<-q> | B<--quiet>

Repeat this option to suppress unimportant information to display.

=item B<-v> | B<--verbose>

Repeat this option to display more detailed information.

=item B<-h> | B<--help>

Display a breif help page and exit(0).

=item B<--version>

Display a short version information and exit(0).

=back

=head1 EXAMPLES

=over 4

=item Show help

    ascgen --help

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    &_version;
    print "\nSyntax: \n    $0 [OPTION] [--] FILES\n", <<'EOM';

Common options:
    -t, --type=TYPE         Specify the file type, override file extension
    -q, --quiet             Repeat to get less info
    -v, --verbose           Repeat to get more info
    -h, --help              Show this help page
        --version           Print the version info
EOM
}

exit (_boot or 0);

sub _main {
    if (scalar(@ARGV) == 0) {
        *IN = *STDIN;
        process_sh;
    } else {
        for (@ARGV) {
            my $ext = $_;
            $ext =~ s/\.in$//;
            $ext =~ s/^.*\.//;

            my $lang = $EXTMAP{$ext};
            if (defined $lang) {
                _log2 "Determined lang of $_: $lang";
            } else {
                $lang = 'sh';
            }

            if (-x ".ascgen.sh") {
                _log2 "Execute .ascgen.sh";
                open(SH, "./.ascgen.sh \"$_\" |")
                    or die("Failed to execute .ascgen.sh: $!");
                @header = <SH>;
                close SH;
            }

            open(IN, "<$_") or die "Failed to open $_: $!";

            if ($lang eq 'C') {
                process_c;
            } elsif ($lang eq 'sh') {
                process_sh;
            } elsif ($lang eq 'tex') {
                process_tex;
            }
            close IN;
        }
    }
}

sub process_sh {
    my $line = 0;
    while (<IN>) {
        if (/^\#\!/) { print; next }
        if ($line++ == 0) {
            print "# $_" for @header;
        }
        print;
    }
}

sub process_tex {
    print "% $_" for @header;
    while (<IN>) {
        print;
    }
}

sub process_c {
    if (scalar(@header)) {
        print "/**\n";
        print " * $_" for @header;
        print " */\n";
    }

    while (<IN>) {
        # KEYWORD+ id '(' ARGS ')' '{' ...
        if (/^(\s*) ( [A-Za-z_0-9]+ [ \t\*\&]+)+
                (\w+) \s* \(\s* (.*?) \s*\) \s* \{/x) {
            my $indent = $1;
            my $keywords = $2;  # LTRIM
            my $fn = $3;        # WORD
            my $args = $4;      # TRIM

            # my $staticp = $keywords =~ /\bstatic\b/;
            my $fn_desc = to_desc $fn;

            print "${indent}/**\n";
            print "${indent} * The $fn_desc function.\n";

            my $arg_index = 0;
            for (split(/,\s*/, $args)) {
                next if /^\.\.\.$/;
                die "Illegal argument spec $_"
                    unless /^\s* (.+?) \s* (\w+) (\s*\[\])* $/x;

                print "${indent} *\n" if ($arg_index++ == 0);

                my $arg_type = $1;
                my $arg_name = $2;
                my $arg_desc = to_desc $arg_name;
                my $pointer_p = $arg_type =~ /\*/;
                my $arg_0 = $pointer_p ? 'NULL' : undef;

                print "${indent} * \@param $arg_name ($arg_type)\n";
                print "${indent} *     Specify the $arg_desc. ";
                    print "$arg_0 for default." if defined $arg_0;
                    print "\n";
            }
            print "${indent} */\n";
        }
        print;
    }
}

=head1 DIAGNOSTICS

(No Information)

=cut
sub to_desc($) {
    for (@_) {
    # break camel-id to words
        s/([A-Z]+[a-z])/ \1/g;
        s/([A-Z]+)([A-Z])/\1 \2/g;
        s/_/ /g;
        s/^\s+//;
        
        my $buf = '';
        for (split(/\s+/, $_)) {
            $buf .= ' ' if ($buf ne '');
            $_ = lc($_) unless /^[A-Z]+$/;
            $buf .= $_;
        }
        #$buf =~ s/^\s+//;
        #$buf =~ s/\s+$//;
        return $buf;
    }
}

=head1 HACKING

(No Information)

=cut
# (MODULE FUNCTIONS)

=head1 HISTORY

=over

=item 0.x

The initial version.

=back

=cut
sub _version {
    print "[$LOGNAME] Auto source comment generator \n";
    print "Written by Lenik,  Version 0.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"Perl_simple_cli_program_template">

=head1 AUTHOR

Lenik (谢继雷) <xjl@99jsj.com>

=cut
