#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PROGRAM_TITLE:="Auto compile dmd script and run"}
    : ${PROGRAM_SYNTAX:="[OPTIONS] [--] ..."}

    . shlib-import cliboot
    option -B --always-make "Always compile"
    option -i --inplace     "Compile to hidden file in the same dir, instead of tmpdir"
    option     --dmd        "Compile by dmd"
    option     --dmd-run    "Run the script using dmd-run"
    option     --gdc        "Compile by gdc"
    option -I --add-incdir =PATH "Add import path"
    option -q --quiet       "Repeat to get less info"
    option -v --verbose     "Repeat to get more info"
    option -h --help        "Show this help page"
    option    --version     "Print the version info"

    dopts=()
    doptn=0
    appargs=()
    appargn=0

    always=
    inplace=
    compiler=dmd
    incdirs=()
    incdirn=0

    SYSRC=@sysconfdir@/dprog.rc
    USERRC=$HOME/.dprog.rc

function help2() { # TODO
    echo "  * (all other options are passed to the dmd compiler)"
}

function setopts() {
    no_app_args="$1"
    shift

    endofoptions=0
    for a in "$@"; do
        if [ "$endofoptions" = 1 ]; then
            app_args[app_argn++]="$a"
            continue
        fi

        case "$a" in
            -B|--always-make)
                always=1;;
            -i|--inplace)
                inplace=1;;
            --dmd)
                compiler=dmd;;
            --dmd-run)
                compiler=dmd-run;;
            --gdc)
                compiler=gdc;;
            -I*)
                import_path="${a#-I}"
                incdirs[incdirn++]="$import_path";;
            -h|--help)
                help; exit;;
            -q|--quiet)
                LOGLEVEL=$((LOGLEVEL - 1));;
            -v|--verbose)
                LOGLEVEL=$((LOGLEVEL + 1));;
            --version)
                version; exit;;
            --)
                endofoptions=1;;
            #-run)
            #    # -run is always used. so let's skip it and ...
            #    endofoptions=1;;
            -*)
                dopts[doptn++]="$a";;
            *)
                if [ "$no_app_args" = 1 ]; then
                    dopts[doptn++]="$a"
                else
                    app_args[app_argn++]="$a"
                    endofoptions=1
                fi;;
        esac
    done
}

function boot() {
    expand_first=0

    if [ $# != 0 ]; then
        if [ ! -f "$1" ]; then
            if [ "${1:0:1}" = '-' ]; then
                expand_first=1
            fi
        fi
    fi

    if [ "$expand_first" = 1 ]; then
        setopts 1 $1
        shift
    fi

    setopts 0 "$@"

    for rc in "$SYSRC" "$USERRC"; do
        _log2 "Load rc-file $rc"
        if [ -f "$rc" ]; then
            . $rc
        fi
    done

    case "$compiler" in
        dmd|dmd-run)
            if [ -z "$DMD" ]; then
                DMD=`which dmd` || quit "Can't find dmd"
            fi
            ;;
        gdc)
            if [ -z "$DMD" ]; then
                DMD=`which gdmd` || quit "Can't find gdmd"
            fi
            ;;
        *)
            quit "Compiler isn't supported: $compiler";;
    esac

    main "${app_args[@]}"
}

function main() {
    d_file="$1"; shift
    [ -f "$d_file" ] || quit "Source file $d_file isn't existed"

    for dir in "${incdirs[@]}"; do
        dopts[doptn++]="-I$dir"
    done

    if [ "$compiler" = 'dmd-run' ]; then
        _log2 "Execute: $DMD ${dopts[@]} -run '$d_file' $*"
        $DMD "${dopts[@]}" -run "$d_file" "$@"
        return
    fi

    d_dir="${d_file%/*}"
    d_base="${d_file##*/}"
    if [ "$d_dir" = "$d_file" ]; then
        d_dir=.
        d_base="$d_file"
    fi

    d_name="${d_base%.d}"
    if [ "$d_name" = "$d_base" ]; then
        quit "Source file must have extension .d: $d_base"
    fi

    if [ "$inplace" = 1 ]; then
        d_exe="$d_dir/.$d_name.bin"
    else
        outdir=/tmp/compiled.d
        mkdir -p "$outdir"
        # d_exe=`tempfile -d "$outdir" -p "$d_name" -s .bin`
        d_exe="$outdir/$d_name.bin"
    fi

    if [ ! -f "$d_exe" ] || \
            [ "$always" = 1 ] || \
            [ "$d_file" -nt "$d_exe" ]; then
        case "$compiler" in
            dmd|gdc)
                _log2 "Compile:" \
                $DMD "${dopts[@]}" -of"$d_exe" "$d_file"
                $DMD "${dopts[@]}" -of"$d_exe" "$d_file" ||
                    quit "Failed to compile."
                ;;
            _gdc_orig) # Use gdmd above instead.
                _log2 "Compile:" \
                $GDC "${dopts[@]}" -o "$d_exe" "$d_file"
                $GDC "${dopts[@]}" -o "$d_exe" "$d_file" ||
                    quit "Failed to compile."
                ;;
            *)
                quit "Compiler isn't supported: $compiler";;
        esac
    fi

    _log2 "Execute:" "$d_exe" "$@"
    "$d_exe" "$@"
}

# Functions can be used in RC script

function importdir() {
    if [ -d "$1" ]; then
        incdirs[incdirn++]="$1"
    else
        quit "Non-existed import dir: $1"
    fi
}

boot "$@"
