#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PROGRAM_TITLE:="Auto compile dmd script and run"}
    : ${PROGRAM_SYNTAX:="[OPTIONS] [--] ..."}

    : ${DC:=gdc}
    : ${SYSRC:=@sysconfdir@/dprog.rc}
    : ${USERRC:=$HOME/.dprog.rc}

    . shlib-import cliboot
    option -B --always-make "Always compile"
    option -i --inplace     "Compile to hidden file in the same dir, instead of tmpdir"
    option     --dmd        "Compile by Digital Mars D2.x Compiler"
    option     --dmd-run    "Run the script using dmd-run"
    option     --gdc        "Compile by GCC-based D Compiler"
    option     --ldc        "Compile by LLVM D Compiler"

    option -4 --32-bit      "Compile to 32-bit code"
    option -8 --64-bit      "Compile to 64-bit code"
    option -d --deprecated  "Allow deprecated features"
    option -g --debug       "Compile in debug code with symbolic info"
    option -k --no-object   "dmd: Suppress generation of object file"
    option -l --link =LIB   "Link with specific library"
    option -m --map         "dmd: Generate linker .map file"
    option -p --property    "Enfore @property syntax"
    option -s --strip       "Optimized for space, generate compact code"
    option -u --unittest    "Compile in unittest code"
    option -w --warnings    "Enable warnings"
    option -x --gdb         "Run in the gdb debugger"
    option -. --go-out      "Increase the parent level to the outmost src dir"
    option -D --doc         "Generate documentations"
    option -H --header      "Generate D interface file"
    option -I --import =DIR "Add import search directory"
    option -O --optimize    "Generate optimized, release-mode code"
    option -X --json        "Write JSON file"

    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    always=
    inplace=
    incdirs=(.)
    incdirn=1
    libs=()
    libn=0
    outmostdir=
    warnings=0
    gdb=
    no_obj=
    gen_doc=
    gen_header=
    gen_json=
    dmdopts=()
    dmdoptn=0
    gdcopts=()
    gdcoptn=0
    gdcopts2=()
    gdcoptn2=0
    ldcopts=()
    ldcoptn=0

function help_more() {
    echo "  * (all other options are passed to the dmd compiler)"
}

function setopt() {
    case "$1" in
        -B|--always-make)
            always=1;;
        -i|--inplace)
            inplace=1;;
        --dmd)
            DC=dmd;;
        --dmd-run)
            DC=dmd-run;;
        --gdc)
            DC=gdc;;
        --ldc)
            DC=ldc;;
        -4|--32-bit)
            dmdopts[dmdoptn++]='-m32'
            ldcopts[ldcoptn++]='-m32'
            ;;
        -8|--64-bit)
            dmdopts[dmdoptn++]='-m64'
            ldcopts[ldcoptn++]='-m64'
            ;;
        -d|--deprecated)
            dmdopts[dmdoptn++]='-d'
            gdcopts[gdcoptn++]='-Wno-deprecated'
            ldcopts[ldcoptn++]='-d'
            ;;
        -g|--debug)
            dmdopts[dmdoptn++]='-debug'
            gdcopts[gdcoptn++]='-fdebug=1'
            ldcopts[ldcoptn++]='-g'
            ;;
        -k|--no-object)
            # dmd: -o-, ldc: -o-
            no_obj=1;;
        -l|--link)
            addlinklib "$2";;
        -m|--map)
            dmdopts[dmdoptn++]='-map'
            ;;
        -p|--property)
            dmdopts[dmdoptn++]='-property'
            gdcopts[gdcoptn++]='-fproperty'
            ;;
        -s|--strip)
            gdcopts[gdcoptn++]='-fno-assert'
            gdcopts[gdcoptn++]='-fno-invariants'
            gdcopts[gdcoptn++]='-fno-in'
            gdcopts[gdcoptn++]='-fno-out'
            gdcopts[gdcoptn++]='-fno-bounds-check'
            ldcopts[ldcoptn++]='-code-model=small'
            ;;
        -u|--unittest)
            dmdopts[dmdoptn++]='-unittest'
            gdcopts[gdcoptn++]='-funittest'
            ldcopts[ldcoptn++]='-unittest'
            ;;
        -w|--warnings)
            warnings=1
            dmdopts[dmdoptn++]='-w'
            # dmdopts[dmdoptn++]='-wi'
            gdcopts[gdcoptn++]='-Wcast-result'
            gdcopts[gdcoptn++]='-Wunknown-pragmas'
            ldcopts[ldcoptn++]='-w'
            ;;
        -x|--gdb)
            gdb=1;;
        -.|--go-out)
            if [ -z "$outmostdir" ]; then
                outmostdir=..
            else
                outmostdir=${outmostdir}/..
            fi;;
        -D|--doc)
            gen_doc=1
            dmdopts[dmdoptn++]='-D'
            gdcopts[gdcoptn++]='-fdoc'
            ldcopts[ldcoptn++]='-D'
            ;;
        -H|--header)
            gen_header=1
            dmdopts[dmdoptn++]='-H'
            gdcopts[gdcoptn++]='-fintfc'
            ldcopts[ldcoptn++]='-H'
            ;;
        -I|--import)
            addimportdir "$2";;
        -O|--optimize)
            dmdopts[dmdoptn++]='-O'
            dmdopts[dmdoptn++]='-release'
            gdcopts[gdcoptn++]='-O3'
            gdcopts[gdcoptn++]='-frelease'
            ldcopts[ldcoptn++]='-O3' # By default, -O is -O2.
            ldcopts[ldcoptn++]='-release'
            ;;
        -X|--json)
            gen_json=1;;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
    esac
}

function main() {
    for rc in "$SYSRC" "$USERRC"; do
        _log2 "Load rc-file $rc"
        if [ -f "$rc" ]; then
            . $rc
        fi
    done

    case "$DC" in
        dmd|dmd-run)
            if [ -z "$DMD" ]; then
                DMD=`which dmd` || quit "Can't find dmd"
            fi;;
        gdc)
            if [ -z "$GDC" ]; then
                GDC=`which gdc` || quit "Can't find gdc"
            fi;;
        ldc)
            if [ -z "$LDC" ]; then
                LDC=`which ldc` || quit "Can't find ldc"
            fi;;
        *)
            quit "Compiler isn't supported: $DC";;
    esac

    d_file="$1"; shift
    [ -f "$d_file" ] || quit "Source file $d_file isn't existed"
    # option: only normalize if cwd != d_dir...
    d_file=$( readlink -f "$d_file" )

    d_dir="${d_file%/*}"
    d_base="${d_file##*/}"
    if [ "$d_dir" = "$d_file" ]; then
        d_dir=.
        d_base="$d_file"
    fi

    # Workdaround: support for .d.in sources.
    d_base_ex="${d_base%.in}"
    if [ "$d_base_ex" != "$d_base" ]; then
        if [ ! -f "$d_base_ex" ]; then
            _log1 "Add helper symlink $d_base_ex -> $d_base"
            ln -snf "$d_base" "$d_dir/$d_base_ex"
        fi
        d_base="$d_base_ex"
        d_file="$d_dir/$d_base"
    fi

    d_name="${d_base%.d}"
    if [ "$d_name" = "$d_base" ]; then
        quit "Source file must have extension .d (.in): $d_base"
    fi

    if [ "$inplace" = 1 ]; then
        outdir="$d_dir"
        d_exe="$outdir/.$d_name.bin"
    else
        outdir=/tmp/dprog.exe
        if [ "$DC" != 'dmd-run' ]; then
            mkdir -p "$outdir"
        fi
        # d_exe=`tempfile -d "$outdir" -p "$d_name" -s .bin`
        d_exe="$outdir/$d_name.bin"
    fi

    [ -n "$outmostdir" ] && incdirs[incdirn++]="$outmostdir"

    # Normalize inc dirs.
    cdirs=()
    cdirn=0
    for dir in "${incdirs[@]}"; do
        case "$dir" in
        .)
            dir="$d_dir";;
        /*)
            : ;;
        *)
            dir="$d_dir/$dir";;
        esac
        cdirs[cdirn++]="$dir"
    done
    incdirs=("${cdirs[@]}")

    # Configure DC* to include the inc dirs.
    for dir in "${incdirs[@]}"; do
        dmdopts[dmdoptn++]="-I$dir"
        gdcopts[gdcoptn++]="-I$dir"
        ldcopts[ldcoptn++]="-I=$dir"
    done

    if [ "$warnings" = 0 ]; then
        # ignore unsupported warnings
        dmdopts[dmdoptn++]='-ignore'
        gdcopts[gdcoptn++]='-fignore-unknown-pragmas'
        ldcopts[ldcoptn++]='-ignore'
    fi

    if [ "$gen_header" = 1 ]; then
        dmdopts[dmdoptn++]="-Hd=$outdir"
        gdcopts[gdcoptn++]="-fintfc-dir=$outdir"
        ldcopts[ldcoptn++]="-Hd=$outdir"
    fi
    if [ "$gen_doc" = 1 ]; then
        dmdopts[dmdoptn++]='-Dd=$outdir'
        gdcopts[gdcoptn++]="-fdoc-dir=$outdir"
        ldcopts[ldcoptn++]='-Dd=$outdir'
    fi
    if [ "$gen_json" = 1 ]; then
        dmdopts[dmdoptn++]='-X'
        dmdopts[dmdoptn++]="-Xf$outdir/$d_name.json"
        gdcopts[gdcoptn++]="-fXf=$outdir/$d_name.json"
    fi

    d_files=("$d_file")
    d_filen=1
    
    while IFS=' ;' read _import m_fqmn _; do
        m_file="${m_fqmn//.//}"
        for dir in "${incdirs[@]}"; do
            if [ -f "$dir/$m_file.d" ]; then
                _log2 "Linked Source: $dir/$m_file.d"
                d_files[d_filen++]="$dir/$m_file.d"
            fi
        done
    done < <(grep '^import ' "$d_file" | grep '@link' )

    while IFS='"' read _pragma_lib libname _; do
        _log2 "Link with pragma lib: $libname"
        addlinklib "$libname"
    done < <(grep '^pragma(lib,' "${d_files[@]}")

    for lib in "${libs[@]}"; do
        dmdopts[dmdoptn++]="-L-l$lib"
        gdcopts2[gdcoptn2++]="-l$lib"
        ldcopts[ldcoptn++]="-L-l$lib"
    done

    if [ "$always" = 1 ] || expired "$d_exe" "${d_files[@]}"; then
        case "$DC" in
            dmd-run)
                _log2 "Execute using dmd-run:" \
                $DMD "${dmdopts[@]}" -run "$d_file" "$@"
                $DMD "${dmdopts[@]}" -run "$d_file" "$@" ||
                    quit "Failed to run."
                ;;
            dmd)
                _log2 "Compile using dmd:" \
                $DMD "${dmdopts[@]}" -of"$d_exe" "${d_files[@]}"
                $DMD "${dmdopts[@]}" -of"$d_exe" "${d_files[@]}" ||
                    quit "Failed to compile."
                ;;
            gdc)
                _log2 "Compile using gdc:" \
                $GDC "${gdcopts[@]}" -o "$d_exe" "${d_files[@]}" "${gdcopts2[@]}"
                $GDC "${gdcopts[@]}" -o "$d_exe" "${d_files[@]}" "${gdcopts2[@]}" ||
                    quit "Failed to compile."
                ;;
            ldc)
                _log2 "Compile using ldc:" \
                $LDC "${ldcopts[@]}" -of="$d_exe" "${d_files[@]}"
                $LDC "${ldcopts[@]}" -of="$d_exe" "${d_files[@]}" ||
                    quit "Failed to compile."
                ;;
            *)
                quit "Compiler isn't supported: $DC";;
        esac
    fi

    if [ -z "$gdb" ]; then
        _log2 "Execute:" "$d_exe" "$@"
        exec "$d_exe" "$@"
    else
        _log2 "Debug:" "$d_exe" "$@"
        exec gdb --args "$d_exe" "$@"
    fi
}

function expired() {
    local target="$1"
    shift

    local prereq
    [ -f "$target" ] || return 0
    for prereq in "$@"; do
        if [ "$prereq" -nt "$target" ]; then
            return 0
        fi
    done
    return 1
}

# Functions can be used in RC script

function addimportdir() {
    if [ -d "$1" ]; then
        incdirs[incdirn++]="$1"
    else
        quit "Non-existed import dir: $1"
    fi
}

function addlinklib() {
    local a
    for a in "$@"; do
        local lib
        local dup=
        for lib in "${libs[@]}"; do
            if [ "$lib" = "$a" ]; then
                dup=1
                break
            fi
        done
        if [ -z "$dup" ]; then
            libs[libn++]="$a"
        fi
    done
}

boot "$@"
