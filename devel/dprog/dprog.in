#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PROGRAM_TITLE:="Auto compile dmd script and run"}
    : ${PROGRAM_SYNTAX:="[OPTIONS] [--] ..."}

    : ${SYSRC:=@sysconfdir@/dprog.rc}
    : ${USERRC:=$HOME/.dprog.rc}

    . shlib-import cliboot
    option -B --always-make "Always compile"
    option -i --inplace     "Compile to hidden file in the same dir, instead of tmpdir"
    option     --dmd        "Compile by dmd"
    option     --dmd-run    "Run the script using dmd-run"
    option     --gdc        "Compile by gdc"

    option -d --deprecated  "Allow deprecated features"
    option -g --debug       "Compile in debug code with symbolic info"
    option -k --no-object   "dmd: Suppress generation of object file"
    option -u --unittest    "Compile in unittest code"
    option -w --warnings    "Enable warnings"
    option -. --go-out      "Increase the parent level to the outmost src dir"
    option -D --doc         "Generate documentations"
    option -H --header      "Generate D interface file"
    option -I --import =DIR "Add import search directory"
    option -O --optimize    "Generate optimized code"

    option -q --quiet       "Repeat to get less info"
    option -v --verbose     "Repeat to get more info"
    option -h --help        "Show this help page"
    option    --version     "Print the version info"

    always=
    inplace=
    compiler=dmd
    incdirs=()
    incdirn=0
    outmostdir=
    dopts=()
    doptn=0
    no_obj=

function help_more() {
    echo "  * (all other options are passed to the dmd compiler)"
}

function setopt() {
    case "$1" in
        -B|--always-make)
            always=1;;
        -i|--inplace)
            inplace=1;;
        --dmd)
            compiler=dmd;;
        --dmd-run)
            compiler=dmd-run;;
        --gdc)
            compiler=gdc;;
        -d|--deprecated)
            dopts[doptn++]='-d';;
        -g|--debug)
            dopts[doptn++]='-debug';;
        -k|--no-object)
            no_obj=1;;
        -u|--unittest)
            dopts[doptn++]='-unittest';;
        -w|--warnings)
            dopts[doptn++]='-w';;
        -.|--go-out)
            if [ -z "$outmostdir" ]; then
                outmostdir=..
            else
                outmostdir=${outmostdir}/..
            fi;;
        -D|--doc)
            dopts[doptn++]='-D';;
        -H|--header)
            dopts[doptn++]='-H';;
        -I|--import)
            addimportdir "$2";;
        -O|--optimize)
            dopts[doptn++]='-O';;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
    esac
}

function main() {
    for rc in "$SYSRC" "$USERRC"; do
        _log2 "Load rc-file $rc"
        if [ -f "$rc" ]; then
            . $rc
        fi
    done

    if [ -z "$DMD" ]; then
        case "$compiler" in
            dmd|dmd-run)
                if [ -z "$DMD" ]; then
                    DMD=`which dmd` || quit "Can't find dmd"
                fi
                ;;
            gdc)
                if [ -z "$DMD" ]; then
                    DMD=`which gdmd` || quit "Can't find gdmd"
                fi
                ;;
            *)
                quit "Compiler isn't supported: $compiler";;
        esac
    fi

    d_file="$1"; shift
    [ -f "$d_file" ] || quit "Source file $d_file isn't existed"

    [ -n "$outmostdir" ] && incdirs[incdirn++]="$outmostdir"
    for dir in "${incdirs[@]}"; do
        dopts[doptn++]="-I$dir"
    done

    if [ "$compiler" = 'dmd-run' ]; then
        _log2 "Execute: $DMD ${dopts[@]} -run '$d_file' $*"
        $DMD "${dopts[@]}" -run "$d_file" "$@"
        return
    fi

    d_dir="${d_file%/*}"
    d_base="${d_file##*/}"
    if [ "$d_dir" = "$d_file" ]; then
        d_dir=.
        d_base="$d_file"
    fi

    # Workdaround: support for .d.in sources.
    d_base_ex="${d_base%.in}"
    if [ "$d_base_ex" != "$d_base" ]; then
        if [ ! -f "$d_base_ex" ]; then
            _log1 "Add helper symlink $d_base_ex -> $d_base"
            ln -snf "$d_base" "$d_dir/$d_base_ex"
        fi
        d_base="$d_base_ex"
        d_file="$d_dir/$d_base"
    fi

    d_name="${d_base%.d}"
    if [ "$d_name" = "$d_base" ]; then
        quit "Source file must have extension .d (.in): $d_base"
    fi

    if [ "$inplace" = 1 ]; then
        d_exe="$d_dir/.$d_name.bin"
    else
        outdir=/tmp/compiled.d
        mkdir -p "$outdir"
        # d_exe=`tempfile -d "$outdir" -p "$d_name" -s .bin`
        d_exe="$outdir/$d_name.bin"
    fi

    d_files=("$d_file")
    d_filen=1
    
    while IFS=' ;' read _import m_fqmn _; do
        m_file="${m_fqmn//.//}"
        for dir in "${incdirs[@]}"; do
            if [ -f "$dir/$m_file.d" ]; then
                _log2 "Link: $dir/$m_file.d"
                d_files[d_filen++]="$dir/$m_file.d"
            fi
        done
    done < <(grep '^import ' "$d_file" | grep '@link' )

    if [ ! -f "$d_exe" ] || \
            [ "$always" = 1 ] || \
            [ "$d_file" -nt "$d_exe" ]; then
        case "$compiler" in
            dmd|gdc)
                _log2 "Compile:" \
                $DMD "${dopts[@]}" -of"$d_exe" "${d_files[@]}"
                $DMD "${dopts[@]}" -of"$d_exe" "${d_files[@]}" ||
                    quit "Failed to compile."
                ;;
            _gdc_orig) # Use gdmd above instead.
                _log2 "Compile:" \
                $GDC "${dopts[@]}" -o "$d_exe" "${d_files[@]}"
                $GDC "${dopts[@]}" -o "$d_exe" "${d_files[@]}" ||
                    quit "Failed to compile."
                ;;
            *)
                quit "Compiler isn't supported: $compiler";;
        esac
    fi

    _log2 "Execute:" "$d_exe" "$@"
    "$d_exe" "$@"
}

# Functions can be used in RC script

function addimportdir() {
    if [ -d "$1" ]; then
        incdirs[incdirn++]="$1"
    else
        quit "Non-existed import dir: $1"
    fi
}

boot "$@"
