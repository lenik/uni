#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PACKAGE:=@PACKAGE@}
    : ${PROGRAM_TITLE:=Generate new file from template}
    : ${PROGRAM_SYNTAX:=[OPTIONS] [--] [TemplateSpec] File [KEY=VAL...] ...}

    . shlib-import cliboot
    option -D --define =K=V         "Define named parameter"
    option -t --template =NAME      "Specify the template"
    option -c --stdout              "Write to stdout always"
    option -f --force               "Force to overwrite existing file"
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    newtmpldir=@newtmpldir@
    [ -d "$newtmpldir" ] || newtmpldir=newtmpl.d

    template=
    outfile=/dev/stdout
    stdout=
    force=

    declare -A cfg

function setopt() {
    case "$1" in
        -D|--define)
            k="${2%%=*}"
            [ "$k" = "$2" ] && quit "Bad spec: $2"
            v="${2#*=}"
            cfg[$k]="$v"
            ;;
        -t|--template)
            template="$2";;
        -c|--stdout)
            stdout=1;;
        -f|--force)
            force=1;;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    shopt -s nullglob

    cfg[user]="${DEBFULLNAME-$USERNAME}"
    email="${DEBEMAIL-$EMAIL}"
    cfg[email]="$email"
    cfg[emailat]="${email/@/ (at) }"

    if [ -z "$template" ]; then
        this="${0##*/}"
        case "$this" in
            new-*)
                template="${this#new-}";;
            mk*)
                template="${this#mk}";;
            *)
                [ -z "$1" ] && quit "No template name specified."
                template="$1"
                shift;;
        esac
    fi

    if [ ! -f "$template" ]; then
        parentv=(. "$newtmpldir")
        pathv=()

        token="$template"
        while true; do
            ndir=0
            for parent in "${parentv[@]}"; do
                _log2 "Search $parent/$token*"
                for f in "$parent/$token"*; do
                    [ -d "$f" ] && (( ndir++ ))
                    pathv=("${pathv[@]}" "$f")
                    break
                done
            done
            if [ ${#pathv[@]} = 0 ]; then
                quit "Undefined template: $template"
            fi

            [ $ndir = 0 ] && break

            if [ $# = 0 ]; then
                quit "Template name is incompleted."
            fi
            parentv="${pathv[@]}"
            pathv=()
            token="$1"
            shift
        done

        template="${pathv[0]}"
    fi
    base="${template##*/}"
    tname="${base%.*}"

    cfg[_TEMPLATE]="$template"
    cfg[_TNAME]="$tname"

    if [ $# != 0 ]; then
        outfile="$1"
        if [ -f "$outfile" ]; then
            if [ "$force" != 1 && "$stdout" != 1 ]; then
                quit "File is already existed: $outfile"
            fi
        fi
        shift
    fi

    cfg[__FILE__]="$outfile"
    base="${outfile##*/}"
    cfg[__BASE__]="$base"
    cfg[__NAME__]="${base%.*}"

    if [ "$stdout" = 1 ]; then
        outfile=/dev/stdout
    fi

    for a in "$@"; do
        k="${a%%=*}"
        [ "$k" = "$a" ] && break
        v="${a#*=}"
        shift
        cfg["$k"]="$v"
    done

    cfg[words]="$*"

    cfgfile=`tempfile`
    _log2 "Config:"
    for k in "${!cfg[@]}"; do
        v="${cfg[$k]}"
        echo "$k=$v" >>$cfgfile
        _log2 "  $k = $v."
    done

    tlinked=`tempfile`
    header >$tlinked
    cat "$template" >>$tlinked

    php $tlinked <$cfgfile >$outfile

    rm -f $cfgfile
    rm -f $tlinked
}

function header() {
    cat <<'EOT'
<?php
    function camelCase($str) {
        $str = preg_replace('/[^a-z0-9]+/i', ' ', $str);
        $str = trim($str);
        $str = ucwords($str);
        $str = str_replace(" ", "", $str);
        $str = lcfirst($str);
        return $str;
    }

    function hyphen($str, $delim) {
        $str = preg_replace('/([A-Z])/', ' $1', $str);
        $str = trim($str);
        $str = str_replace(' ', $delim, $str);
        return $str;
    }

    $cfg = [];
    while ($s = fgets(STDIN)) {
        $eq = strpos($s, '=');
        if ($eq !== false) {
            $k = substr($s, 0, $eq);
            $v = substr($s, $eq + 1);
            $cfg[$k] = chop($v);
        }
    }
    
    $words = $cfg['words'];
    $Name = $cfg['__NAME__'];
    $name = strtolower($Name);
    $naMe = camelCase($Name);
    $NAME = strtoupper($Name);
    $NA_ME = strtoupper(hyphen($Name, '_'));
?>
EOT
}

boot "$@"
