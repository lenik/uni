#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PACKAGE:=@PACKAGE@}
    : ${PROGRAM_TITLE:=Java application launcher for Maven projects}
    : ${PROGRAM_SYNTAX:=[OPTIONS] [--] <app-alias> [app-options...]}

    : ${JAVA:=java}

    # The encoding can be 'ANSI_X3.4-1968' when not specified.
    : ${JAVAOPTS:=-ea -Dsun.jnu.encoding=utf-8 -Dfile.encoding=utf-8}
    javaopts=($JAVAOPTS)
    appopts=()

    . shlib-import cliboot
    option -d --debug                   "Enable debug mode"
    option -D --property =key=value     "Specify system property, the same as -O -Dkey=value"
    option -O --java-opt =OptionSpec    "Add java option, eg. -O -Dfoo=bar or -O-Dfoo=bar"
    option -p --port =PORT              "Specify debug (JDWP) port, default 8000"
    option -P --profiler                "Run profiler for the app"
    option -r --project-dir =DIR        "Specify the project dir"
    option -t --timing                  "Measure how long the program has been running"
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    alias_mode=0

    opt_orderfile=lib/order.lst

    opt_project_dir=.
    opt_debug=
    opt_port=8000
    opt_profiler=
    opt_timing=

    opt_javaopts=()
    opt_props=()

    shopt -s nullglob

function setopt() {
    case "$1" in
        -d|--debug)
            opt_debug=1;;
        -D|--property)
            opt_props=("${opt_props[@]}" "$2");;
        -r|--project-dir)
            opt_project_dir="$2";;
        -t|--timing)
            opt_timing=1;;
        -O|--java-opt)
            opt_javaopts=("${opt_javaopts[@]}" "$2");;
        -p|--jdwp-port)
            opt_port=$2;;
        -P|--profiler)
            opt_profiler=1;;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function javaopt() {
    javaopts=("${javaopts[@]}" "$@")
}

function main() {
    if [ "$alias_mode" = 1 ]; then
        #is_symlink=1
        selfdir="${0%/*}"
        if [ "$selfdir" = "$0" ]; then
            selfdir=.
        fi
        name="${0##*/}"
    else
        if [ -z "$1" ]; then
            echo "App isn't specified." >&2
            exit 1
        fi
        selfdir=.
        name="$1"
        shift
    fi

    if [ "$opt_project_dir" = . ]; then
        for d in '' '/..' '/../..' '/../../..'; do
            if [ -d "$selfdir$d/lib" ]; then
                opt_project_dir=$(readlink -f "$selfdir$d")
                break
            fi
        done
    fi

    if [ "$opt_debug" = 1 ]; then
        JDWPOPTS="transport=dt_socket"
        JDWPOPTS="$JDWPOPTS,server=y"
        JDWPOPTS="$JDWPOPTS,suspend=y"
        JDWPOPTS="$JDWPOPTS,address=$opt_port"

        # Legacy: it will run in interpreted mode instead of JIT, which will be slower.
        #javaopt "-Xdebug"
        #javaopt "-Xrunjdwp:$JDWPOPTS"

        # From Java 5.0+
        javaopt "-agentlib:jdwp=$JDWPOPTS"
    fi

    for pr in "${opt_props[@]}";    do javaopt "-D$pr"; done
    for jo in "${opt_javaopts[@]}"; do javaopt "$jo";   done

    appcls=()
        old_workdir="$PWD"
        cd "$opt_project_dir"
            
            # find in programs
            programs=target/classes/META-INF/programs
            if [ -f $programs ]; then
                while IFS='= ' read _key _scope _cls; do
                    if [ "$_key" = "$name" ]; then
                        appcls+=("$_cls")
                    fi
                done <$programs
            fi

            # find by simple classname
            if [ ${#appcls[@]} = 0 ]; then
                for a in $(find target/classes -iname "$name.class"); do
                    a="${a[0]}"
                    a=${a#target/classes/}
                    a=${a%.class}
                    a=${a//\//.}
                    appcls=( "${appcls[@]}" "$a" )
                done
            fi

        cd "$old_workdir"

    n=${#appcls[@]}
    if [ $n != 1 ]; then
        if [ $n = 0 ]; then
            _error "No such app: $app"
        else
            _error "Name ambiguous:"
            for a in "${appcls[@]}"; do
                _error "    $a"
            done
        fi
        exit 1
    fi

    classpath=
    if [ -f "$opt_project_dir/$opt_orderfile" ]; then
        while read item; do
            item_full="$opt_project_dir/$item"
            add_cp "$item_full"
        done <"$opt_project_dir/$opt_orderfile"
    else
        for dir in "$opt_project_dir"/classes/*/; do
            add_cp "$dir"
        done
        for jar in "$opt_project_dir"/lib/*.jar; do
            add_cp "$jar"
        done
    fi
    add_cp "$opt_project_dir"/target/classes
    add_cp "$opt_project_dir"/target/test-classes
    classpath="${classpath#:}"

    TIME=
    if [ "$opt_timing" = 1 ]; then TIME=do_timing; fi

    if [ "$alias_mode" = 1 ]; then
        for rc in "$0.rc"; do
            if [ -f "$rc" ]; then
                _log2 "source $rc"
                . "$rc"
            fi
        done
    fi

    RLWRAP=
    for rl in readline-editor rlwrap; do
        if which $rl >/dev/null; then
            RLWRAP=$rl
            break
        fi
    done
    _log2 "Execute:$TIME $RLWRAP $JAVA ${javaopts[@]} -cp ... $appcls ${appopts[@]} $*"
    exec-v eval $TIME $RLWRAP $JAVA "${javaopts[@]}" -cp "$classpath" "$appcls" "${appopts[@]}" "$@"
}

function exec-v() {
    #echoli "$@"
    "$@"
}

function do_timing() {
    time "$@"
}

function add_cp() {
    local a
    for a in "$@"; do
        _log2 "Classpath: $a"
        classpath="$classpath:$a"
    done
}

if [ -L "$0" ] && [ "${0##*/}" != 'main' ]; then
    alias_mode=1
    cliopts=()
    while true; do
        case "$1" in
            -d|--debug)
                opt_debug=1
                shift
                continue;;

            -v|--verbose)
                ((LOGLEVEL++))
                cliopts=("${cliopts[@]}" "$1")
                shift
                continue;;
        esac
        break
    done
    main "${cliopts[@]}" "$@"
else
    boot "$@"
fi

