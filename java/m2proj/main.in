#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PACKAGE:=@PACKAGE@}
    : ${PROGRAM_TITLE:=Java application launcher for Maven projects}
    : ${PROGRAM_SYNTAX:=[OPTIONS] [--] <app-name> [app-options...]}

    : ${JAVA:=java}
    JAVA_NAME=${java##*/}

    # The encoding can be 'ANSI_X3.4-1968' when not specified.
    : ${JAVAOPTS:=-Dsun.jnu.encoding=utf-8 -Dfile.encoding=utf-8}

    javaopts=()
    appopts=()

    . shlib-import cliboot
    option -a --assert                  "Enable assert"
    option -A --no-assert               "Disable assert"
    option -c --class                   "Use FQCN for app-name, don't use program launcher"
    option -i --cp-item =PATH           "Add more classpath item"
    option -d --debug                   "Enable debug mode"
    option -D --property =key=value     "Specify system property, the same as -O -Dkey=value"
    option -O --java-opt =OptionSpec    "Add java option, eg. -O -Dfoo=bar or -O-Dfoo=bar"
    option -g --codegen                 "Generate the command script, don't run the app"
    option -L --lang =TYPE              "script langauge, default sh"
    option -j --search-jars             "Search program aliases in jars"
    option -p --port =PORT              "Specify debug (JDWP) port, default 8000"
    option -P --profiler                "Run profiler for the app"
    option -J --jprofiler-dir =DIR      "Specify the JProfiler installation dir"
    option -k --keep                    "Keep intermediate files for debugging"
    option -r --project-dir =DIR        "Specify the project dir(s)"
    option -t --timing                  "Measure how long the program has been running"
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    alias_mode=

    if [ -z "$classpath_lists" ]; then
        classpath_lists=(classpath.lst)
    fi

    exe="$0"
    exe_dir=.
    app_name=
    project_dirs=()
    cp_extraitems=()
    cp_items=()
    cp_dirs=()
    declare -A cp_item_counter=()

    opt_assert=
    opt_is_class=0
    opt_debug=
    opt_codegen=
    opt_codelang=sh
    opt_search_jars=
    opt_fallback_to_launcher=1
    opt_port=8000
    opt_profiler=
    opt_jprofile_dir=
    opt_keep=0
    opt_timing=
    opt_tmpdir=/tmp

    opt_javaopts=()
    opt_props=()

    shopt -s nullglob

function setopt() {
    case "$1" in
        -a|--assert)
            opt_assert=1;;
        -A|--no-assert)
            opt_assert=0;;
        -c|--class)
            opt_is_class=1;;
        -i|--cp-item)
            cp_extraitems+=("$2");;
        -d|--debug)
            opt_debug=1;;
        -D|--property)
            opt_props+=("$2");;
        -r|--project-dir)
            project_dirs+=("$2");;
        -g|--codegen)
            opt_codegen=1;;
        -L|--lang)
            opt_codelang="$2";;
        -t|--timing)
            opt_timing=1;;
        -O|--java-opt)
            opt_javaopts+=("$2");;
        -j|--search-jars)
            opt_search_jars=1
            opt_fallback_to_launcher=0
            ;;
        -k|--keep)
            opt_keep=1;;
        -p|--jdwp-port)
            opt_port=$2;;
        -P|--profiler)
            opt_debug=1
            opt_profiler=1;;
        -J|--jprofiler-dir)
            opt_jprofiler_dir="$2";;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function stdjavaopt() {
    if [ "$JAVA_NAME" = java ]; then
        javaopts=("${javaopts[@]}" "$@")
    fi
}

function alljavaopt() {
    javaopts=("${javaopts[@]}" "$@")
}

function main() {
    local tmpdir
    for tmpdir in /xxx /tmp .; do
        if [ -d $tmpdir ]; then
            opt_tmpdir="$tmpdir"
            break
        fi
    done

    _log2 "alias mode: $alias_mode"
    if [ -z "$app_name" ]; then
        if [ -z "$1" ]; then
            echo "App isn't specified." >&2
            exit 1
        fi

        app_name="$1"
        shift

        if [ "${app_name/./}" != "$app_name" ]; then
            _log2 "specified the app by qualified name: $app_name"
            opt_is_class=1
        fi
    fi
    _log2 "exe: $exe"
    _log2 "exe dir: $exe_dir"
    _log2 "app name: $app_name (is_class=$opt_is_class)"

    if [ "$opt_debug" = 1 ]; then
        JDWPOPTS="transport=dt_socket"
        JDWPOPTS="$JDWPOPTS,server=y"
        JDWPOPTS="$JDWPOPTS,suspend=y"
        JDWPOPTS="$JDWPOPTS,address=$opt_port"

        # Legacy: it will run in interpreted mode instead of JIT, which will be slower.
        #stdjavaopt "-Xdebug"
        #stdjavaopt "-Xrunjdwp:$JDWPOPTS"

        # From Java 5.0+
        stdjavaopt "-agentlib:jdwp=$JDWPOPTS"

        if [ -f "classpath.debug.lst" ]; then
            classpath_lists+=(classpath.debug.lst)
        fi
    else
        if [ -f "clssspath.release.lst" ]; then
            classpath_lists+=(classpath.release.lst)
        fi
    fi

    # search lib/, modules/ if $classpath_list not defined.

    if [ "${#project_dirs[@]}" = 0 ]; then
        for d in '' '/..' '/../..' '/../../..'; do
            for lst in "${classpath_lists[@]}"; do
                if [ -f "$exe_dir$d/$lst" ]; then
                    _log2 "found project dir: $exe_dir$d"
                    project_dirs=("$exe_dir$d")
                    break 2
                fi
            done
        done
    fi

    # convert to absolute paths
        dirs=()
        for d in "${project_dirs[@]}"; do
            d=$(readlink -f "$d")
            _log2 "project dir: $d"
            dirs+=("$d")
        done
        project_dirs=("${dirs[@]}")

    stdjavaopt $JAVAOPTS

    if [ -z "$opt_assert" ]; then
        opt_assert=1
    fi
    if [ "$opt_assert" = 1 ]; then
        stdjavaopt -ea
    fi

    for pr in "${opt_props[@]}";    do stdjavaopt "-D$pr"; done
    for jo in "${opt_javaopts[@]}"; do alljavaopt "$jo";   done

    classpath=
        for projdir in "${project_dirs[@]}"; do
            add_cp "$projdir"/target/test-classes
            add_cp "$projdir"/target/classes

            n_valid_item=0

            for lst in "${classpath_lists[@]}"; do
                if [ -f "$projdir/$lst" ]; then
                    while read item; do
                        if [ "${item:0:1}" = / ]; then
                            item_full="$item"
                        else
                            item_full=$(path_join "$projdir" "$item")
                        fi
                        add_cp "$item_full"
                        ((n_valid_item++))
                    done <"$projdir/$lst"
                    break
                fi
            done

            if [ "$n_valid_item" = 0 ]; then
                for dir in "$projdir"/modules/*/; do
                    add_cp "$dir"
                done
                for jar in "$projdir"/lib/*.jar; do
                    add_cp "$jar"
                done
            fi
        done

        for item in "${cp_extraitems[@]}"; do
            add_cp "$item"
        done
        classpath="${classpath#:}"

    app_class=
    if [ "$opt_is_class" = 1 ]; then
        # Use ProgramLauncher to support applications not in `main(String[])` form.
        app_class=net.bodz.bas.program.ProgramLauncher # defined in bas-api
        appopts+=("$app_name")
    else
        app_classes=()
            if [ "${app_name/./}" != "${app_name}" ]; then # qualified.
                app_classes+=( "$app_name" )
            fi

            for item in "${cp_items[@]}"; do
                local -a v
                v=( $(scan_item "$item") )
                if [ ${#v[@]} != 0 ]; then
                    _log2 "found ${v[@]} in $item"
                    app_classes+=( "${v[@]}" )
                fi
                #app_classes+=( "${qname[@]}" )
            done

        n=${#app_classes[@]}
        if [ $n != 1 ]; then
            if [ $n = 0 ]; then
                if [ "$opt_fallback_to_launcher" != 1 ]; then
                    _error "No such app: $app_name"
                    exit 1
                fi
            else
                _error "Name ambiguous:"
                for a in "${app_classes[@]}"; do
                    _error "    $a"
                done
                exit 2
            fi
        fi
        app_class=$app_classes
    fi

    if [ -z "$app_class" ]; then
        _log2 "Can't find app in local fs. Fallback to use program launcher."
        app_class=net.bodz.bas.program.ProgramLauncher # defined in bas-api
        appopts+=("$app_name")
    fi

    TIME=
    if [ "$opt_timing" = 1 ]; then TIME=do_timing; fi

    if [ "$alias_mode" = symlink ]; then
        for rc in "$exe.rc"; do
            if [ -f "$rc" ]; then
                _log2 "source $rc"
                . "$rc"
            fi
        done
    fi

    RLWRAP=
    if [ -z "$opt_profiler" ]; then
        for rl in readline-editor rlwrap; do
            if which $rl >/dev/null; then
                RLWRAP=$rl
                break
            fi
        done
    fi

    cp_args=$(mktemp --tmpdir=$opt_tmpdir --suffix=.opts java-XXXXXXXX)
        function rm_cp_args() {
            if [ "$opt_keep" = 1 ]; then return 0; fi
            _log2 "Remove $cp_args"
            rm -f "$cp_args"
        }
        trap rm_cp_args EXIT

        echo -n >$cp_args
        #for item in "${cp_items[@]}"; do
        fprint $cp_args "-cp"
        fprint $cp_args "$classpath"

    _log2 "Execute:$TIME $RLWRAP $JAVA @$cp_args ${javaopts[@]} $app_class ${appopts[@]} $*"
    cmdv=($TIME $RLWRAP $JAVA @"$cp_args" "${javaopts[@]}" "$app_class" "${appopts[@]}" "$@")
    if [ "$opt_codegen" = 1 ]; then
        case "$opt_codelang" in
        *)
            echo '#!/bin/sh'
            echo '    cp='

            if [ ${#cp_items[@]} != 0 ]; then
                echo
                echo '    add_cp() {'
                echo '        if test -n "$cp"; then cp="$cp:"; fi'
                echo '        cp="$cp:$1";'
                echo '    }'
                echo

                for a in "${cp_items[@]}"; do
                    echo "    add_cp \"$a\""
                done
            fi

            echo
            echo -n "    exec"
            for a in $TIME $RLWRAP $JAVA; do echo -n " \"$a\""; done
            echo " \\"

            if [ ${#javaopts[@]} != 0 ]; then
                echo -n "       "
                for a in "${javaopts[@]}"; do echo -n " \"$a\""; done
                echo " \\"
            fi

            if [ -n "$classpath" ]; then
                echo "        -cp \"\$cp\" \\"
            fi

            echo "        \"$app_class\" \\"

            if [ ${#appopts[@]} != 0 ]; then
                echo -n "       "
                for a in "${appopts[@]}"; do echo -n " \"$a\""; done
                echo " \\"
            fi

            if [ $# != 0 ]; then
                echo -n "       "
                for a in "$@"; do echo -n " \"$a\""; done
                echo " \\"
            fi

            echo "        \"\$@\""
            ;;
        esac
    else
        if [ "$opt_profiler" = 1 ]; then
            local script_pid=$$
            _log2 "script_pid=$script_pid"
            (
                sleepenh 0.01 >/dev/null
                #ps -f --ppid="$script_pid" #-Cjava
                while read _pid _tty _time _cmd; do
                    if [ "$_cmd" = java ]; then
                        _log1 "found the child java process $_pid. profiler on it."
                        profiler "$_pid"
                        exit 0
                    fi
                done < <( ps --no-header --ppid="$script_pid" )
                _error "not found the child java process to profiler"
            ) &
            exec-v "${cmdv[@]}"
        else
            exec-v "${cmdv[@]}"
        fi
    fi
}

function path_join() {
    local ctx="$1"
    local other="$2"
    ctx="${ctx%/}"
    while [ "${other:0:3}" = '../' ]; do
        local parent="${ctx%/*}"
        if [ "$parent" = "$ctx" ]; then # "."
            break
        fi
        ctx="$parent"
        other="${other#../}"
    done
    echo "$ctx/$other"
}

function profiler() {
    local pid="$1"
    local jprofiler_dir="$opt_jprofiler_opt"
    if [ -z "$jprofiler_dir" ]; then
        IFS=$'\n'
        for bin in $(find /opt/ -maxdepth 4 -name jprofiler); do
            if [ -x "$bin" ]; then
                local jprofiler_bin="$bin"
            fi
        done
        if [ -x "$bin" ]; then
            _log1 "found jprofiler bin: $jprofiler_bin"
        else
            quit "can't find jprofiler. specify one with --jprofiler-dir please."
        fi
        jprofiler_dir=${jprofiler_bin%/bin/jprofiler}
    fi

    for name in jpenable jpanalyze jpcontroller jpexport; do
        local -n var=${name}_bin
        var=${jprofiler_dir}/bin/$name
        if [ -x "$var" ]; then
            _log2 "found $name bin: $var"
        else
            quit "can't find $name."
        fi
    done
    
    local app_name="${PWD##*/}"
    local config_dir="$PWD"
    local config_file="$config_dir/$app_name.jprofilerConfig"
    jprofiler_mkconfig "$config_file" "$app_name"

    _log1 "JProfiler enable on java process(pid=$pid)"
    if ! $jpenable_bin --offline --pid="$pid" --config="$config_file"; then
        _error "failed to enable profiler agent on process $pid."
        _error "    maybe the process is already enabled? (error ignored)"
    fi

    local snapshot_file=$(mktemp --tmpdir=$opt_tmpdir \
        --suffix=.jps snapshot-XXXXXXXX)
    ln -snf $snapshot_file ./latest-snapshot.jps

    _log1 "Control the jprofiler agent, start recording CPU data and memory allocations."
    _log1 "    The snapshot file will be saved at $snapshot_file,"
    _log1 "    You can also access it with the shortcut ./latest-snapshot.jps"
    $jpcontroller_bin -n "$pid" << EOT
addBookmark "Startup"
startCPURecording true
startAllocRecording true
saveSnapshotOnExit $snapshot_file
EOT
}

function jprofiler_mkconfig() {
    local config_file="$1"
    local app_name="$2"

    _log1 "Generate jprofiler config file $config_file"
    echo -n > "$config_file"
    fprint $config_file "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
    fprint $config_file "<config version=\"12.0.2\">"
    fprint $config_file "  <sessions>"
    fprint $config_file "    <session id=\"200\" name=\"$app_name\" type=\"launch\" mainClass=\"$app_class\" methodCallRecordingType=\"instrumentation\" recordArrayAlloc=\"true\">"
    fprint $config_file "      <filters>"
    fprint $config_file "        <group type=\"exclusive\" name=\"Default excludes\" template=\"defaultExcludes\" />"
    fprint $config_file "      </filters>"
    fprint $config_file "      <classPath>"
	for item in "${cp_items[@]}"; do
        fprint $config_file "          <entry path=\"$item\" />"
    done
    fprint $config_file "      </classPath>"
    fprint $config_file "    </session>"
    fprint $config_file "  </sessions>"
    fprint $config_file "</config>"
}

function fprint() {
	local file="$1"
	shift
	echo "$*" >> $file
}

function scan_item() {
    local item="$1"
    local qname=()

    [ -e "$item" ] || return

    # find in programs
    if [ -d "$item" ]; then
        local programs="$item/META-INF/programs"
        if [ -f $programs ]; then
            _log3 "search entry $app_name in file $programs"
            # main bar = foo.Bar
            while IFS='= ' read _scope _key _cls; do
                _log4 "    scope $_scope, key $_key, cls $_cls"
                if [ "$_key" = "$app_name" ]; then
                    qname+=("$_cls")
                fi
            done <$programs
        fi
    elif [ "$opt_search_jars" = 1 ]; then
        _log2 "search META-INF/programs in $item ..."
        while IFS='= ' read _scope _key _cls; do
            _log4 "    scope $_scope, key $_key, cls $_cls"
            if [ "$_key" = "$app_name" ]; then
                qname+=("$_cls")
            fi
        done < <(unzip -p "$item" META-INF/programs 2>/dev/null)
    fi

    # find by simple classname
    if [ ${#qname[@]} = 0 ]; then
        if [ -d "$item" ]; then
            local item_len=${#item}
            _log3 "search $app_name.class in directory $item/"
            for a in $(find "$item" -iname "$app_name.class"); do
                a="${a[0]}"
                a=${a:item_len + 1}     # +1: trailing /
                a=${a%.class}
                a=${a//\//.}
                qname+=("$a")
            done
        elif [ "$opt_search_jars" = 1 ]; then
            _log2 "search $app_name.class in archive $item"
            local app_name_len=${#app_name}
            while read a; do
                a="${a%.class}"
                local char_before=${a: -app_name_len - 1:1}
                [ "$char_before" == '/' ] || continue
                a=${a//\//.}
                qname+=("$a")
            done < <(jar tf "$item" | grep "$app_name\.class")
        fi
    fi

    echoln "${qname[@]}"
}

function exec-v() {
    #echoli "$@"
    "$@"
}

function exec-bg() {
    #echoli "$@"
    "$@" &
}

function do_timing() {
    time "$@"
}

function add_cp() {
    local a
    for a in "$@"; do
        a=${a%/}
        local base="${a##*/}"
        local -n counter="cp_item_counter[$a]"

        if [ -z "$counter" ]; then
            counter=1
        else
            ((counter++))
            # already used.
            _log3 "    ignore($counter): $a"
            continue
        fi

        if [ -d "$a" ]; then
            _log3 "    add: $a/ (dir)"
            cp_dirs+=("$a")
        else
            _log3 "    add: $a"
        fi
        cp_items+=("$a")
        classpath="$classpath:$a"
    done
}

function dualboot() {
    if [ -L "$exe" ]; then
        local exe_name="${exe##*/}"
        case "$exe_name" in
            main|main.in)
                : ;;
            *)
                # wrapper: dualboot() source() caller
                # symlink: dualboot() caller
                if [ "${FUNCNAME[1]}" = source ]; then
                    alias_mode=wrapper
                    source_by="${BASH_SOURCE[2]}"
                    exe=$(readlink -f "$source_by")
                else
                    alias_mode=symlink
                    exe="${BASH_SOURCE[1]}"
                    app_name="${exe##*/}"
                fi
                exe_dir="${exe%/*}"
                [ "$exe_dir" = "$exe" ] && exe_dir=.
                ;;
        esac
    fi

    if [ "$alias_mode" = symlink ]; then
        local l_opts=()
        local r_opts=()

        local go=1
        while [ $go = 1 ]; do
            case "$1" in
                --quiet|--verbose)
                    l_opts+=("$1")
                    r_opts+=("$1")
                    ;;
                --debug)
                    l_opts+=("$1")
                    ;;
                --*)
                    go=0;;
                -*)
                    local len=${#1}
                    local xl=()
                    local xr=()
                    for ((i = 1; i < len; i++)); do
                        case "${1:i:1}" in
                            q) xl+=(--quiet); xr+=(--quiet);;
                            v) xl+=(--verbose); xr+=(--verbose);;
                            d) xl+=(--debug);;
                            *) go=0; break;;
                        esac
                    done
                    if [ $go = 1 ]; then
                        l_opts+=("${xl[@]}")
                        r_opts+=("${xr[@]}")
                        shift
                        continue
                    fi
                    ;;
                *)
                    go=0;;
            esac
            if [ $go = 1 ]; then
                l_opts+=("$1")
                r_opts+=("$1")
                shift
            fi
        done
        r_opts+=("$@")
        _log2 "main exe opts: ${l_opts[*]}"
        _log2 "application opts: ${r_opts[*]}"
        for opt in "${l_opts[@]}"; do
            case "$opt" in
                --quiet)
                    ((LOGLEVEL--));;
                --verbose)
                    ((LOGLEVEL++));;
                --debug)
                    opt_debug=1;;
            esac
        done
        main "${r_opts[@]}"
    else
        boot "$@"
    fi
}

dualboot "$@"
