#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PACKAGE:=@PACKAGE@}
    : ${PROGRAM_TITLE:=Java application launcher for Maven projects}
    : ${PROGRAM_SYNTAX:=[OPTIONS] [--] <app-name> [app-options...]}

    : ${JAVA:=java}
    JAVA_NAME=${java##*/}

    # The encoding can be 'ANSI_X3.4-1968' when not specified.
    : ${JAVAOPTS:=-Dsun.jnu.encoding=utf-8 -Dfile.encoding=utf-8}

    javaopts=()
    appopts=()

    . shlib-import cliboot
    option -a --assert                  "Enable assert"
    option -A --no-assert               "Disable assert"
    option -c --class                   "Use FQCN for app-name, don't use program launcher"
    option -d --debug                   "Enable debug mode"
    option -D --property =key=value     "Specify system property, the same as -O -Dkey=value"
    option -O --java-opt =OptionSpec    "Add java option, eg. -O -Dfoo=bar or -O-Dfoo=bar"
    option -g --codegen                 "Generate the command script, don't run the app"
    option -L --lang =TYPE              "script langauge, default sh"
    option -j --search-jars             "Search program aliases in jars"
    option -p --port =PORT              "Specify debug (JDWP) port, default 8000"
    option -P --profiler                "Run profiler for the app"
    option -r --project-dir =DIR        "Specify the project dir"
    option -t --timing                  "Measure how long the program has been running"
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    alias_mode=

    classpath_lists=(classpath.lst)

    exe="$0"
    exe_dir=.
    app_name=

    opt_assert=
    opt_project_dir=.
    opt_class=0
    opt_debug=
    opt_codegen=
    opt_codelang=sh
    opt_search_jars=
    opt_port=8000
    opt_profiler=
    opt_timing=

    opt_javaopts=()
    opt_props=()

    shopt -s nullglob

function setopt() {
    case "$1" in
        -a|--assert)
            opt_assert=1;;
        -A|--no-assert)
            opt_assert=0;;
        -c|--class)
            opt_class=1;;
        -d|--debug)
            opt_debug=1;;
        -D|--property)
            opt_props+=("$2");;
        -r|--project-dir)
            opt_project_dir="$2";;
        -g|--codegen)
            opt_codegen=1;;
        -L|--lang)
            opt_codelang="$2";;
        -s|--search-jars)
            opt_search_jars=1;;
        -t|--timing)
            opt_timing=1;;
        -O|--java-opt)
            opt_javaopts+=("$2");;
        -p|--jdwp-port)
            opt_port=$2;;
        -P|--profiler)
            opt_profiler=1;;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function stdjavaopt() {
    if [ "$JAVA_NAME" = java ]; then
        javaopts=("${javaopts[@]}" "$@")
    fi
}

function alljavaopt() {
    javaopts=("${javaopts[@]}" "$@")
}

function main() {
    _log2 "alias mode: $alias_mode"
    if [ -z "$app_name" ]; then
        if [ -z "$1" ]; then
            echo "App isn't specified." >&2
            exit 1
        fi

        app_name="$1"
        shift

        if [ "${app_name/./}" != "$app" ]; then
            opt_class=1
        fi
    fi
    _log2 "exe: $exe"
    _log2 "exe dir: $exe_dir"
    _log2 "app name: $app_name"

    if [ "$opt_debug" = 1 ]; then
        JDWPOPTS="transport=dt_socket"
        JDWPOPTS="$JDWPOPTS,server=y"
        JDWPOPTS="$JDWPOPTS,suspend=y"
        JDWPOPTS="$JDWPOPTS,address=$opt_port"

        # Legacy: it will run in interpreted mode instead of JIT, which will be slower.
        #stdjavaopt "-Xdebug"
        #stdjavaopt "-Xrunjdwp:$JDWPOPTS"

        # From Java 5.0+
        stdjavaopt "-agentlib:jdwp=$JDWPOPTS"

        classpath_lists=(classpath.debug.lst classpath.lst)
    fi

    classpath_list=
    for lst in "${classpath_lists[@]}"; do
        if [ -f "$lst" ]; then
            classpath_list="$lst"
            break
        fi
    done
    # search lib/, modules/ if $classpath_list not defined.

    if [ "$opt_project_dir" = . ]; then
        for d in '' '/..' '/../..' '/../../..'; do
            if [ -f "$exe_dir$d/$classpath_list" ]; then
                _log2 "found project dir: $exe_dir$d"
                opt_project_dir="$exe_dir$d"
                break
            fi
        done
    fi
    opt_project_dir=$(readlink -f "$opt_project_dir")
    _log2 "project dir: $opt_project_dir"

    stdjavaopt $JAVAOPTS

    if [ -z "$opt_assert" ]; then
        opt_assert=1
    fi
    if [ "$opt_assert" = 1 ]; then
        stdjavaopt -ea
    fi

    for pr in "${opt_props[@]}";    do stdjavaopt "-D$pr"; done
    for jo in "${opt_javaopts[@]}"; do alljavaopt "$jo";   done

    classpath=
    classpath_items=()
    classdirs=()
        add_cp "$opt_project_dir"/target/test-classes
        add_cp "$opt_project_dir"/target/classes
        if [ -f "$opt_project_dir/$classpath_list" ]; then
            while read item; do
                if [ "${item:0:1}" = / ]; then
                    item_full="$item"
                else
                    item_full="$opt_project_dir/$item"
                fi
                add_cp "$item_full"
            done <"$opt_project_dir/$classpath_list"
        else
            for dir in "$opt_project_dir"/modules/*/; do
                add_cp "$dir"
            done
            for jar in "$opt_project_dir"/lib/*.jar; do
                add_cp "$jar"
            done
        fi
        classpath="${classpath#:}"

    if [ "$opt_class" != 1 ]; then
        # Defined in bas-api
        appcls=net.bodz.bas.program.ProgramLauncher
        appopts+=("$app_name")
    else
        appcls=()
            if [ "${app_name/./}" != "${app_name}" ]; then # qualified.
                appcls+=( "$app_name" )
            fi

            for item in "${classpath_items[@]}"; do
                appcls+=( $(scan_item "$item") )
                #appcls+=( "${qname[@]}" )
            done

        n=${#appcls[@]}
        if [ $n != 1 ]; then
            if [ $n = 0 ]; then
                _error "No such app: $app_name"
            else
                _error "Name ambiguous:"
                for a in "${appcls[@]}"; do
                    _error "    $a"
                done
            fi
            exit 1
        fi
    fi

    TIME=
    if [ "$opt_timing" = 1 ]; then TIME=do_timing; fi

    if [ "$alias_mode" = symlink ]; then
        for rc in "$exe.rc"; do
            if [ -f "$rc" ]; then
                _log2 "source $rc"
                . "$rc"
            fi
        done
    fi

    RLWRAP=
    for rl in readline-editor rlwrap; do
        if which $rl >/dev/null; then
            RLWRAP=$rl
            break
        fi
    done

    _log2 "Execute:$TIME $RLWRAP $JAVA -cp ... ${javaopts[@]} $appcls ${appopts[@]} $*"
    cmdv=($TIME $RLWRAP $JAVA -cp "$classpath" "${javaopts[@]}" "$appcls" "${appopts[@]}" "$@")
    if [ "$opt_codegen" = 1 ]; then
        case "$opt_codelang" in
        *)
            echo '#!/bin/sh'
            echo '    cp='

            if [ ${#classpath_items[@]} != 0 ]; then
                echo
                echo '    add_cp() {'
                echo '        if test -n "$cp"; then cp="$cp:"; fi'
                echo '        cp="$cp:$1";'
                echo '    }'
                echo

                for a in "${classpath_items[@]}"; do
                    echo "    add_cp \"$a\""
                done
            fi

            echo
            echo -n "    exec"
            for a in $TIME $RLWRAP $JAVA; do echo -n " \"$a\""; done
            echo " \\"

            if [ ${#javaopts[@]} != 0 ]; then
                echo -n "       "
                for a in "${javaopts[@]}"; do echo -n " \"$a\""; done
                echo " \\"
            fi

            if [ -n "$classpath" ]; then
                echo "        -cp \"\$cp\" \\"
            fi

            echo "        \"$appcls\" \\"

            if [ ${#appopts[@]} != 0 ]; then
                echo -n "       "
                for a in "${appopts[@]}"; do echo -n " \"$a\""; done
                echo " \\"
            fi

            if [ $# != 0 ]; then
                echo -n "       "
                for a in "$@"; do echo -n " \"$a\""; done
                echo " \\"
            fi

            echo "        \"\$@\""
            ;;
        esac
    else
        exec-v "${cmdv[@]}"
    fi
}

function scan_item() {
    local item="$1"
    local qname=()

    [ -e "$item" ] || return

    # find in programs
    if [ -d "$item" ]; then
        local programs="$item/META-INF/programs"
        if [ -f $programs ]; then
            while IFS='= ' read _key _scope _cls; do
                if [ "$_key" = "$app_name" ]; then
                    qname+=("$_cls")
                fi
            done <$programs
        fi
    elif [ "$opt_search_jars" = 1 ]; then
        _log2 "search META-INF/programs in $item ..."
        while IFS='= ' read _key _scope _cls; do
            if [ "$_key" = "$app_name" ]; then
                qname+=("$_cls")
            fi
        done < <(unzip -p "$item" META-INF/programs 2>/dev/null)
    fi

    # find by simple classname
    if [ ${#qname[@]} = 0 ]; then
        if [ -d "$item" ]; then
            local item_len=${#item}
            for a in $(find "$item" -iname "$app_name.class"); do
                a="${a[0]}"
                a=${a:item_len + 1}     # +1: trailing /
                a=${a%.class}
                a=${a//\//.}
                qname+=("$a")
            done
        elif [ "$opt_search_jars" = 1 ]; then
            _log2 "search $app_name.class in $item ..."
            local app_name_len=${#app_name}
            while read a; do
                a="${a%.class}"
                local char_before=${a: -app_name_len - 1:1}
                [ "$char_before" == '/' ] || continue
                a=${a//\//.}
                qname+=("$a")
            done < <(jar tf "$item" | grep "$app_name\.class")
        fi
    fi

    echoln "${qname[@]}"
}

function exec-v() {
    #echoli "$@"
    "$@"
}

function do_timing() {
    time "$@"
}

function add_cp() {
    local a
    for a in "$@"; do
        _log2 "add-classpath: $a"
        classpath="$classpath:$a"
        classpath_items+=("$a")

        if [ -d "$a" ]; then
            classdirs+=("$a")
        fi
    done
}

function dualboot() {
    if [ -L "$exe" ]; then
        local exe_name="${exe##*/}"
        case "$exe_name" in
            main|main.in)
                : ;;
            *)
                # wrapper: dualboot() source() caller
                # symlink: dualboot() caller
                if [ "${FUNCNAME[1]}" = source ]; then
                    alias_mode=wrapper
                    source_by="${BASH_SOURCE[2]}"
                    exe=$(readlink -f "$source_by")
                else
                    alias_mode=symlink
                    exe="${BASH_SOURCE[1]}"
                    app_name="${exe##*/}"
                fi
                exe_dir="${exe%/*}"
                [ "$exe_dir" = "$exe" ] && exe_dir=.
                ;;
        esac
    fi

    if [ "$alias_mode" = symlink ]; then
        local l_opts=()
        local r_opts=()

        local go=1
        while [ $go = 1 ]; do
            case "$1" in
                --quiet|--verbose)
                    l_opts+=("$1")
                    r_opts+=("$1")
                    ;;
                --debug)
                    l_opts+=("$1")
                    ;;
                --*)
                    go=0;;
                -*)
                    local len=${#1}
                    local xl=()
                    local xr=()
                    for ((i = 1; i < len; i++)); do
                        case "${1:i:1}" in
                            q) xl+=(--quiet); xr+=(--quiet);;
                            v) xl+=(--verbose); xr+=(--verbose);;
                            d) xl+=(--debug);;
                            *) go=0; break;;
                        esac
                    done
                    if [ $go = 1 ]; then
                        l_opts+=("${xl[@]}")
                        r_opts+=("${xr[@]}")
                        shift
                        continue
                    fi
                    ;;
                *)
                    go=0;;
            esac
            if [ $go = 1 ]; then
                l_opts+=("$1")
                r_opts+=("$1")
                shift
            fi
        done
        r_opts+=("$@")
        _log2 "main exe opts: ${l_opts[*]}"
        _log2 "application opts: ${r_opts[*]}"
        for opt in "${l_opts[@]}"; do
            case "$opt" in
                --quiet)
                    ((LOGLEVEL--));;
                --verbose)
                    ((LOGLEVEL++));;
                --debug)
                    opt_debug=1;;
            esac
        done
        main "${r_opts[@]}"
    else
        boot "$@"
    fi
}

dualboot "$@"
