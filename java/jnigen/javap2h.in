#!/usr/bin/perl

=head1 NAME

javap2h - 
=cut
use strict;
use vars qw($LOGNAME $LOGLEVEL);
use cmt::log(2);
    $LOGNAME    = 'javap2h'; # $0 =~ /([^\/\\.]+)(?:\.\w+)*$/;
use cmt::vcs('parse_id');
    my %RCSID   = parse_id('$Id: - @VERSION@ @DATE@ @TIME@ - $');
use Getopt::Long;
    Getopt::Long::Configure('gnu_getopt');
use IO::Handle;
use String::CamelCase('decamelize');

sub _main; sub _version; sub _help;

    my $outdir = '.';
    
sub _boot {
    GetOptions('q|quiet'        => sub { $LOGLEVEL-- },
               'v|verbose'      => sub { $LOGLEVEL++ },
               'version'        => sub { _version; exit 0 },
               'h|help'         => sub { _help; exit 0 },
               'O|outdir=s'     => \$outdir,
               )
        or exit(1);
    _main;
}

=head1 SYNOPSIS

B<javap2h>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<...the rest of arguments...> ]>

=head1 DESCRIPTION

B<javap2h> is a WHAT used for WHAT. It HOW-WORKS.

BACKGROUND-PROBLEM.

HOW-javap2h-RESOLVES.

=head1 OPTIONS

=over 8

=item B<-m> | B<--my-option>

...

=item B<-q> | B<--quiet>

Repeat this option to suppress unimportant information to display.

=item B<-v> | B<--verbose>

Repeat this option to display more detailed information.

=item B<-h> | B<--help>

Display a breif help page and exit(0).

=item B<--version>

Display a short version information and exit(0).

=back

=head1 EXAMPLES

=over 4

=item Show help

    javap2h --help

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    &_version;
    print "\nSyntax: \n    $0 [OPTION] [--] ...\n", <<'EOM';

Common options:
    -q, --quiet             Repeat to get less info
    -v, --verbose           Repeat to get more info
    -h, --help              Show this help page
        --version           Print the version info
EOM
}

exit (_boot or 0);

#my OUT;
my $fqcn;
my $id;
my $methodName;
my $METHOD_NAME;

sub _main {
    while (<>) {
        if (/^Compiled from "(.*)"/) {
            flush_file();
            my ($java_file) = $1;
            my $h_file = $java_file;
            $h_file =~ s/\.java$/-callbacks.h/;
            my $outfile = "$outdir/$h_file";
            open(OUT, ">$outfile") || die "failed to write to $outfile";
            print OUT "/* DO NOT EDIT THIS FILE - it is machine generated */\n";
            next;
        }
        
        if (/\bclass (\S+)/) {
            flush_class();
            $fqcn = $1;
            $id = $fqcn;
            $id =~ s/\./_/g;
            print OUT "\n";
            print OUT "/* Header for class $fqcn */\n";
            print OUT "\n";
            print OUT "#ifndef _Callbacks_$id\n";
            print OUT "#define _Callbacks_$id\n";
            next;
        }
        
        if (/^ERROR:/) {
            print STDERR $_;
            next;
        }
        
        chop;
        
        if (/^.*\s+([^.\s]+)\(.*\)/) {
            ($methodName) = ($1);
            $METHOD_NAME = uc decamelize $methodName;
            print OUT "\n";
            print OUT "    /* $_ */\n";
            print OUT "    #define ${METHOD_NAME}_NAME \"$methodName\"\n";
        }
        
        if (defined $methodName) {
            if (/^\s+Signature:\s+(.+)$/) {
                my ($sig) = ($1);
                print OUT "    #define ${METHOD_NAME}_SIGNATURE \"$sig\"\n";
            }

            if (/^\s+descriptor:\s+(.+)$/) {
                my ($sig) = ($1);
                print OUT "    #define ${METHOD_NAME}_SIGNATURE \"$sig\"\n";
            }
        }
    }
    flush_file();
    
    return 0;
}

sub flush_file() {
    if (OUT->opened()) {
        flush_class();
        close OUT;
    }
}

sub flush_class() {
    if (defined $id) {
        print OUT "\n";
        print OUT "#endif //_Callbacks_$id\n";
        $fqcn = $id = undef;
        $methodName = $METHOD_NAME = undef;
    }
}

=head1 DIAGNOSTICS

(No Information)

=cut
# (HELPER FUNCTIONS)

=head1 HACKING

(No Information)

=cut
# (MODULE FUNCTIONS)

=head1 HISTORY

=over

=item 0.x

The initial version.

=back

=cut
sub _version {
    print "[$LOGNAME]  \n";
    print "Written by Lenik,  Version 0.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"Perl_simple_cli_program_template">

=head1 AUTHOR

Lenik (谢继雷) <lenik (at) bodz.net>

=cut
