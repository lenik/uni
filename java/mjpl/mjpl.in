#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PROGRAM_TITLE:=Modularized Java Program Launcher}
    : ${PROGRAM_SYNTAX:=[OPTIONS] [--] main-class|alias ARGS...}

    . shlib-import cliboot
    option -G --group-id=ID "Specify the group id"
    option -A --artifact-id=ID "Specify the artifact id"
    option -V --artifact-ver=VER "Specify the artifact version"
    option    --heuristic   "Use non-standard config of Maven"
    option -R --repodir=DIR "Specify system m2 repository dir, default /usr/share/maven-repo"
    option -q --quiet       "Repeat to get less info"
    option -v --verbose     "Repeat to get more info"
    option -h --help        "Show this help page"
    option    --version     "Print the version info"

    shopt -s nullglob

    heuristic=

    # Main project
    group_id=
    artifact_id=
    artifact_ver=

    rootdir=
    repodirs=()
    repodirn=0
    declare -A modules=()

    declare -A dver
    declare -A dscope
    dlist=()
    dlistn=0

function setopt() {
    case "$1" in
        -G|--group-id)
            group_id="$2";;
        -A|--artifact-id)
            artifact_id="$2";;
        -V|--artifact-ver)
            artifact_ver="$2";;
        --heuristic)
            heuristic=1;;
        -R|--repodir)
            m2repodir="$2";;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    maven_init

    [ -d "$localrepodir" ] && repodirs[repodirn++]="$localrepodir"
    [ -d "$m2repodir" ]    && repodirs[repodirn++]="$m2repodir"

    # 1. get dep list
    # 2. java -cp DEP-LIST net...MjplLauncher "$@"

    if [ -f pom.xml ]; then
        load_pom pom.xml
    fi

    _log2 "Root-Dir: $rootdir"
    scan_modules "$rootdir"

    dep_expand "${dlist[@]}"
    #dlist=( $(dep_expand "${dlist[@]}") )
    #echo "Dependencies:"
    #echoli "${dlist[@]}"
}

function maven_init() {
    MAVEN_HOME=/usr/share/maven

    sysm2confdir=
    if [ -f /etc/maven/m2.conf ]; then
        sysm2confdir="/etc/maven"
    elif [ -f /etc/maven2/m2.conf ]; then
        sysm2confdir="/etc/maven2"
    else
        sysm2confdir="/etc/maven"
    fi

    if [ -f "$sysm2confdir/m2.conf" ]; then
        m2conf_file="$sysm2confdir/m2.conf"
        while read _set _maven_home _default _expr; do
            [ "$_set" = 'set' ] || continue
            [ "$_maven_home" = "maven.home" ] || continue
            [ "$_default" = "default" ] || continue
            _expr="${_expr//\${user.home}/$HOME}"
            if [ -d "$_expr" ]; then
                MAVEN_HOME="$_expr"
            fi
        done <"$m2conf_file"
    fi

    : ${m2userdir:=$HOME/.m2}
    : ${m2repodir:=/usr/share/maven-repo}

    localrepodir="$m2userdir/repository"
    if [ -f "$m2userdir/settings.xml" ]; then
        IFS== read _key _value < \
            <(xml2 <"$m2userdir/settings.xml" | grep '^/settings/localRepository=')
        if [ "$_key" = '/settings/localRepository' ]; then
            localrepodir="$_value"
        fi
    fi

    projects_file="$m2userdir/projects"
    modules_file="$m2userdir/modules.tab"
    depends_file="$m2userdir/depends.tab"
    rdepends_file="$m2userdir/rdepends.tab"

    _log2 "MAVEN_HOME=$MAVEN_HOME"
    _log2 "sysm2confdir=$sysm2confdir"
    _log2 "m2userdir=$m2userdir"
    _log2 "m2repodir=$m2repodir"
    _log2 "localrepodir=$localrepodir"
}

function load_pom() {
    local pom_xml="$1"
    local pom_dir="${pom_xml%/*}"
    if [ "$pom_dir" = "$pom_xml" ]; then
        pom_dir=.
    fi
    : ${rootdir:=$pom_dir}

    _log2 "Load pom $pom_xml"
    local _pp_set=
    local _pp_groupId=
    local _pp_artifactId=
    local _pp_version=

    local _groupId=
    local _artifactId=
    local _version=

    local _dd_set=
    local _dd_groupId=
    local _dd_artifactId=
    local _dd_version=
    local _dd_packaging=jar
    local _dd_scope=compile
    local _dm_set=

    local k v
    while IFS== read k v; do
        # echo " $k=$v"
        case "$k" in
            /project/parent/*)
                k="${k#/project/parent/}"
                case "$k" in
                    groupId)
                        _pp_groupId="$v"
                        : ${_groupId:=$v}
                        ;;
                    artifactId)
                        _pp_artifactId="$v";;
                    version)
                        _pp_version="$v"
                        : ${_version:=$v}
                        ;;
                esac
                _pp_set=1;;

            /project/groupId)
                _groupId="$v";;
            /project/artifactId)
                _artifactId="$v";;
            /project/version)
                _version="$v";;

            /project/dependencies/dependency/*|/project/dependencyManagement/dependencies/dependency/*)
                local _k="${k#/project/dependencies/dependency/}"
                if [ "$_k" = "$k" ]; then
                    _k="${k#/project/dependencyManagement/dependencies/dependency/}"
                    _dm_set=1
                else
                    _dd_set=1
                fi

                case "$_k" in
                    groupId)
                        _dd_groupId="$v";;
                    artifactId)
                        _dd_artifactId="$v";;
                    version)
                        case "$v" in
                            '${project.version}')
                                v="$_version";;
                        esac
                        _dd_version="$v";;
                    packaging)
                        _dd_packaging="$v";;
                    scope)
                        _dd_scope="$v";;
                esac
                ;;

            *)
                commit_element "$pom_dir";;
        esac
    done < <(xml2 <"$pom_xml")
    commit_element "$pom_dir"
}

function pom_info() {
    local _pom_xml="$1"
    local k v
    __groupId=
    __artifactId=
    __version=
    __packaging=jar
    while IFS== read k v; do
        case "$k" in
            /project/parent/groupId)
                : ${__groupId:=$v};;
            /project/parent/version)
                : ${__version:=$v};;
            /project/groupId)
                __groupId="$v";;
            /project/artifactId)
                __artifactId="$v";;
            /project/version)
                __version="$v";;
            /project/packaging)
                __packaging="$v";;
        esac
    done < <(xml2 <"$_pom_xml")
    # echo "  - groupId: $__groupId"
    # echo "  - artifactId: $__artifactId"
    # echo "  - version: $__version"
}

function commit_element() {
    if [ "$_pp_set" = 1 ]; then
        _log2 "Resolve parent pom $_pp_groupId:$_pp_artifactId:$_pp_version"
        _pp_set=
        local _pom_xml="$pom_dir/../pom.xml"
        local _pom_load=

        if [ -f "$_pom_xml" ]; then
            local __groupId
            local __artifactId
            local __version
            pom_info "$_pom_xml"

            if [ "$_pp_groupId" = "$__groupId" ] &&
                    [ "$_pp_artifactId" = "$__artifactId" ] &&
                    [ "$_pp_version" = "$__version" ]; then
                _log2 "Resolve parent pom in the parent directory"
                rootdir=
                load_pom "$_pom_xml"
                _pp_load=1
            fi
        fi

        if [ -z "$_pp_load" ]; then
            _log2 "Resolve parent pom in repository dirs"
            _pom_xml=$(find_in_repos "$_pp_groupId" "$_pp_artifactId" "$_pp_version" pom) \
                || quit "Can't resolve parent pom: $_pp_groupId:$_pp_artifactId:$_pp_version"
            load_pom "$_pom_xml"
        fi
        _pp_groupId=
        _pp_artifactId=
        _pp_version=
    fi

    if [ "$_dd_set" = 1 ]; then
        local _ddid="$_dd_groupId:$_dd_artifactId"
        _log2 "Add $_dd_scope dependency: $_ddid:$_dd_version:$_dd_packaging"
        _dd_set=

        if [ -n "$_dd_version" ]; then
            dver[$_ddid]="$_dd_version"
        fi

        if [ -z "${dscope[$_ddid]}" ]; then
            dscope[$_ddid]="$_dd_scope"
            dlist[dlistn++]="$_ddid"
        fi

        _dd_groupId=
        _dd_artifactId=
        _dd_version=
        _dd_packaging=jar
        _dd_scope=compile
    fi

    if [ "$_dm_set" = 1 ]; then
        local _ddid="$_dd_groupId:$_dd_artifactId"
        _log2 "Dependency Management: $_ddid = $_dd_version"
        _dm_set=

        dver[$_ddid]="$_dd_version"
        _dd_groupId=
        _dd_artifactId=
        _dd_version=
    fi
}

function find_in_repos() {
    local groupId="$1"
    local artifactId="$2"
    local version="$3"
    local packaging="$4"

    _log2 "Finding $groupId:$artifactId:$version:$packaging in repositories"

    local repodir
    local f
    for repodir in "${repodirs[@]}"; do
        # We don't expand -SNAPSHOT version to datetime...
        for f in \
            "$repodir/${groupId//.//}/$artifactId/$version/$artifactId-$version.$packaging" \
            "$repodir/$artifactId-$version.$packaging" \
            "$repodir/$artifactId.$packaging"
        do
            _log2 "  Find for $f"
            if [ -f "$f" ]; then
                _log2 "  Found."
                echo "$f"
                return 0
            fi
        done
    done
    _log2 "  Not found"
    return 1
}

function scan_modules() {
    local dir="$1"
    if [ -f "$dir/pom.xml" ]; then
        pom_info "$dir/pom.xml"
        modules[$__groupId:$__artifactId]="$dir"
    fi

    local sub
    for sub in "$dir"/*/; do
        sub="${sub%/}"
        if [ -f "$sub/pom.xml" ]; then
            scan_modules "$sub"
        fi
    done
}

function dep_expand() {
    local dep
    for dep in "$@"; do
        local gid="${dep%%:*}"
        local aid="${dep#*:}"
        local ver="${dver[$gid:$aid]}"
        if [ -z "$ver" ]; then
            quit "Dependency version is unknown: $gid:$aid"
        fi

        echo $gid:$aid == $ver

        local _pom_xml=$(find_in_repos "$gid" "$aid" "$ver" pom) \
            || quit "Can't resolve the pom for dependency $gid:$aid"

        # TODO ...
    done
}

boot "$@"

# scope:
#               compile     provided    runtime     test
# compile       *           -           runtime     -
# provided      provided    -           provided    -
# runtime       runtime     -           runtime     -
# test          test        -           test        -
