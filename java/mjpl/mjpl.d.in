#!/usr/bin/dprog -ig
module mjpl;

import std.c.stdlib : exit;
import std.algorithm : sort;
import std.conv : to;
import std.file;
import std.getopt;
import std.path : baseName;
import std.process;
import std.stdio : writeln, writefln;
import std.stream : File, FileMode;
import std.string;
import std.zip;

pragma(lib, "bas-d");
import lenik.bas.file : canonicalize;
import lenik.bas.log;
// import lenik.bas.program;

import lenik.uni.mjpl.m2env : m2env;             /* @link */
import lenik.uni.mjpl.pom : Pom, Scope, manager; /* @link */

mixin Log!("mjpl");

string IPROGRAM         = "net.bodz.bas.program.IProgram";
string SRCDIRS_MJPL     = ".srcdirs.mjpl";
string CLASSPATH_MAIN   = ".classpath.main";;
string CLASSPATH_TEST   = ".classpath.test";;

/* TODO:

  - using scope to determine which dependencies are required.
  
  - implement inclusion/exclusions in the dependencies/management

  - getopt for java/extra options

  - Main-Class aliases in manifest or somewhere.
  
*/
Pom project;
string[] srcdirs;
string[] classpaths;

int main(string[] argv) {
    string project_file;
    bool runApp = true;

    bool opt_refresh;
    bool opt_test;
    bool opt_dump;
    bool list_deps;
    bool list_programs;
    bool list_services;
    string list_service_t = null;
    
    int i;
 L: for (i = 1; i < argv.length; i++) {
        string arg = argv[i];
        bool more = i < argv.length - 1;
        
        if (arg.startsWith("-")) {
            switch (arg) {
            case "-B": case "--refresh":
                opt_refresh = true;
                continue;
                
            case "-L": case "--libdir":
                if (!more) break;
                m2env.repodirs ~= argv[++i];
                continue;
                
            case "-p": case "--pom":
                if (!more) break;
                project_file = argv[++i];
                continue;
                
            case "-s": case "--srcdir":
                if (!more) break;
                srcdirs ~= argv[++i];
                continue;

            case "-t": case "--test":
                opt_test = true;
                continue;
                                
            case "--dump":
                opt_dump = true;
                continue;

            case "-l": case "--list":
                list_programs = true;
                runApp = false;
                continue;
                
            case "--deps":
                list_deps = true;
                runApp = false;
                continue;
                
            case "--services":
                list_services = true;
                if (more) list_service_t = argv[++i];
                runApp = false;
                continue;

            case "-q": case "--quiet":
                maxLogLevel--;
                continue;

            case "-v": case  "--verbose":
                maxLogLevel++;
                continue;

            case "-h": case "--help":
                showHelp(); 
                return 0;
            
            case "--version":
                showVersion(); 
                return 0;

            case "--":
                i++;
                break L;
                
            default:
            }
            log.err("Bad option or missing arg: " ~ arg);
            return -1;
        } /* arg: -* */
        break;                          /* stop at the first non-option. */
    }
    argv = argv[i..$];

    if (project_file is null)
        project_file = "pom.xml";        /* find pom.xml in current dir */
    
    if (! exists(project_file)) {
        log.err("No such file: %s", project_file);
        return -1;
    }

    project_file = canonicalize(project_file);
    log.info("Load project pom: %s", project_file);

    project = manager.resolveFile(project_file);
    if (project is null) {
        log.err("Project is unknown.");
        return -1;
    }
    
    string classpath_cfg = project.dir ~ "/" ~
        (opt_test ? CLASSPATH_TEST : CLASSPATH_MAIN);
    if (exists(classpath_cfg) && ! opt_refresh) {
        log.info("Load cache: %s", classpath_cfg);
        string s = readText(classpath_cfg);
        foreach (ln; splitLines(s))
            classpaths ~= ln.strip();
    } else {
        classpaths = collectClasspaths(list_deps, opt_test);

        log.info("Write cache: %s", classpath_cfg);
        File f = new File(classpath_cfg, FileMode.OutNew);
        foreach (cp; classpaths)
            f.writeLine(cp);
        f.close();
    }
    
    if (opt_dump) {
        project.dump();
        return 0;
    }

    string[][string] providersMap;
    string[string] programNames;
    string[string] programTypes;
    string[string] tailmap;
    scanImpls(list_service_t, providersMap,
              programNames, programTypes, tailmap);
    
    if (list_services) {
        writeln("Services: ");
        foreach (k; sort(providersMap.keys)) {
                writeln("K: " ~ k);
            auto providers = providersMap[k];
            if (providers.length == 0)  /* skip empty list */
                continue;
            if (list_service_t is null) /* show interface only in all-mode */
                writeln("--o " ~ k);
            foreach (provider; providers)
                writeln("        " ~ provider);
        }
    }

    /* Register IProgram(s) using their simple names. */
    if (IPROGRAM in providersMap)
        foreach (fqcn; providersMap[IPROGRAM]) {
            auto lastDot = fqcn.lastIndexOf('.');
            string tail;
            if (lastDot == -1)
                tail = cast(string) fqcn;
            else
                tail = cast(string) fqcn[lastDot+1..$];
            string alias_ = tail.toLower();

            if (alias_ !in programNames)
                programNames[alias_] = fqcn;
        }
    
    if (list_programs) {
        writeln("Programs:  ");
        string[] aliases = programNames.keys;
        sort(aliases);
        foreach (k; aliases)
            writefln("    %s: %s", k, programNames[k]);
    }
    
    if (! runApp)
        return 0;
    if (argv.length == 0) {
        log.err("Program name isn't specified.");
        return -1;
    }
    
    string program = argv[0];
    argv = argv[1..$];                  /* shift argv */
    if (program in programNames)
        program = programNames[program];
    
    string JAVA = "java";               /* which java... */
    string CLASSPATH = "";
    foreach (p; classpaths) {
        if (CLASSPATH.length != 0)
            CLASSPATH ~= ':';
        CLASSPATH ~= p;
    }
    
    string[] javaargs = [ JAVA, "-cp", CLASSPATH ];
    javaargs ~= program;
    javaargs ~= argv;

    log.info("Exec: %s", join(javaargs, " "));
    execvp(JAVA, javaargs);
    return -1;
}

string[] collectClasspaths(bool list_deps, bool test) {
    string[] classpaths;
    
    if (srcdirs.length == 0) {
        string srcdirs_cfg = project.dir ~ "/" ~ SRCDIRS_MJPL;
        if (exists(srcdirs_cfg)) {
            log.info("Load srcdirs config: %s", srcdirs_cfg);
            string s = readText(srcdirs_cfg);
            foreach (ln; splitLines(s))
                srcdirs ~= ln.strip();
        }
    }
    
    /* Preload local srcdirs */
    foreach (srcdir; srcdirs) {
        string file = srcdir ~ "/pom.xml";
        file = canonicalize(file);
        Pom pom = manager.resolveFile(file);
        manager.scanLocalModules(pom);
    }
    
    manager.scanLocalModules(project.localRoot);
    manager.loadDependencyPoms(project, true);
    
    /* Collect the dependencies. */
    auto deps = manager.collectDependencies(project, test);
    foreach (keyVer; deps) {
        if (list_deps)
            log.info("Dependency for %s", keyVer);
        
        auto split = keyVer.split(":");
        string groupId = split[0];
        string artifactId = split[1];
        string type = split[2];
        string version_ = split[3];
        // log.warn("DEP T=%s %s:%s V=%s", type, groupId, artifactId, version_);

        bool workDir = false;
        Pom dpom = manager.resolveId(groupId, artifactId, version_);

        if (dpom !is null) {            /* There is a pom.xml */
            string testClasses = dpom.dir ~ "/target/test-classes/";
            if (exists(testClasses)) {  /* (1) add test-classes first */
                workDir = true;
                bool included = false;

                // free mode
                // if (test) included = true;
                // strict mode

                if (type == "test-jar") included = true;

                if (included) {
                    classpaths ~= testClasses;
                    if (list_deps)
                        writeln(testClasses);
                }
            }

            string mainClasses = dpom.dir ~ "/target/classes/";
            if (exists(mainClasses)) {  /* (2) and then the main-classes */
                workDir = true;
                bool included = false;

                // strict mode
                if (type != "test-jar")
                    included = true;

                if (included) {
                    classpaths ~= mainClasses;
                    if (list_deps)
                        writeln(mainClasses);
                }
            }
        }
        
        if (! workDir) {                /* In the repo, without src. */
            string jar = m2env.resolve(groupId, artifactId, version_, "jar");
            if (jar is null || jar.length == 0) {
                log.err("M2env.resolve failed: %s", keyVer);
                continue;
            }
            classpaths ~= jar;
            if (list_deps)
                writeln(jar);
        }
    } /* for deps */
    
    return classpaths;
}

void scanImpls(string serviceType,
               ref string[][string] providersMap,
               ref string[string] programNames,
               ref string[string] programTypes,
               ref string[string] tailmap) {
    foreach (path; classpaths) {
        if (! exists(path)) {
            log.err("Non-existed classpath: %s.", path);
            continue;
        }
        
        if (isDir(path)) {
            log.info("DIR: %s", path);

            /* services in local dir */
            string servicesDir = path ~ "/META-INF/services";
            if (exists(servicesDir)) {
                foreach (e; dirEntries(servicesDir, SpanMode.shallow)) {
                    string fqcn = baseName(e.name);
                    if (serviceType is null || serviceType == fqcn) {
                        log.info("  Service %s", fqcn);
                        char[] content = cast(char[]) read(e.name);
                        auto list = parseServices(content);
                        providersMap[fqcn] ~= list;
                    }
                }
            }

            /* programs in local dir */
            string programsFile = path ~ "/META-INF/programs";
            if (exists(programsFile)) {
                char[] content = cast(char[]) read(programsFile);
                parsePrograms(content, programNames, programTypes);
            }
            
        } else {                        /* a jar/zip file */
            log.info("JAR: %s", path);
            
            void[] data = read(path);
            ZipArchive ar = new ZipArchive(data);
            
            foreach (e; ar.directory) {
                /* services in jar */
                if (e.name.startsWith("META-INF/services/")) {
                    string fqcn = e.name["META-INF/services/".length .. $];

                    /* skip dir entries */
                    if (fqcn.length == 0 || fqcn.indexOf('/') != -1)
                        continue;
                    
                    if (serviceType is null || serviceType == fqcn) {
                        log.info("  Service %s", fqcn);
                    
                        char[] content = cast(char[]) ar.expand(e);
                        auto list = parseServices(content);
                        providersMap[fqcn] ~= list;
                    }
                }

                /* programs in jar */
                if (e.name == "META-INF/programs") {
                    char[] content = cast(char[]) ar.expand(e);
                    parsePrograms(content, programNames, programTypes);
                }
            } /* for ar.directory */
        } /* if dir/jar */
    } /* for classpath */
}

string[] parseServices(char[] content) {
    string[] list;
    foreach (ln; content.split("\n")) {
        ln = ln.strip();
        if (ln.length == 0) /* skip empty lines */
            continue;

        log.dbg("    Service Provider %s", ln);
        list ~= cast(string) ln;
    }
    return list;
}

void parsePrograms(char[] content,
                   ref string[string] programNames,
                   ref string[string] programTypes) {
    foreach (ln; content.split("\n")) {
        ln = ln.strip();
        if (ln.length == 0) /* skip empty lines */
            continue;

        /* alias = runner fqcn */
        auto eq = ln.indexOf('=');
        string alias_ = cast(string) ln[0..eq].strip();
        string remain = cast(string) ln[eq+1..$].strip();

        auto spc = remain.indexOf(' ');
        string runner = cast(string) remain[0..spc].strip();
        string fqcn = cast(string) remain[spc+1..$].strip();

        programNames[alias_] = fqcn;
        programTypes[alias_] = runner;
    }
}

void showVersion() {
    writeln("Maven-based Java Application Launcher");
    writeln("Written by Lenik, Version: @VERSION@, Last updated at @DATE@");
}

void showHelp() {
    writeln("Usage: mjpl [OPTIONS] [--] <main-class or alias> [ARGS...]");
    writeln("Options:");
    writeln("    -B, --refresh       Discard any cache");
    writeln("    -L, --libdir=PATH   Where to search the libraries");
    writeln("    -p, --pom=FILE      Path of the project POM, default pom.xml");
    writeln("    -s, --srcdir=DIR    Add local src dir to the project path");
    writeln("        --dump          Dump the POM structure");
    writeln("    -l, --list          List application aliases");
    writeln("        --deps          List dependencies in full path");
    writeln("        --services[=T]  List service providers for T or all");
    writeln("    -t, --test          Include test scope dependencies");
    writeln("    -h, --help          Show this help page");
    writeln("    -q, --quiet         Repeat to get less info");
    writeln("    -v, --verbose       Repeat to get more info");
    writeln("    --version           Print the version info");
}
