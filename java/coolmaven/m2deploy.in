#!/bin/bash

    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PROGRAM_TITLE:="Deploy all jars under this directory"}
    : ${PROGRAM_SYNTAX:="[OPTIONS] [--] REPO-ID REPO-URL [file.jar ...]"}

    . shlib-import cliboot
    option -m --match=PATTERN   "Only file name with pattern"
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    opt_match=

function help_more() {
    echo "Available repositories for distribution: "
    echo "    lo                http://m2.local"
    echo "    seccareleases     http://m2.bee32.com/archiva/repository/internal"
    echo "    seccasnapshots    http://m2.bee32.com/archiva/repository/snapshots"
}

function setopt() {
    case "$1" in
        -m|--match)
            opt_match="$2";;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    if [ $# -lt 2 ]; then help; exit 1; fi

    repo_id="$1"
    repo_url="$2"
    shift 2

    if [ $# = 0 ]; then
        find . -name '*.jar' | while IFS='|' read jar; do
            _deploy "$jar"
        done
    else
        for jar in "$@"; do
            _deploy "$jar"
        done
    fi
}

function _deploy() {
    local jar="$1"

    if [ -n "$opt_match" ]; then
        if [ "${jar/$opt_match}" = "$jar" ]; then
            # not contained.
            continue
        else
            _log2 "Matched jar"
        fi
    fi

    local path="${jar#./}"
    local dir="${path%/*}"
    local base="${path##*/}"
    local name="${base%.jar}"

    if [ "$name" != "${name%-source}" ]; then
        _log2 "Skipped source jar"
        continue
    fi

    local group_id="${dir//\//.}"
    local artifact_id="${name%-*}"
    local version="${name##*-}"
    local packaging="${base##*.}"
    local generatePom=true

    _log1 "Deploy $jar ($group_id:$artifact_id:$version:$packaging) to $repo_id"

    cmd=( mvn deploy:deploy-file
        -DgroupId="$group_id"
        -DartifactId="$artifact_id"
        -Dversion="$version"
        -Dfile="$jar"
        -Dpackaging="$packaging"
        -DrepositoryId="$repo_id"
        -Durl="$repo_url" )
    _log2 "Execute ${cmd[@]}"
    "${cmd[@]}"

    sourcejar="$dir/$name-source.jar"
    if [ -f "$sourcejar" ]; then
        cmd=( mvn deploy:deploy-file
            -DgroupId="$group_id"
            -DartifactId="$artifact_id"
            -Dversion="$version"
            -Dfile="$sourcejar"
            -Dpackaging="java-source"
            -DgeneratePom="false"
            -DrepositoryId="$repo_id"
            -Durl="$repo_url" )
        _log2 "Execute ${cmd[@]}"
        "${cmd[@]}"
    fi
}

boot "$@"
