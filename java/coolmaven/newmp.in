#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PROGRAM_TITLE:="Create new Maven Project by archetype:generate"}
    : ${PROGRAM_SYNTAX:="[OPTIONS] [--] [ARCHETYPE-NAME] ARTIFACT-ID POM-NAME   (Use ARCHETYPE-NAME unless -A is specified)"}

    . shlib-import cliboot
    option -G --arch-group =STR     "GroupId of the archetype"
    option -A --arch-artifact =STR  "ArtifactId of the archetype"
    option -V --arch-version =STR   "Version of the archetype, default LATEST"
    option -g --target-group =STR   "GroupId of the generated project, default as parent"
    option -a --target-artifact =STD "ArtifactId of the generated project"
    option -w --target-version =STR "Version of the generated project"
    option -p --target-package =STR "The preferred package name of the generated project"
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    import loadpom

    ARCHS="@DESTDIR@@pkgdatadir@/archetypes"

    arch_groupid=
    arch_artifactid=
    arch_version=
    target_groupid=
    target_artifactid=
    target_version=0.0.0-SNAPSHOT
    target_package=

function setopt() {
    case "$1" in
        -G|--arch-group)
            arch_groupid=$2;;
        -A|--arch-artifact)
            arch_artifactid=$2;;
        -V|--arch-version)
            arch_version=$2;;
        -g|--target-group)
            target_groupid=$2;;
        -a|--target-artifact)
            target_artifactid=$2;;
        -w|--target-version)
            target_version=$2;;
        -p|--target-package)
            target_package=$2;;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function search_arch() {
    local keyw=$1
    matched=0
    match_gid=
    match_aid=
    match_ver=
    pref_gid=org.apache.maven.archetypes
    pref_only=0
    ambig=0
    sort_ver=/tmp/sort_ver.$$.$RANDOM
    while IFS=: read gid aid ver xxx; do
        if [ -n "$arch_groupid" ] && [ "$gid" != "$arch_groupid" ]; then
            continue
        fi
        if [ $pref_only = 1 ] && [ "$gid" != "$pref_gid" ]; then
            continue
        fi
        if [ "${aid/$keyw}" != "$aid" ]; then
            _log3 "Matching archetype: $gid:$aid:$ver:$xxx"
            if [ "$pref_gid" = "$gid" ]; then
                if [ $pref_only = 0 ]; then
                    _log2 "Restrict to pref-group"
                    rm -f $sort_ver
                    pref_only=1
                    matched=0
                    match_gid=
                    match_aid=
                    match_ver=
                    ambig=0
                fi
            fi
            if [ $matched = 0 ]; then
                match_gid=$gid
                match_aid=$aid
                match_ver=$ver
                matched=1
            else
                if [ $gid != $match_gid ] || [ $aid != $match_aid ]; then
                    if [ $ambig = 0 ]; then
                        echo Archetype keyword $keyw is ambiguous:
                        echo $match_gid:$match_aid:$match_ver
                    else
                        echo $gid:$aid:$ver
                    fi
                    ambig=1
                else
                    if [ ! -f $sort_ver ]; then
                        echo $match_ver >$sort_ver
                    fi
                    echo $ver >>$sort_ver
                fi
            fi

        fi
    done <$ARCHS

    if [ $ambig = 0 ]; then
        arch_groupid=$match_gid
        arch_artifactid=$match_aid
        if [ -z $arch_version ]; then
            if [ ! -f $sort_ver ]; then
                latest_ver=$match_ver
            else
                latest_ver=`sort --version-sort --reverse $sort_ver | head -1`
            fi
            arch_version=$latest_ver
        fi
    fi

    rm -f $sort_ver
    if [ $ambig = 1 ]; then
        exit 1
    fi
}

function main() {
    if [ -f pom.xml ]; then
        _log2 "Load parent"
        loadpom pom.xml 1
        set | grep '^parent_'
        exit 1
    fi

    if [ -z "$arch_artifactid" ]; then
        if [ $# -lt 1 ]; then
            echo "Archetype is not specified"
            exit 1
        fi
        _log2 "Search archetype using keyword $1"
        search_arch "$1"
        shift
    else
        if [ "$arch_groupid" ]; then
            echo "Archetype groupid must be specified along with arch-artifact"
            exit 1
        fi
    fi

    if [ $# -lt 1 ]; then
        echo "artifact-id isn't specified"
        exit 1
    fi
    target_artifactid="$1"
    shift

    mvnopts=()
    n=0
    if [ $LOGLEVEL -lt 1 ]; then
        mvnopts[n++]=-q
    fi

    mvnopts[n++]=archetype:generate
    mvnopts[n++]=-DinteractiveMode=false

    mvnopts[n++]=-DarchetypeGroupId=$arch_groupid
    mvnopts[n++]=-DarchetypeArtifactId=$arch_artifactid
    mvnopts[n++]=-DarchetypeVersion=$arch_version

    if [ -z "$target_groupid" ]; then
        if [ -n "$parent_group_id" ]; then
            target_groupid=$parent_group_id
        else
            target_groupid=com.example
        fi
    fi

    if [ -z "$target_version" ]; then
        target_version=0.0.1-SNAPSHOT
    fi

    if [ -z "$target_package" ]; then
        target_package=${target_groupid//[^a-zA-Z0-9_]/.}
    fi

    mvnopts[n++]=-DartifactId=$target_artifactid
    mvnopts[n++]=-DgroupId=$target_groupid
    mvnopts[n++]=-Dversion=$target_version
    mvnopts[n++]=-Dpackage=$target_package

    mvn "${mvnopts[@]}"

    pomfile="$target_artifactid/pom.xml"
    if [ -f "$pomfile" ]; then
        _log2 "Reformat $pomfile"
        xmlindent -w "$pomfile"
        rm -f "$pomfile~"
    fi

    if [ $# -gt 0 ]; then
        pomname="$1"
        tmpfile=`tempfile`
        _log2 "Set POM name to $pomname"
        xml2 <"$pomfile" \
            | sed -e "s|/project/name=.*|/project/name=$pomname|" \
            | 2xml \
            | xmlindent -f -nbe >$tmpfile # suppress nl before end-tag
        mv -f $tmpfile "$pomfile"
    fi
}

boot "$@"
