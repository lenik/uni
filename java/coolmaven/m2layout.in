#!/bin/bash
    . shlib-import cliboot

    RCSID='$Id: - @VERSION@ @DATE@ @TIME@ - $'
    short_opts="cChqv"
    long_opts="cascade,no-cascade,dry-run,help,quiet,verbose,version"

    dry_run=
    cascade=

function version() {
    parse_id "$RCSID"
    echo "[$BASENAME] Adjust the dir layout as the specified"
    echo "Written by Lenik, Version $rcs_rev, Last updated at $rcs_date"
}

function help() {
    version
    echo
    echo "Syntax: "
    echo "    $0 [OPTION] [--] ..."
    echo
    echo "Options: "
    echo "    -c, --cascade           Cascade poms"
    echo "    -C, --no-cascade        Don't cascade"
    echo "        --dry-run           Only show what to do"
    echo "    -q, --quiet             Repeat to get less info"
    echo "    -v, --verbose           Repeat to get more info"
    echo "    -h, --help              Show this help page"
    echo "        --version           Print the version info"
}

function setopt() {
    case "$1" in
        --dry-run)
            dry_run=1;;
        -c|--cascade)
            cascade=0;;
        -C|--no-cascade)
            cascade=1;;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function dry() {
    if [ "$dry_run" = 1 ]; then
        echo "$@"
    else
        "$@"
    fi
}

function main() {
    spec=LAYERS
    [ -n "$1" ]    && spec="$1"
    [ -f "$spec" ] || die "File not found: $spec"

    layer=
    while read name comments; do
        [ -z "$name" ] && continue
        [ "${name:0:1}" = '#' ] && continue

        if [ "${name: -1}" = '/' ]; then
            layer="${name%/}"
            continue
        fi

        from=(*/$name)
        case "${#from[@]}" in
        0)
            die "Not existed: $name";;
        1)
            from="${from%/*}"
            _log1 "Move $name from $from to $layer"
            ;;
        *)
            _log1 "$name is ambiguous: "
            for f in "${from[@]}"; do
                _log2 "    $f"
            done
            exit 1
            ;;
        esac

        [ "$from" = "$layer" ] && continue

        if [ ! -d "$layer" ]; then
            _log1 "Create directory $layer/"
            dry mkdir "$layer" || die "Failed to create"
        fi

        dry vcs mv $from/$name $layer/$name

    done <"$spec"

    specdir="${spec%/*}"

    _log1 "POM-Cascade"
    dry pom-cascade "$specdir"
}

boot "$@"
