#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PROGRAM_TITLE:="Fix pom.xml in all layers"}
    : ${PROGRAM_SYNTAX:="[OPTIONS] [--] ..."}

    . shlib-import cliboot
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    import loadpom

    shopt -s nullglob

function setopt() {
    case "$1" in
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    loadpom pom.xml 1

    top_gid=$project_group_id
    top_aid=$project_artifact_id
    top_ver=$project_version
    _log1 "Top Project: $top_gid:$top_aid:$top_ver"

    top_name="$project_name"
    _log1 "Top Project Name: $top_name"
    top_name="${top_name%% *}"

    tmp=`tempfile`

    for top_mod in */; do
        top_mod="${top_mod%/}"
        [ -f "$top_mod/pom.xml" ] || continue

        [ "$top_mod" = "parent" ] && continue
        [ "$top_mod" = "$top_aid-parent" ] && continue

        top_modname="${top_mod#$top_aid-}"
        top_modname=`dash2words "$top_modname"`

        layer="${top_mod#layer-}"
        layerX="${layer//x/X}"
        if [ "$layer" = "$top_mod" ]; then
            layer=
            layerX=
        fi

        (cd "$top_mod"

        if [ -n "$layer" ]; then
            _log1 "Layer $layer"
        else
            _log1 "Top Module $top_mod"
        fi

        echo '<?xml version="1.0" encoding="UTF-8"?>'                           >pom.xml
        echo '<project xmlns="http://maven.apache.org/POM/4.0.0"'               >>pom.xml
        echo '         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"'   >>pom.xml
        echo '         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">' >>pom.xml
        echo "    <modelVersion>4.0.0</modelVersion>"     >>pom.xml
        echo "    <parent>"                               >>pom.xml
        echo "        <groupId>$top_gid</groupId>"        >>pom.xml
        echo "        <artifactId>$top_aid</artifactId>"  >>pom.xml
        echo "        <version>$top_ver</version>"        >>pom.xml
        echo "    </parent>"                              >>pom.xml
        echo "    <artifactId>$top_mod</artifactId>"      >>pom.xml
        echo "    <version>$top_ver</version>"            >>pom.xml
        echo "    <packaging>pom</packaging>"             >>pom.xml
        echo "    <modules>"                              >>pom.xml

        mods=()
        nmod=0
        for mod in */; do
            mod="${mod%/}"
            [ -f "$mod/pom.xml" ] || continue

            mods[nmod++]="$mod"
            echo "        <module>$mod</module>"          >>pom.xml

            pom-cascade "$top_name :: $top_modname" "$top_mod" "$top_ver" "$mod"
        done

        echo "    </modules>"                             >>pom.xml

        echo "    <name>$top_name :: $top_modname</name>" >>pom.xml
        echo "</project>"                                 >>pom.xml
        )
    done

    rm -f $tmp
}

function pom-cascade() {
    local prefix_name="$1"
    local parent_artifact_id="$2"
    local parent_version="$3"
    local dir="$4"
          dir="${dir%/}"
    local mod="${dir##*/}"
    local modname="${mod#$top_aid-}"
    local fullname="$prefix_name :: "`dash2words "$modname"`

    _log1 "Refresh $dir/pom.xml -> $parent_artifact_id:$parent_version"

    xml2 <$dir/pom.xml | sed \
        -e "s|/project/parent/artifactId=.*|/project/parent/artifactId=$parent_artifact_id|" \
        -e "s|/project/parent/version=.*|/project/parent/version=$parent_version|" \
        -e "s|/project/artifactId=.*|/project/artifactId=$mod|" \
        -e "s|/project/name=.*|/project/name=$fullname|" \
        | 2xml | tr -d '\n' | xmlindent -fnbe >$tmp
    cp -f $tmp $dir/pom.xml

    local project_artifact_id
    local project_version
    loadpom "$dir/pom.xml" 1

    for subpom in "$dir"/*/pom.xml; do
        pom-cascade "$fullname" "$project_artifact_id" "$project_version" "${subpom%/pom.xml}"
    done
}

function dash2words() {
    local str="$1"
    local buf=

    while [ -n "$str" ]; do
        local word="${str%%-*}"
        if [ "$word" = "$str" ]; then
            str=
        else
            str="${str#*-}"
        fi

        word=`uc -e "${word:0:1}"`"${word:1}"

        [ -n "$buf" ] && buf="$buf "
        buf="$buf$word"
    done
    echo "$buf"
}

boot "$@"
