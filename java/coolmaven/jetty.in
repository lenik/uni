#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PROGRAM_TITLE:="Start jetty by maven-plugins"}
    : ${PROGRAM_SYNTAX:="[OPTIONS] [--] <project-dir>"}
    : ${JETTY_PLUGIN_6:=org.mortbay.jetty:maven-jetty-plugin}
    : ${JETTY_PLUGIN_7:=org.mortbay.jetty:jetty-maven-plugin:7.2.0.v20101020}
    : ${JETTY_PLUGIN_8:=org.mortbay.jetty:jetty-maven-plugin}

    . shlib-import cliboot
    option -6 --jetty6      "Run with Jetty 6 compatible"
    option -7 --jetty7      "Run with Jetty 7 compatible"
    option -p --port=PORT   "HTTP port, default 3108"
    option -d --debug       "Enable remote debugging"
    option -P --debug-port=PORT "Debug port, default (http_port - 4)"
    option -R --refresh-depends "Force reinstall project dependencies"
    option -f --tcpflow     "Run tcpflow on lo interface"
    option -F --tcpflow-new "Run tcpflow in a new gnome-terminal"
    option    --max-permsize =SIZE "Specify the max perm gen size"
    option -q --quiet       "Repeat to get less info"
    option -v --verbose     "Repeat to get more info"
    option -h --help        "Show this help page"
    option    --version     "Print the version info"

    jetty_legacy=0
    jetty=$JETTY_PLUGIN_8

    mvnopts=()
    nmvnopt=0

    http_port=3108
    debug=0
    debug_port=

    refresh=

    tcpflow=
    tcpflow_new=

    max_perm_size=

function setopt() {
    case "$1" in
        -6|--jetty6)
            jetty_legacy=1
            jetty=$JETTY_PLUGIN_6;;
        -7|--jetty7)
            jetty=$JETTY_PLUGIN_7;;
        -p|--port)
            http_port=$2;;
        -d|--debug)
            debug=1;;
        -P|--debug-port)
            debug_port=$2;;
        -R|--refresh-depends)
            refresh=1;;
        -f|--tcpflow)
            tcpflow=1;;
        -F|--tcpflow-new)
            tcpflow=1
            tcpflow_new=1;;
        --max-permsize)
            max_perm_size="$2";;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    rundir=.

    if [ -n "$1" ]; then
        rundir="$1"
        cd "$1" || exit
    fi

    if [ "$refresh" = 1 ]; then
        if [ ! -f pom.xml ]; then
            echo "No pom.xml in $rundir"
            exit 1
        fi

        pomroot=.
        while [ -f $pomroot/../pom.xml ]; do
            pomroot=$pomroot/..
        done
        pomroot=${pomroot#./}
        pomroot_c=`readlink -f $pomroot`

        modlist="$pomroot/.m2modlist"
        pushd "$pomroot" >/dev/null
            makeoutdated ".m2modlist" 1w sh -c "\
                echo 'Scan modules under $pomroot_c'; \
                m2modlist . >.m2modlist; \
                echo"
        popd

        deps="$pomroot/.m2localdeps"
        makeoutdated "$deps" 1w sh -c "\
            echo 'Scan $pomroot_c for project local dependencies'; \
            m2localdeps '$pomroot' >'$deps'; \
            echo"

        IFS=: read thisgid thisaid thisver thispkg < <(pomid pom.xml)
        echo "Analyze project local dependencies for ($thisgid) $thisaid:"
        projs=
        while IFS=: read _thisaid _depaid _depxxx; do
            IFS=: read _modaid _modpath < <(grep ^$_depaid: "$modlist")
            if [ -n "$_modpath" ]; then
                echo "  Module Dependency: $_modaid"
                projs="$projs,$_modpath"
            fi
        done < <(grep ^$thisaid: "$deps")
        projs="${projs#,}"
        echo

        if [ -n "$projs" ]; then
            echo "projs=$projs"
            pushd $pomroot >/dev/null
            set -e
            mvn --projects "$projs" clean
            mvn --projects "$projs" install
            set +e
            popd >/dev/null
        fi
    fi

    if [ -n "$max_perm_size" ]; then
        mvnopts[nmvnopt++]="-XX:MaxPermSize=$max_perm_size"
    fi

    if [ "$debug" = 1 ]; then
        if [ -z "$debug_port" ]; then
            debug_port=$((http_port - 4))
        fi
        agent=1
        if [ "$agent" = 1 ]; then
            mvnopts[nmvnopt++]=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$debug_port
        else
            # Java<=1.5
            mvnopts[nmvnopt++]=-Xdebug
            mvnopts[nmvnopt++]=-Xnoagent
            mvnopts[nmvnopt++]=-Xrunjdwp:transport=dt_socket,address=$debug_port,servery=y,suspend=n
        fi
        # mvnopts[nmvnopt++]=-Djava.compiler=NONE
    fi

    export MAVEN_OPTS="${mvnopts[*]}"

    webdef_key=webAppConfig.defaultsDescriptor
    if [ "$jetty_legacy" = 1 ]; then
        webdef_key=webDefaultXml
    fi

    if [ "$tcpflow" = 1 ]; then
        fcmd=(sudo)
        nfcmd=1
        if [ "$tcpflow_new" = 1 ]; then
            fcmd[nfcmd++]=gnome-terminal
            fcmd[nfcmd++]=--window-with-profile
            fcmd[nfcmd++]=Tcpflow
            fcmd[nfcmd++]=--title
            fcmd[nfcmd++]="TCP: Jetty[$http_port]"
            fcmd[nfcmd++]=-x
        fi
        fcmd[nfcmd++]=tcpflow
        fcmd[nfcmd++]=-Cei
        fcmd[nfcmd++]=lo
        fcmd[nfcmd++]=port
        fcmd[nfcmd++]=$port

        "${fcmd[@]}" &
    fi

    coolmvn \
        -Djetty.port=$http_port \
        -D$webdef_key=@sysconfdir@/jettydefaults.xml \
        $jetty:run
}

boot "$@"
