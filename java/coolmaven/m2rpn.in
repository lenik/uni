#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PROGRAM_TITLE:="Refactor package names for Maven2-based java project"}
    : ${PROGRAM_SYNTAX:="[OPTIONS] [--] SRCDIR DSTDIR"}

    . shlib-import cliboot
    option -w, --keyword =OLD=NEW "Refactor a keyword, like bas=freejava (also rename BAS=FREEJAVA, etc.)"
    option -p, --package =OLD=NEW "Refactor a package, like net.a=com.b (also rename all the descendent)"
    option -f, --flatten    "Flatten package names"
    option -i, --incr-ver =p.q.r "Refactor the version, add a p.q.r delta"
    option -I, --set-ver =p.q.r "Reset the version for all modules"
    option -L, --license =FILE "Add license to source header"
    option -b, --build      "Do a full build"
    option -j, --install    "Build and install"
    option -J, --deploy     "Build and install and deploy"
    option -m, --message =TEXT "Commit with the message"
    option -M, --push =TEXT "Commit and push"
    option -a, --all =TEXT  "Do build, deploy, commit, push, and all"
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    keywords=()
    nkeyword=0
    packages=()
    npackage=0

    flatten=

    sedopts=()
    nsedopt=0

    ver=
    ver_delta=
    license=

    build=package

    commit_message=
    commit=
    push=

function setopt() {
    case "$1" in
        -w|--keyword)
            keyword="$2"
            kw_src="${keyword%%=*}"
            kw_dst="${keyword#*=}"
            [ "$kw_src" = "$keyword" ] && die "Bad keyword subst: $2"
            keywords[nkeyword++]="$kw_src"
            keywords[nkeyword++]="$kw_dst"
            ;;

        -p|--package)
            package="$2"
            pkg_src="${package%%=*}"
            pkg_dst="${package#*=}"
            [ "$pkg_src" = "$package" ] && die "Bad package subst: $2"
            packages[npackage++]="$pkg_src"
            packages[npackage++]="$pkg_dst"
            ;;

        -f|--flatten)
            flatten=1;;

        -i|--incr-ver)
            ver="$2"
            ver_delta=1
            ;;

        -I|--set-ver)
            ver="$2"
            ver_delta=
            ;;

        -L|--license)
            license="$2"
            [ -r "$license" ] || die "Can't read from file $license"
            ;;

        -b|--build)
            build=package;;

        -j|--install)
            build=install;;

        -J|--deploy)
            build=deploy;;

        -m|--message)
            commit_message="$2"
            commit=1
            ;;

        -M|--push)
            commit_message="$2"
            commit=1
            push=1
            ;;

        -a|--all)
            build=deploy
            commit_message="$2"
            commit=1
            push=1
            ;;

        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    if [ $# != 2 ]; then
        help
        exit 1
    fi

    sedinit

    srcroot=`readlink -f "$1"` || die "Failed to canonicalize $1."
    dstroot=`readlink -f "$2"` || die "Failed to canonicalize $2."
    srcroot="${srcroot%/}"
    dstroot="${dstroot%/}"
    [ -d "$srcroot" ] || die "Source dir isn't existed: $srcroot"
    [ -d "$dstroot" ] || die "Dest dir isn't existed: $dstroot"

    ( cd "$srcroot" || die "Failed to enter $srcroot"

        while IFS='|' read srcpath; do
            dstpath=`path_refactor "$srcpath"`
            _log1 "$srcpath"
            _log2 "$dstpath"
            _log2

            srcfile="$srcpath"
            dstfile="$dstroot/$dstpath"
            dstdir="${dstfile%/*}"
            [ -d "$dstdir" ] || mkdir -p "$dstdir" || die "Failed to create dir $dstdir/"

            cat "$srcfile" | sed "${sedopts[@]}" >"$dstfile" || die "Failed to process file $srcfile"
        done < <(find \
                       -name target -type d -prune \
                    -o -name .project   -prune \
                    -o -name .classpath -prune \
                    -o -name .settings  -prune \
                    -o -name .keep      -prune \
                    -o -type f -print)
    )

    if [ -n "$ver" ] && [ -z "$ver_delta" ]; then
        ( cd "$dstroot" || die "Failed to enter $dstroot"

            echo "Please remove fatal modules and commit the workcopy." >&2
            echo "You can cancel the post-prepare and do deploy yourself: " >&2
            echo "    mvn -fn deploy -Dmaven.test.skip=true" >&2
            echo "Press enter to prepare and deploy a release: $ver" >&2
            read
            # mvn versions:set -DnewVersion=$ver
            if ! mvn -fn release:prepare \
                    -DautoVersionSubmodules=true \
                    -DreleaseVersion=$ver \
                    -Dmaven.test.skip=true; then
                _error "release:prepare failed."
                _warn "You may check the pom versions and manually commit the tag"
            fi

            mvn -fn deploy -Dmaven.test.skip=true
        )
    fi
}

function sedinit() {
    local src dst
    for ((i = 0; i < npackage; )); do
        src="${packages[i++]}"
        dst="${packages[i++]}"
        sedopts[nsedopt++]='-e'
        if [ -z "$flatten" ]; then
            sedopts[nsedopt++]="s|\b${src//./\.}|$dst|g"
        else
            sedopts[nsedopt++]="s|\b${src//./\.}\(\.[a-z_][a-zA-Z_0-9]*\)*|$dst|g"
        fi
        src="${src//./\/}"
        dst="${dst//./\/}"
        sedopts[nsedopt++]='-e'
        if [ -z "$flatten" ]; then
            sedopts[nsedopt++]="s|\b$src|$dst|g"
        else
            sedopts[nsedopt++]="s|\b$src\(/[a-z_0-9]\)*|$dst|g"
        fi
    done
    for ((i = 0; i < nkeyword; )); do
        src="${keywords[i++]}"
        dst="${keywords[i++]}"
        sedopts[nsedopt++]='-e'
        # sedopts[nsedopt++]="s|\b$src-|$dst-|g"
        sedopts[nsedopt++]="s|\b$src\b|$dst|g"
        src=`uc -e "$src"`
        dst=`uc -e "$dst"`
        sedopts[nsedopt++]='-e'
        sedopts[nsedopt++]="s|\b$src\b|$dst|g"
    done

    if [ $nsedopt = 0 ]; then
        _warn "Nothing to subst. "
        sedopts[nsedopt++]='-e'
        sedopts[nsedopt++]="s/-/-/"
    fi
}

function path_refactor() {
    local p
    local i src dst
    for p in "$@"; do
        for ((i = 0; i < nkeyword; )); do
            src="${keywords[i++]}"
            dst="${keywords[i++]}"
            p="${p//#$src-/$dst-}"
            p="${p//\/$src-//$dst-}"
        done
        for ((i = 0; i < npackage; )); do
            src="${packages[i++]}"
            dst="${packages[i++]}"
            if [ -z "$flatten" ]; then
                p="${p//$src/$dst}"
            else
                local base="${p##*/}"
                local dir="${p%/*}"
                    [ "$dir" = "$p" ] && dir=.
                local simname="${base##*.}"
                local pkgname="${base%.*}"
                    [ "$pkgname" = "$base" ] && continue

                pkgname="${pkgname/%$src.*/$dst}"
                pkgname="${pkgname/%$src/$dst}"
                base="$pkgname.$simname"
                p="$dir/$base"
            fi

            src="${src//.//}"
            dst="${dst//.//}"
            if [ -z "$flatten" ]; then
                p="${p//$src/$dst}"
            else
                local base="${p##*/}"
                local dir="${p%/*}"
                    [ "$dir" = "$p" ] && continue
                dir="${dir/%\/$src\/*//$dst}"
                p="$dir/$base"
            fi
        done
        echo "$p"
    done
}

boot "$@"
