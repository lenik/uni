#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PROGRAM_TITLE:="Find path in maven modules"}
    : ${PROGRAM_SYNTAX:="[OPTIONS] [-r]    [--] <path>"
                        "[OPTIONS] -l [-n] [--] <module-prefix>[/foo/bar]"}

    . shlib-import cliboot
    option -r --root        "Get root module instead of nearest module"
    option -l --list        "List modules matching the pattern"
    option -n --name-only   "List module names only, no full path"
    option -q --quiet       "Repeat to get less info"
    option -v --verbose     "Repeat to get more info"
    option -h --help        "Show this help page"
    option    --version     "Print the version info"

    TIMEOUT=10day
    mode=which      # which, root, list
    name_only=

function setopt() {
    case "$1" in
        -r|--root)
            mode=root;;
        -l|--list)
            mode=list;;
        -n|--name-only)
            name_only=1;;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function show() {
    if [ "$name_only" = 1 ]; then
        echo "$1"
    else
        echo "$2"
    fi
}

function main() {

    safe_root=
    # which vcscmd >/dev/null && safe_root=`vcscmd rootpath .`

    start_dir="$PWD"
    if [ $mode != list ]; then
        if [ -n "$1" ]; then
            start_dir="$1"
        fi
    fi

    current_module=`which_module "$start_dir"` \
        || die "Not in any module: $start_dir"

        if [ $mode = which ]; then
            echo "$current_module"
            exit 0
        fi

    root=`find_root "$current_module"`

        if [ $mode = root ]; then
            echo "$root"
            exit 0
        fi

    # cd "$root" || die "Can't chdir to the project root"

    #if [ -z "$1" ]; then
    #    find_module "" "$root"
    #    return
    #fi

    module_name="${1%%/*}"
    if [ "$module_name" = "$1" ]; then
        subdir=
    else
        subdir="${1#*/}"
    fi

    modules=(`find_module "$module_name" "$root" `) \
        || die "Module doesn't exist: $module_name"

    for module in "${modules[@]}"; do
        _log2 "Found module: $module"

        while IFS=: read mod path; do
            path="$root/$path"

            if [ -n "$subdir" ]; then
                if [ ! -e "$path/$subdir" ]; then
                    continue
                fi
                show "$mod" "$path/$subdir"
            else
                show "$mod" "$path"
            fi
        done < <(m2modlist -q -c $TIMEOUT "$root" | grep "^$module_name")

        return 1
    done
}

function which_module() {
    local dir="$1"

    [ -z "$dir" ] && return 1

    if [ -f "$dir/pom.xml" ]; then
        echo "$dir"
        return 0
    fi

    local parent="${dir%/*}"
    if [ "$parent" = "$dir" ]; then
        return 1
    fi

    which_module "$parent"
}

function find_root() {
    local mod="$1"

    [ -f "$mod/pom.xml" ] || return 1

    local parent="${mod%/*}"
    if [ "$parent" != "$mod" ] && [ -f "$parent/pom.xml" ]; then
        find_root "$parent"
    else
        local mod_c=`readlink -f "$mod"`
        local parent_c="${mod_c%/*}"
        if [ "$mod" != "$mod_c" ]; then
            if [ "$parent_c" != "$mod_c" ] && [ -f "$parent_c/pom.xml" ]; then
                find_root "$parent_c"
                return
            fi
        fi
        echo "$mod"
    fi
}

function find_module() {
    local name="$1"
    local dir="$2"
    m2modlist -q -c $TIMEOUT "$dir" | cut -d: -f1 | grep -- "^$name"
}

boot "$@"
