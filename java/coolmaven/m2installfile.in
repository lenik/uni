#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PROGRAM_TITLE:="Install a standalone file to M2 repository"}
    : ${PROGRAM_SYNTAX:="[OPTIONS] [--] ..."}

    . shlib-import cliboot
    option -g --group-id =ID    "Specify group-id, term 'D' or 'DIR' to use the relative dirname"
    option -a --artifact-id =ID "Specify artifact-id, default get from filename"
    option -w --ver =VER        "Specify version, default get from filename"
    option -s --sources-jar =FILE "The corresponding sources, default artifactid-VER-sources.jar"
    option -j --javadoc-jar =FILE "The corresponding javadocs, default artifactid-VER-javadoc.jar"
    option -d --deploy          "Deploy it also"
    option -r --repo-id =REPOID "Repository id used to deploy"
    option -u --url =URL        "Repository URL used to deploy"
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    sysconfdir=@sysconfdir@

    deploy=0
        case "$0" in
            *deploy*)
                deploy=1;;
        esac
    group_id=
    artifact_id=
    version=
    packaging=
    sources_jar=
    javadoc_jar=
    repo_id=
    repo_url=

function setopt() {
    case "$1" in
        -g|--group-id)
            group_id=$2;;
        -a|--artifact-id)
            artifact_id=$2;;
        -w|--ver)
            version=$2;;
        -s|--sources-jar)
            sources_jar=$2;;
        -j|--javadoc-jar)
            javadoc_jar=$2;;
        -p|--packaging)
            packaging=$2;;
        -d|--deploy)
            deploy=1;;
        -r|--repo-id)
            repo_id="$2";;
        -u|--url)
            repo_url="$2";;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    if [ "$deploy" = 1 ]; then
        for f in $sysconfdir/m2deploy.cfg $HOME/.m2deploy.cfg; do
            if [ -f "$f" ]; then
                while read key val; do
                    if [ -z "$key" ]; then continue; fi
                    if [ "${key:0:1}" = '#' ]; then continue; fi
                    _log2 "Config $key := $val. "
                    eval "$key=\"$val\""
                done <"$f"
            fi
        done

        if [ -z "$repo_id" ] && [ -z "$repo_url" ]; then
            echo "Which repository to deploy?"
            exit 1
        fi
    fi

    if [ $# = 0 ]; then
        echo "File name isn't specified. "
        exit 1
    fi

    file="$1"
    case "$group_id" in
        D|DIR)
            dir="${file%/*}"
            dir="${dir#./}"
            group_id="${dir//\//.}"
            ;;
    esac

    if [ -z "$group_id" ]; then
        parent=`jar tf "$file" | grep -e '^[a-z]\+/' | grep -v '/$' | get-common-prefix`
        _log1 "Auto determine group id by longest-parent-dir: $parent"

        # assert parent is "*/" or "*/<partial-name>"
        parent="${parent%/*}"

        group_id="${parent//\//.}"
    fi

    extension="${file##*.}"
    if [ "$extension" = "$file" ]; then
        echo "File $file doesn't have an extension"
        exit 1
    fi
    if [ -z "$packaging" ]; then packaging=$extension; fi

    base="${file##*/}"
    base="${base%.*}"

    ver="${base##*-}"
    if [ "$ver" = "$base" ]; then
        ver=
    elif [ -n "${ver//[0-9.]}" ]; then
        ver=
    fi
    if [ -n "$ver" ]; then
        base_nover="${base%-*}"
    else
        base_nover="$base"
    fi

    if [ -z "$version" ]; then
        if [ -z "$ver" ]; then
            echo "Version is unknown. "
            exit 1
        fi
        version="$ver"
    fi

    if [ -z "$artifact_id" ]; then
        artifact_id="$base_nover"
    fi

    if [ -z "$sources_jar" ]; then
        if [ -f "$base-sources.jar" ]; then
            sources_jar="$base-sources.jar"
        elif [ -f "$base-sources.zip" ]; then
            sources_jar="$base-sources.zip"
        elif [ -f "$base-src.jar" ]; then
            sources_jar="$base-src.jar"
        elif [ -f "$base-src.zip" ]; then
            sources_jar="$base-src.zip"
        fi
    fi

    if [ -z "$javadoc_jar" ]; then
        if [ -f "$base-javadoc.jar" ]; then
            javadoc_jar="$base-javadoc.jar"
        elif [ -f "$base-javadoc.zip" ]; then
            javadoc_jar="$base-javadoc.zip"
        fi
    fi

    if [ "$deploy" = 1 ]; then
        opts=(deploy:deploy-file)
    else
        opts=(install:install-file)
    fi
    nopt=${#opts[@]}

    opts[nopt++]="-DgroupId=$group_id"
    opts[nopt++]="-DartifactId=$artifact_id"
    opts[nopt++]="-Dversion=$version"
    opts[nopt++]="-Dpackaging=$packaging"
    opts[nopt++]="-Dfile=$file"
    if [ -f "$javadoc_jar" ]; then opts[nopt++]="-Djavadoc=$javadoc_jar"; fi
    if [ -f "$sources_jar" ]; then opts[nopt++]="-Dsources=$sources_jar"; fi

    if [ -n "$repo_id" ]; then opts[nopt++]="-DrepositoryId=$repo_id"; fi
    if [ -n "$repo_url" ]; then opts[nopt++]="-Durl=$repo_url"; fi

    _log1 "Execute mvn ${opts[@]}"
    mvn "${opts[@]}"
}

boot "$@"
