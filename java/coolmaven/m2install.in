#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PROGRAM_TITLE:="Install a standalone file to M2 repository"}
    : ${PROGRAM_SYNTAX:="[OPTIONS] [--] ..."}

    . shlib-import cliboot
    option -g --group-id =ID    "Specify group-id, default get from dirname"
    option -a --artifact-id =ID "Specify artifact-id, default get from filename"
    option -w --ver =VER        "Specify version, default get from filename"
    option -s --sources-jar =FILE "The corresponding sources, default artifactid-VER-sources.jar"
    option -j --javadoc-jar =FILE "The corresponding javadocs, default artifactid-VER-javadoc.jar"
    option -d --deploy          "Deploy it also"
    option -r --repo-id =REPOID "Repository id used to deploy"
    option -u --url =URL        "Repository URL used to deploy"
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    sysconfdir=@sysconfdir@
    [ -d "$sysconfdir" ] || sysconfdir=/etc

    deploy=0
        case "$0" in
            *deploy*)
                deploy=1;;
        esac
    opt_group_id=
    opt_artifact_id=
    opt_version=
    opt_packaging=
    opt_pomfile=
    opt_sources_jar=
    opt_javadoc_jar=
    repo_id=
    repo_url=

function setopt() {
    case "$1" in
        -g|--group-id)
            opt_group_id=$2;;
        -a|--artifact-id)
            opt_artifact_id=$2;;
        -w|--ver)
            opt_version=$2;;
        -s|--sources-jar)
            opt_sources_jar=$2;;
        -j|--javadoc-jar)
            opt_javadoc_jar=$2;;
        -p|--packaging)
            opt_packaging=$2;;
        -d|--deploy)
            deploy=1;;
        -r|--repo-id)
            repo_id="$2";;
        -u|--url)
            repo_url="$2";;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    if [ "$deploy" = 1 ]; then
        for f in $sysconfdir/m2deploy.cfg $HOME/.m2deploy.cfg; do
            if [ -f "$f" ]; then
                while read key val; do
                    if [ -z "$key" ]; then continue; fi
                    if [ "${key:0:1}" = '#' ]; then continue; fi
                    _log2 "Config $key := $val. "
                    eval "$key=\"$val\""
                done <"$f"
            fi
        done

        if [ -z "$repo_id" ] && [ -z "$repo_url" ]; then
            echo "Which repository to deploy?"
            exit 1
        fi
    fi

    if [ $# = 0 ]; then
        echo "File name isn't specified. "
        exit 1
    fi

    local arg
    for arg in "$@"; do
        _log1 "Process: $arg"
        process "$arg"
    done
}

function process() {
    local group_id="$opt_group_id"
    local artifact_id="$opt_artifact_id"
    local version="$opt_version"
    local packaging="$opt_packaging"
    local pomfile="$opt_pomfile"
    local sources_jar="$opt_sources_jar"
    local javadoc_jar="$opt_javadoc_jar"

    local file="$1"
    local dir="${file%/*}"
        if [ "$dir" = "$file" ]; then
            dir=.
        else
            dir="${dir#./}"
        fi

        local nslash=0
        local s="$dir"
        while true; do
            [ "$s" = "${s%/*}" ] && break
            s="${s%/*}"
            (( nslash++ ))
        done


    # base, extension, version
        local extension="${file##*.}"
        if [ "$extension" = "$file" ]; then
            echo "File $file doesn't have an extension"
            exit 1
        fi
        if [ -z "$packaging" ]; then packaging=$extension; fi

        local base="${file##*/}"
        base="${base%.*}"

        local ver="${base##*-}"
        if [ "$ver" = "$base" ]; then
            ver=
        elif [ "${ver//[0-9.]}" = "$ver" ]; then
            ver=
        fi

        local base_nover
        if [ -n "$ver" ]; then
            base_nover="${base%-*}"
        else
            base_nover="$base"
        fi

        if [ -z "$version" ]; then
            if [ -z "$ver" ]; then
                echo "Version is unknown. "
                exit 1
            fi
            version="$ver"
        fi

    if [ -z "$artifact_id" ]; then
        artifact_id="$base_nover"
    fi

    if [ -z "$group_id" ]; then
        if [ $nslash -ge 1 ]; then
            dir_ver="${dir##*/}"
            dir_p1="${dir%/*}"
            if [ "${base/-$dir_ver}" != "${base_nover}" ]; then
                # foo/bar/foobar-1.2.3 -> foo.bar
                dir_ver=
                group_id="${dir//\//.}"
            else
                # foo/bar/foobar/1.2.3/foobar-1.2.3 -> foo.bar
                dir_p2="${dir_p1%/*}"
                group_id="${dir_p2//\//.}"
            fi
        else
            parent=`jar tf "$file" | grep -e '^[a-z]\+/' | grep -v '/$' | get-common-prefix`
            _log1 "Auto determine group id by longest-parent-dir: $parent"

            # assert parent is "*/" or "*/<partial-name>"
            parent="${parent%/*}"

            group_id="${parent//\//.}"
        fi
    fi

    if [ -z "$pomfile" ]; then
        if [ -f "$dir/$base.pom" ]; then
            pomfile="$dir/$base.pom"
        fi
    fi

    if [ -z "$sources_jar" ]; then
        for s in sources.jar sources.zip src.jar src.zip; do
            if [ -f "$dir/$base-$s" ]; then
                sources_jar="$dir/$base-$s"
                break
            fi
        done
    fi

    if [ -z "$javadoc_jar" ]; then
        for s in javadoc.jar javadoc.zip; do
            if [ -f "$dir/$base-$s" ]; then
                javadoc_jar="$dir/$base-$s"
            fi
        done
    fi

    if [ "$deploy" = 1 ]; then
        opts=(deploy:deploy-file)
    else
        opts=(install:install-file)
    fi
    nopt=${#opts[@]}

    opts[nopt++]="-DgroupId=$group_id"
    opts[nopt++]="-DartifactId=$artifact_id"
    opts[nopt++]="-Dversion=$version"
    opts[nopt++]="-Dpackaging=$packaging"
    opts[nopt++]="-Dfile=$file"

    [ -f "$pomfile" ]     && opts[nopt++]="-DpomFile=$pomfile"

    [ -f "$javadoc_jar" ] && opts[nopt++]="-Djavadoc=$javadoc_jar"
    [ -f "$sources_jar" ] && opts[nopt++]="-Dsources=$sources_jar"

    [ -n "$repo_id" ]     && opts[nopt++]="-DrepositoryId=$repo_id"
    [ -n "$repo_url" ]    && opts[nopt++]="-Durl=$repo_url"

    _log1 "[ $group_id :: $artifact_id :: $packaging :: $version ]"
    _log2 "Execute mvn ${opts[@]}"
    mvn "${opts[@]}"
}

boot "$@"
