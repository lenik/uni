#!/bin/bash
    . shlib-import cliboot

    RCSID='$Id: bash.sh 2141 2010-12-13 06:15:26Z lenik $'
    short_opts="BT:hqv"
    long_opts="always-make,timeout:,help,quiet,verbose,version"

    always_make=
    timeout=

function version() {
    parse_id "$RCSID"
    echo "[$BASENAME] Make a simple target with timeout support"
    echo "Written by Lenik, Version 0.$rcs_rev, Last updated at $rcs_date"
}

function help() {
    version
    echo
    echo "Syntax: "
    echo "    $0 [OPTION] [--] TARGET [:] PREREQ... \; RULE-CMD..."
    echo
    echo "Variables: (You need to escape the \$ char)"
    echo "    $@ The target"
    echo "    $< The prerequsites"
    echo
    echo "Options: "
    echo "    -B, --always-make       Unconditionally make"
    echo "    -T, --timeout=#[unit]   Timeout and force make, unit like min,hr,etc."
    echo "    -q, --quiet             Repeat to get less info"
    echo "    -v, --verbose           Repeat to get more info"
    echo "    -h, --help              Show this help page"
    echo "        --version           Print the version info"
}

function setopt() {
    case "$1" in
        -B|--always-make)
            always_make=1;;
        -T|--timeout)
            timeout=$2
            case $timeout in
                *sec)   timeout=$(( ${timeout%sec} / 60 ));;
                *min)   timeout=$(( ${timeout%min} * 1 ));;
                *hr)    timeout=$(( ${timeout%hr}  * 60 ));;
                *day)   timeout=$(( ${timeout%day} * 1440 ));;
                *wk)    timeout=$(( ${timeout%wk}  * 10080 ));;
                *mo)    timeout=$(( ${timeout%mo}  * 43200 ));;
                *yr)    timeout=$(( ${timeout%yr}  * 525600 ));;
                *S)     timeout=$(( ${timeout%S}   / 60 ));;
                *M)     timeout=$(( ${timeout%M}   * 1 ));;
                *H)     timeout=$(( ${timeout%H}   * 60 ));;
                *D)     timeout=$(( ${timeout%D}   * 1440 ));;
                *W)     timeout=$(( ${timeout%W}   * 10080 ));;
            esac
            ;;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    if [ $# = 0 ]; then
        echo "No target specified. " >&2;
        exit 1
    fi

    target="$1"
    shift
    if [ "$1" = ':' ]; then shift; fi

    prereq=()
    n=0
    while [ $# != 0 ] && [ "$1" != ';' ]; do
        prereq[n++]="$1"
        shift
    done

    if [ "$1" != ';' ]; then
        echo "Pre-requisition isn't terminated by ';'" >&2
        exit 1
    fi
    shift

    if [ $# = 0 ]; then
        echo "No rule command to execute" >&2
        exit 1
    fi

    cmd=()
    n=0
    for arg in "$@"; do
        case "$arg" in
            '$<')
                for req in "${prereq[@]}"; do
                    cmd[n++]="$req"
                done
                ;;
            '$@')
                cmd[n++]="$target"
                ;;
            *)
                cmd[n++]="$arg"
                ;;
        esac
    done

    make=

    if [ "$always_make" = 1 ]; then
        make=1
    else
        now=`date +%s`
        target_time=0
        if [ -e "$target" ]; then
            target_time=`stat -c%Y "$target"`
        fi

        if [ -n "$timeout" ]; then
            if [ $(( (now - target_time) / 60 )) -ge $timeout ]; then
                _log1 "File $target is timeout. "
                make=1
            fi
        fi

        if [ -z "$make" ]; then
            for pre in "${prereq[@]}"; do
                if [ -e "$pre" ]; then
                    pre_time=`stat -c%Y "$pre"`
                    if [ $pre_time -gt $target_time ]; then
                        make=1
                        break
                    fi
                fi
            done
        fi
    fi

    if [ "$make" = 1 ]; then
        "${cmd[@]}"
    else
        _log1 "Target is already updated"
    fi
}

boot "$@"
