#!/bin/bash
    RCSID='$Id: bash.sh 1427 2010-08-25 04:39:31Z lenik $'
    short_opts="lakfhqv"
    long_opts="list,add,kill,force,help,quiet,verbose,version"
    . shlib-import cliboot

    list=
    mode=
    force=

function version() {
    parse_id "$RCSID"
    echo "[$BASENAME] subst-keywords manager"
    echo "Written by Lenik, Version 0.$rcs_rev, Last updated at $rcs_date"
}

function help() {
    version
    echo
    echo "Syntax: "
    echo "    $0 [OPTION] [--] [PACKAGE:]KEYWORD CONTENT"
    echo
    echo "Options: "
    echo "    -l, --list              list keywords"
    echo "    -a, --add               add a keyword (default)"
    echo "    -k, --kill              remove a keyword"
    echo "    -f, --force             force to add bare keyword"
    echo "    -q, --quiet             repeat to get less info"
    echo "    -v, --verbose           repeat to get more info"
    echo "    -h, --help              show this help page"
    echo "        --version           print the version info"
}

function setopt() {
    case "$1" in
        -l|--list)
            list=1;;
        -a|--add)
            mode=add;;
        -k|--kill)
            mode=kill;;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function list() {
    local dir="$1"
    local prefix="$2"

    for f in "$dir"/*; do
        basename="${f##*/}"
        if [ -z "$prefix" ]; then
            fqn="$basename"
        else
            fqn="$prefix:$basename"
        fi
        if [ -d "$f" ]; then
            list "$f" "$fqn"
        else
            while IFS== read attr val; do
                echo "$fqn[$attr] = $val"
            done <$f
        fi
    done
}

function main() {
    if [ "$list" = 1 ]; then
        list ~/.coolcmd/subst
        return
    fi

    if [ -z "$1" ]; then
        echo "Keyword isn't specified. "
        return 1
    fi

    if [ -z "$mode" ]; then
        if [ $# = 1 ]; then
            mode=list
        else
            mode=add
        fi
    fi

    keyword="$1"
    if [ "${keyword/:}" = "$keyword" ]; then
        if [ "$force" != 1 ]; then
            echo "Warning: bare keyword without package name, use -f to override."
            return 1
        fi
    fi

    if [ "${keyword#*[}" != "$keyword" ]; then
        if [ "${keyword%]}" = "$keyword" ]; then
            echo "Invalid keyword: '$keyword'"
            return 1
        fi
        attr="${keyword#*[}"
        attr="${attr%]}"
        keyword="${keyword%[*}"
    else
        attr=
    fi

    res="${keyword//://}"

    altfiles=(/etc/coolcmd/subst/$res ~/.coolcmd/subst/$res)
    nalt=${#altfiles[@]}
    altindex=0
    last=0

    for file in "${altfiles[@]}"; do
        if [ $mode != list ]; then
            if [ -z "$attr" ]; then attr=text; fi

            if [ $last = 0 ] && ! grep -q "^$attr=" $file; then
                # undefined attribute will try on the next alt.
                continue
            fi

            if [ -f "$file" ] && [ ! -w "$file" ]; then
                if [ $last = 1 ]; then
                    echo "File is not writable: $file"
                    return 1
                else
                    continue # find next writable alt-file
                fi
            fi
        fi

        ((last = ++altindex == nalt))

        case $mode in
        list)
            if [ ! -f $file ]; then continue; fi
            if [ -z "$attr" ]; then
                cat $file
            else
                if grep "^$attr=" $file > >(cut -d= -f2-); then
                    # exists, just show the first alt.
                    break
                fi
            fi
            ;;

        add)
            dir=${file%/*}
            if [ ! -d "$dir" ]; then
                _log1 "Create new package dir $dir"
                mkdir -p "$dir"
            fi

            if lineconf -e $file "^$attr=" "$attr=$2"; then
                _log1 "Add entry in $file: $attr=$2"
            else
                _log1 "No change"
            fi
            ;;

        kill)
            if [ ! -f $file ]; then continue; fi
            if lineconf -ek $file "^$attr="; then
                _log1 "Remove entry in $file: $attr"
            else
                _log1 "No change"
            fi
            ;;
        esac
    done
}

boot "$@"
