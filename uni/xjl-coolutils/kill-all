#!/bin/bash
    . shlib-import cliboot

    RCSID='$Id$'
    short_opts="f:s:hqv"
    long_opts="list-file:,signal:,help,quiet,verbose,version"

    SIGNAL=TERM
    LISTFILE=
    PS_OPTS=afx

function version() {
    parse_id "$RCSID"
    echo "[$BASENAME] Kill all processes in the list"
    echo "Written by Lenik, Version 0.$rcs_rev, Last updated at $rcs_date"
}

function help() {
    version
    echo
    echo "Syntax: "
    echo "    $0 [OPTION] [PROCESS-GREP-PATTERN]"
    echo
    echo "Options: "
    echo "    -f, --list-file=FILE    Read process names from FILE"
    echo "    -s, --signal=SIGNAL     Send specific signal to process"
    echo "    -q, --quiet             Repeat to get less info"
    echo "    -v, --verbose           Repeat to get more info"
    echo "    -h, --help              Show this help page"
    echo "        --version           Print the version info"
}

function setopt() {
    case "$1" in
        -f|--list-file)
            LISTFILE="$2";;
        -s|--signal)
            SIGNAL="$2";;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function _kill() {
    local pid="$1"
    if [ ! -d /proc/$pid ]; then # The process is no more existed
        continue
    fi
    read cmdline <"/proc/$pid/cmdline"
    _log1 "Kill pid=$pid"
    _log2 "    -> $cmdline"
    kill -s $SIGNAL $pid
}

function main() {
    if [ "$#" = 0 ] && [ -z "$LISTFILE" ]; then
        while read pid xxx; do
            _kill $pid
        done
    fi

    if [ -n "$LISTFILE" ]; then
        while read pid xxx; do
            _kill $pid
        done <"$LISTFILE"
    fi

    for pattern in "$@"; do
        COLUMNS=1000 ps $PS_OPTS | grep "$pattern" | while read pid xxx; do

            if [ "$xxx" != "${xxx/kill-all}" ]; then continue; fi
            if [ "$xxx" != "${xxx/grep }"    ]; then continue; fi

            _log2 "Matched process: [$pid] $xxx"
            _kill $pid

        done
    done
}

boot "$@"
