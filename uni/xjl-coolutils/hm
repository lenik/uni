#!/bin/bash
    RCSID='$Id: bash.sh 1427 2010-08-25 04:39:31Z lenik $'
    short_opts="I:d:silx:hqv"
    long_opts="include,maxdepth,strict,ignore-case,list,exec,help,quiet,verbose,version"
    . /usr/lib/bash/cliboot

    includes=(/usr/share/doc /usr/local/share/doc)
    maxdepth=3
    strict=
    ignore_case=
    list_only=
    opencmd=gnome-open

    shopt -s nullglob

function version() {
    parse_id "$RCSID"
    echo "[$BASENAME] Find installed HTML documents for keywords"
    echo "Written by Lenik, Version 0.$rcs_rev, Last updated at $rcs_date"
}

function help() {
    version
    echo
    echo "Syntax: "
    echo "    $0 [OPTION] [--] [nnn] PACKAGE-SPEC KEYWORDS..."
    echo
    echo "Options: "
    echo "    -I, --include=dir       add dir to search path"
    echo "    -d, --maxdepth=DEPTH    max recursion depth to search into"
    echo "    -S, --strict            search explicit keywords"
    echo "    -i, --ignore-case       ignore case"
    echo "    -l, --list              only list the candidates, don't open"
    echo "    -x, --exec=COMMAND      open with specified command"
    echo "    -q, --quiet             don't list candidates"
    echo "    -v, --verbose           repeat to get more info"
    echo "    -h, --help              show this help page"
    echo "        --version           print the version info"
}

function setopt() {
    case "$1" in
        -I|--include)
            includes[${#includes[@]}]="$2";;
        -d|--maxdepth)
            maxdepth="$2";;
        -s|--strict)
            strict=1;;
        -i|--ignore-case)
            ignore_case=1;;
        -l|--list)
            list_only=1;;
        -x|--exec)
            opencmd="$2";;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    list_cands=0
    if [ $LOGLEVEL -gt 0 ]; then list_cands=1; fi

    selection=1
    if [ -n "$1" ] && [ -z "${1//[0-9]}" ]; then
        selection=$1
        shift
    fi

    if [ -z "$1" ]; then
        echo "No package specified. "
        exit 1
    fi
    package_spec="$1"
    shift

    if [ "$#" = 0 ]; then
        echo "No keyword specified. "
    fi

    regex_flags=
    grep_flags=
    if [ "$ignore_case" = 1 ]; then
        regex_flags="i"
        grep_flags=-i
    fi

    listf=/tmp/hm-listf.$$.$RANDOM

    for inc in "${includes[@]}"; do
        for package in $inc/*$package_spec*; do
            find "$package" -maxdepth $maxdepth -name '*.*html' -o -name '*.*htm' | sed -e 's/^\|$/\"/g' >>$listf
        done
    done
    eval "filelist=(/dev/null `cat $listf`)"
    rm -f $listf
    # for f in "${filelist[@]}"; do echo fl: $f; done

    for keyword in "$@"; do
        keyword="${keyword//\\/\\\\}"
        if [ -z "$strict" ]; then
            grep_keyword="${keyword//[-_.]/[-_.]}"
            grep_keyword="['\"]\($grep_keyword\b[^'\"]*\)['\"]"
             sed_keyword="$grep_keyword"
        else
            grep_keyword="['\"]\($keyword\)['\"]"
             sed_keyword="$grep_keyword"
        fi

        grep_anchor="<a name=$grep_keyword>"
         sed_anchor="$grep_anchor"

        _log2 "grep-keyword: $grep_keyword"
        _log2 " sed-keyword: $sed_keyword"
        _log2 "grep-anchor: $grep_anchor"
        _log2 " sed-anchor: $sed_anchor"

        # XXX - filelist may exceeds the command-line max size.

        # This just list matched files, but not list ambiguous cands.
        # grep $grep_flags -l "$grep_anchor" "${filelist[@]}"

        grep $grep_flags "$grep_anchor" "${filelist[@]}" | \
                sed -e "s/^\([^:]*\):.*<a name=$sed_keyword.*\$/\1|\2/" | \
                sort -u | \
            while IFS=\| read file anchor; do
                if [ "$list_only" = 1 ]; then
                    echo "$anchor (${file##*/})"
                else
                    ((index++))
                    if [ "$index" = "$selection" ]; then
                        url="file://${file// /+}#$anchor"
                        _log2 $opencmd "$url"
                        $opencmd "$url"
                    elif [ "$list_cands" = 1 ]; then
                        echo "$anchor (${file##*/})"
                    elif [ "$index" -gt "$selection" ]; then
                        break
                    fi
                fi
            done
    done
}

boot "$@"
