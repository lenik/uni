#!/bin/bash
    . shlib-import cliboot

    RCSID='$Id: bash.sh 1853 2010-09-29 01:35:59Z lenik $'
    short_opts="ghqv"
    long_opts="group-local,help,quiet,verbose,version"

    shopt -s nullglob

    group_local=0

function version() {
    parse_id "$RCSID"
    echo "[$BASENAME] Generate local dependency table"
    echo "Written by Lenik, Version 0.$rcs_rev, Last updated at $rcs_date"
}

function help() {
    version
    echo
    echo "Syntax: "
    echo "    $0 [OPTION] [--] DIR"
    echo
    echo "Options: "
    echo "    -g, --group-local       Ignore dependencies of different groupid"
    echo "    -q, --quiet             Repeat to get less info"
    echo "    -v, --verbose           Repeat to get more info"
    echo "    -h, --help              Show this help page"
    echo "        --version           Print the version info"
}

function setopt() {
    case "$1" in
        -g|--group-local)
            group_local=1;;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function process() {
    local dir="$1"
    pomfile="$dir/pom.xml"

    _log2 "$dir/"
    IFS=: read this_gid this_aid this_ver this_pack < <(pomid "$pomfile")
    _log2 "  This pom: $this_aid"

    ns=`xmltran -f "/*:=namespace-uri()" "$pomfile"`

    while IFS=: read gid aid ver pack scope; do
        # echo "--    $gid:$aid:$ver:$pack"
        if [ "$group_local" = 1 ]; then
            if [ "$this_gid" != "$gid" ]; then continue; fi
        fi
        echo "$this_aid:$aid:$ver:$pack:$scope"
    done < <(\
        xmltran -n "p=$ns" \
            -f "/p:project/p:dependencies/p:dependency:=concat( \
                p:groupId, \
                ':', p:artifactId, \
                ':', p:version, \
                ':', p:type, \
                ':', p:scope, \
                '&#10;')" \
            $pomfile)

    for subpom in "$dir"/*/pom.xml; do
        subdir="${subpom%/pom.xml}"
        process "$subdir"
    done
}

function main() {
    for dir in "$@"; do
        if [ ! -f "$dir/pom.xml" ]; then
            echo "No pom.xml file in $dir"
            exit 1
        fi
        process "$dir"
    done
}

boot "$@"
