#!/bin/bash
    . shlib-import cliboot
    shopt -s nullglob

    RCSID='$Id$'
    short_opts="arf:F:bL:C:x:hqv"
    long_opts="all,recursive,ifexist:,ifnotexist:,background,list-file:,chdir:,exclude:,help,quiet,verbose,version"

    LOGLEVEL=0

    maxdepth=1
    background=
    chdir=
    listfile=
    exclude=

    incl=()
    excl=()
    nincl=0
    nexcl=0

function version() {
    parse_id "$RCSID"
    echo "[$BASENAME] Execute commands in each dir"
    echo "Written by Lenik, Version 0.$rcs_rev, Last updated at $rcs_date"
}

function help() {
    version
    echo
    echo "Syntax: "
    echo "    $0 [OPTION] [--] COMMAND ARGS"
    echo
    echo "Options: "
    echo "    -a, --all               include hidden files"
    echo "    -r, --recursive         find recursive"
    echo "    -f, --ifexist=FILE      only dirs with FILE inside, can be multiple"
    echo "    -F, --ifnotexist=FILE   only dirs without FILE inside, can be multiple"
    echo "    -L, --list-file=FILE    read dirs from given file, instead of *"
    echo "                            if FILE is '-', then read from stdin."
    echo "    -C, --chdir=DIR         chdir to DIR before enum dirs"
    echo "    -x, --exclude=PATTERN   simple regex to exclude (NOT IMPL)"
    echo "    -b, --background        run each cmd in background"
    echo "    -q, --quiet             repeat to get less info"
    echo "    -v, --verbose           repeat to get more info"
    echo "    -h, --help              show this help page"
    echo "        --version           print the version info"
}

function setopt() {
    case "$1" in
        -a|--all)
            shopt -s dotglob;;
        -r|--recursive)
            maxdepth=256;;
        -f|--ifexist)
            incl[nincl++]="$2";;
        -F|--ifnotexist)
            excl[nexcl++]="$2";;
        -b|--background)
            background=1;;
        -f|--list-file)
            listfile="$2";;
        -C|--chdir)
            chdir="$2";;
        -x|--exclude)
            exclude="$2";;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function search() {
    local start="${1%/}/"
          start="${start#./}"
    local depth="$2"
    local d
    local f
    local fail

    [ $((depth++)) -lt $maxdepth ] || return

    for d in "$start"*/; do
        fail=
        for f in "${incl[@]}"; do
            if [ ! -e "$d$f" ]; then
                fail=1
                break
            fi
        done
        if [ -z "$fail" ]; then
            for f in "${excl[@]}"; do
                if [ -e "$d$f" ]; then
                    fail=1
                    break
                fi
            done
        fi

        if [ -z "$fail" ]; then
            echo "$d"
            continue    # -prune
        fi

        search "$d" $depth
    done
}

function main() {
    if [ -n "$chdir" ]; then
        if ! cd $chdir; then
            echo "Can't chdir to $chdir" >&2
            exit 1
        fi
    fi

    if [ -z "$listfile" ]; then
        doclean=1
        listfile=/tmp/eachdir-$$-$RANDOM
        search . 0 >$listfile
    elif [ "$listfile" = '-' ]; then
        listfile=/dev/stdin
    fi

    while read dir; do
        _log1 "$dir: "
        if ! pushd $dir >/dev/null; then
            _log2 "    Failed to enter $dir, skipped"
            continue
        fi

        args=()
        i=0
        for arg in "$@"; do
            arg="${arg//'{}'/$dir}"
            args[i]="$arg"
            ((i++))
        done

        if [ "$background" = 1 ]; then
            bash -c "${args[*]}" &
        else
            bash -c "${args[*]}"
        fi

        popd >/dev/null
    done <$listfile

    if [ "$doclean" = 1 ]; then
        rm -f $listfile
    fi
}

boot "$@"
