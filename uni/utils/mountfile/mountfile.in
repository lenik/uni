#!/bin/bash
    . shlib-import cliboot

    RCSID='$Id: - @VERSION@ @DATE@ @TIME@ - $'
    short_opts="rthqv"
    long_opts="readonly,tracking,help,quiet,verbose,version"

    readonly=
    tracking=

function version() {
    parse_id "$RCSID"
    echo "[$BASENAME] Mount a file image by loop device"
    echo "Written by Lenik, Version $rcs_rev, Last updated at $rcs_date"
}

function help() {
    version
    echo
    echo "Syntax: "
    echo "    $0 [OPTION] [--] FILES"
    echo
    echo "Options: "
    echo "    -r, --readonly          Mount as read-only"
    echo "    -t, --tracking          Mount as read-only with tracking fs"
    echo "    -q, --quiet             Repeat to get less info"
    echo "    -v, --verbose           Repeat to get more info"
    echo "    -h, --help              Show this help page"
    echo "        --version           Print the version info"
}

function setopt() {
    case "$1" in
        -r|--readonly)
            readonly=1;;
        -t|--tracking)
            readonly=1
            tracking=1
            ;;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    err=0
    fs=auto
    mount_opts=loop

    if [ "$readonly" = 1 ]; then
        mount_opts="$mount_opts,ro"
    fi

    for file in "$@"; do
        if [ ! -r "$file" ]; then
            echo "File $file isn't readable. " >&2
            exit 1
        fi
        autodir="${file%.*}"
        if [ "$autodir" = "$file" ]; then
            autodir="$file..mnt"
        fi

        mountpoint="$autodir"
        if [ "$tracking" = 1 ]; then
            mountpoint=".$mountpoint.orig"
        fi

        case "${file##*.}" in
            zip) echo "Zip fs isn't supported. "; exit 1;;
            ext2) fs=ext2;;
            ext3) fs=ext3;;
            ext4) fs=ext4;;
            ntfs) fs=ntfs;;
            squashfs) fs=squashfs;;
            vfat) fs=vfat;;
        esac

        _log1 "Mount $fs:${file##*/} at $mountpoint"

        if [ ! -d "$mountpoint" ]; then
            if ! mkdir -p "$mountpoint"; then
                echo "Can't create mount point $mountpoint" >&2
                exit 1
            fi
        fi
        if ! mount -o "$mount_opts" -t $fs "$file" "$mountpoint"; then
            echo "Failed to mount $file" >&2
            err=1
        fi

        if [ "$tracking" = 1 ]; then
            trackdir="$autodir.track"
            mkdir -p "$trackdir"

            aufsdir="$autodir"
            _log1 "Mount aufs at $aufsdir"
            if [ ! -d "$aufsdir" ]; then
                if ! mkdir -p "$aufsdir"; then
                    echo "Can't create aufs dir $aufsdir" >&2
                    exit 1
                fi
            fi
            if ! mount -t aufs -o "dirs=$trackdir:$mountpoint" none "$aufsdir"; then
                echo "Failed to mount aufs" >&2
                err=1
            fi
        fi
    done

    exit $err
}

boot "$@"
