#!/bin/bash
    . shlib-import cliboot

    RCSID='$Id: bash.sh 2255 2011-01-01 06:58:58Z lenik $'
    short_opts="hqv"
    long_opts="help,quiet,verbose,version"

    VCS_DEFAULT=git
      VCS_PROBE=

    VCS_bazaar=(bzr)
       VCS_cvs=(cvs)
       VCS_git=(git)
 VCS_mercurial=(hg)
       VCS_rcs=(rcs)
       VCS_svn=(svn)

    cmdline=("$@")

function version() {
    parse_id "$RCSID"
    echo "[$BASENAME] Common VCS commands dispatcher"
    echo "Written by Lenik, Version 0.$rcs_rev, Last updated at $rcs_date"
}

function help() {
    version
    echo
    echo "Syntax: "
    echo "    $0 [OPTION|VCS-OPTION] [--] CMD|VCS-CMD ARGS|VCS-ARGS"
    echo
    echo "Options: "
    echo "    -q, --quiet             Repeat to get less info"
    echo "    -v, --verbose           Repeat to get more info"
    echo "    -h, --help              Show this help page"
    echo "        --version           Print the version info"
    echo
    echo "VCS-Command: "
    echo "  add-dir                 Add a directory without its contents"
    echo "  checkout-branch(cobr)   Create a branch if it's not existed, and switch to it"
    echo "  commit+ (ci+)           Commit with minor version increased (autover)"
    echo "  grep (egrep, fgrep, pgrep) GREP but excludes VCS dir"
    echo "  ignore (ig)             Manipulate ignore list"
    echo "  system (sys)            Print the VCS system to use"
    echo "  url [-r]                Print the URL (-r for root) which can be checked out"
}

function setopt() {
    case "$1" in
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    for p in \
            svn=.svn \
            svn=_svn \
            git=.git \
            mercurial=.hg \
            rcs=.rcs \
            cvs=CVS \
            ; do
        sys=${p%%=*}
        pred="${p#*=}"
        if [ -d "$pred" ]; then
            _log2 "Detected VCS system $sys"
            VCS_PROBE=$sys
            break
        fi
    done

    [ -z "$VCS_PROBE" ] && git-probe `readlink -f .`

    if [ -n "$VCS_PROBE" ]; then
        VCS=$VCS_PROBE
    else
        if [ -f ~/.vcs ]; then
            VCS=`cat ~/.vcs`
        else
            VCS=$VCS_DEFAULT
        fi
    fi

    _log2 "Using VCS: $VCS"

    delegate=

    cmd="$1"
    shift

    case "$cmd" in
        sys|system)
            if [ -n "$VCS_PROBE" ]; then
                echo "$VCS_PROBE"
            else
                if [ "$1" = "-f" ]; then
                    if [ -n "$2" ]; then
                        echo "$2"
                    else
                        echo "$VCS"
                    fi
                else
                    exit 1
                fi
            fi
            ;;

        url)
            [ -z `type -t ${VCS}-url` ] && die "$VCS url isn't implemented. "
            ${VCS}-url "$@"
            ;;

        cobr|checkout-branch)
            ${VCS}-cobr "$@"
            ;;

        ci+|commit+)
            die "Not implemented. "
            ;;

        grep|egrep|fgrep|pgrep)
            GREPOPTS=(-`uc -e ${cmd:0:1}`)
            if [ -z `type -t ${VCS}-grep` ]; then
                cmdline=(grep "${GREPOPTS[@]}" "$@")
                delegate=1
            else
                ${VCS}-grep "${GREPOPTS[@]}" "$@"
            fi
            ;;

        add-dir)
            if [ -z `type -t ${VCS}-add-dir` ]; then
                cmdline=(add "$@")
                delegate=1
            else
                ${VCS}-add-dir "$@"
            fi
            ;;

        ig|ignore)
            export -f ${VCS}-il ${VCS}-setil
            vcscmd-ignore --read ${VCS}-il --write ${VCS}-setil "$@"
            ;;

        *)
            delegate=1;;
    esac
    [ -z "$delegate" ] && return

    VCScmd="VCS_${VCS}[0]"
    VCS_CMD=${!VCScmd}

    _log2 "Delegate to $VCS_CMD ${cmdline[@]}"
    $VCS_CMD "${cmdline[@]}"
}


# Git Implementation
# ------------------

    function git-probe() {
        local d="$1"
        [ -z "$d" ] && return 1
        if [ -d "$d/.git" ]; then
            VCS_PROBE=git
            git_root="$d"
            return 0
        fi
        git-probe "${d%/*}"
    }

    function git-add-dir() {
        _log2 "git add-dir do nothing. "
    }

    function git-il() {
        local d="$1"
        [ -z "$d" ] && die "Not a Git checkout. "

        if [ -f "$d/.gitignore" ]; then
            cat "$d/.gitignore"
        fi

        if [ ! -d "$d/.git" ]; then
            [ "${d:0:1}" = '/' ] || d=`readlink -f "$d"`
            git-il "${d%/*}"
        fi
    }

    git_stage_il=
    function git-setil() {
        local d="$1"
        local start="$2"
        [ -z "$d" ] && die "Not a Git checkout. "
        [ -z "$start" ] && start="$d"

        if [ -f "$d/.gitignore" ]; then
            cat >"$d/.gitignore"
            [ -n "$git_stage_il" ] && git add "$d/.gitignore"
            return
        fi

        if [ -d "$d/.git" ]; then
            _log2 "No .gitignore found in the path ancestors. "
            _log2 "Create a new one in the start point"
            cat >"$start/.gitignore"
            [ -n "$git_stage_il" ] && git add "$start/.gitignore"
        else
            [ "${d:0:1}" = '/' ] || d=`readlink -f "$d"`
            git-setil "${d%/*}" "$start"
        fi
    }

    function git-cobr() {
        local name="$1"
        shift
        git branch "$name"
        git checkout "$name" "$@"
    }


# SVN Implementation
# ------------------

    function svn-url() {
        local m=URL k v
        if [ "$1" = '-r' ]; then
            m="Repository Root"
            shift
        fi
        LANG=C svn info "$@" | while IFS=: read k v; do
            while [ "${v:0:1}" = ' ' ]; do
                v="${v# }"
            done
            if [ "$k" = "$m" ]; then
                echo "$v"
                return
            fi
        done
        false
    }

    function svn-add-dir() {
        svn add --depth empty "$@"
    }

    function svn-grep() {
        grep -r --exclude-dir .svn --color=auto "$@" .
    }

    function svn-il() {
        svn propget svn:ignore "$1"
    }

    function svn-setil() {
        grep -v '^$' | svn propset svn:ignore -F - "$1"
    }

    function svn-cobr() {
        die "SVN-cobr isn't implemented, yet. "
    }

boot "$@"
