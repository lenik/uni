#!/bin/bash
# master-file
    . shlib

    RCSID='$Id: bash.sh -1   $'
    short_opts="D:t:fhqv"
    long_opts="define,template,force,help,quiet,verbose,version"

    import cliboot

    force=
    template=
    self="${0##*/}"
    if [ "${self:0:4}" = "new-" ]; then
        template="${self:4}"
    fi

function version() {
    parse_id "$RCSID"
    echo "[$BASENAME] Generate new file from template"
    echo "Written by Lenik, Version 0.$rcs_rev, Last updated at $rcs_date"
}

function help() {
    version
    echo
    echo "Syntax: "
    echo "    new [OPTIONS] [--] TemplateName File [KEY=VALUE...]"
    echo "    new-TemplateName [OPTIONS] [--] File [KEY=VALUE...]"
    echo "    new* [OPTIONS] -t TemplateName [--] File [KEY=VALUE...]"
    echo
    echo "Options: "
    echo "    -D, --define=KEY=VALUE  redefine variables"
    echo "    -t, --template=NAME     specifiy the template to use"
    echo "    -f, --force             overwrite existing files"
    echo "    -q, --quiet             repeat to get less info"
    echo "    -v, --verbose           repeat to get more info"
    echo "    -h, --help              show this help page"
    echo "        --version           print the version info"
}

function setopt() {
    case "$1" in
        -D|--define)
            e="$2"
            key="${e%%=*}"
            val="${e#*=}"
            if [ "$key" = "$e" ]; then
                val=
            fi
            # _log1 "define $k = $v"
            eval "_DefVar_$key=\"$val\""
            eval "_HasVar_$key=1";;
        -t|--template)
            template="$2";;
        -f|--force)
            force=1;;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    if [ -z "$template" ]; then
        if [ -z "$1" ]; then
            echo "Template name isn't specified. "
            exit 1
        fi
        template="$1"
        shift
    fi

    tmplf=
    if [ -f "$template" ]; then
        tmplf="$template"
    else
        # find first non-.ini file.
        for t in @newtmpldir@/$template @newtmpldir@/$template.*; do
            if [ "${t##*.}" = ini ]; then
                continue
            fi
            if [ -f "$t" ]; then
                tmplf="$t"
                break
            fi
        done
    fi

    if [ -z "$tmplf" ]; then
        echo "Undefined template: $template. "
        exit 2
    fi

    if [ -z "$1" ] || [ "$1" = '-' ]; then
        out=/dev/stdout
        _DefVar___FILE__=-
    else
        out="$1"
        shift
        _DefVar___FILE__="$out"
        if [ -e "$out" ] && [ "$force" != 1 ]; then
            echo "File already existed: $out"
            exit 1
        fi
    fi

    for e in "$@"; do
        key="${e%%=*}"
        val="${e#*=}"
        if [ "$key" = "$e" ]; then
            val=
        fi
        eval "_DefVar_$key=\"$val\""
        eval "_HasVar_$key=1"
    done

    sed_args=()
    sed_i=0
    while read attr; do
        qname=${attr#@}
        qname=${qname%@}

        var=_DefVar_$qname
        val="${!var}"
        if [ -z "$val" ]; then
            # empty string or undefined?
            findname=$qname
            found=0
            while [ -n "$findname" ]; do
                hasvar=_HasVar_$findname
                if [ "${!hasvar}" = 1 ]; then
                    shortvar=_DefVar_$findname
                    val="${!shortvar}"
                    found=1
                    break
                fi
                findname="${findname:0:${#findname}-1}"
            done
            if [ "$found" != 1 ]; then
                read -p "Enter a value for attribute $qname: " val </dev/tty
            fi
        fi

        esc="${val//\\/\\\\}"
        esc="${esc//\//\\\/}"

        sed_args[$sed_i]=-e
        ((sed_i++))

        sed_args[$sed_i]="s/@$qname@/$esc/g"
        ((sed_i++))
    done < <(egrep -o '@[a-zA-Z0-9_-]+@' "$tmplf" | sort -u)

    echo "Write $f..."
    sed "${sed_args[@]}" <"$tmplf" >"$out"

    if [ "$out" != /dev/stdout ]; then
        chmod --reference "$tmplf" "$out"
    fi

    return 0
}

boot "$@"
