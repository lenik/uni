#!/bin/bash
    . shlib-import cliboot

    shopt -s nullglob

    RCSID='$Id: bash.sh 2141 2010-12-13 06:15:26Z lenik $'
    short_opts="efplzuwhqv"
    long_opts="eval,fileonly,print,list,last,unix,windows,help,quiet,verbose,version"

    eval=
    fileonly=
    show=
    list=
    last=
    style=

function version() {
    parse_id "$RCSID"
    echo "[$BASENAME] Find file by prefix-chain"
    echo "Written by Lenik, Version 0.$rcs_rev, Last updated at $rcs_date"
}

function help() {
    version
    echo
    echo "Syntax: "
    echo "    $0 [OPTION] [--] package DIRLIST"
    echo
    echo "Options: "
    echo "    -e, --eval              Print shell commands to be evaluated"
    echo "    -f, --file-only         Find file only"
    echo "    -p, --print             Print the result"
    echo "    -l, --list              List all matched paths"
    echo "    -z, --last              Get the last match"
    echo "    -u, --unix              Path format in Unix style"
    echo "    -w, --windows           Path format in Windows style"
    echo "    -q, --quiet             Repeat to get less info"
    echo "    -v, --verbose           Repeat to get more info"
    echo "    -h, --help              Show this help page"
    echo "        --version           Print the version info"
}

function setopt() {
    case "$1" in
        -e|--eval)
            eval=1;;
        -f|--file-only)
            fileonly=1;;
        -p|--print)
            show=1;;
        -l|--list)
            list=1;;
        -z|--last)
            last=1;;
        -u|--unix)  # not used
            style=unix;;
        -w|--windows)  # not used
            style=win32;;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function show() {
    if [ -z "$eval" ]; then
        echo "$@"
    else
        echo "echo \"$*\""
    fi
}

function show_error() {
    if [ -z "$eval" ]; then
        echo "$@" >&2
        return 0
    else
        echo "echo \"$*\" >&2; false"
        return 1
    fi
}

function main() {
    [ $# = 0 ] && die "No name specified. "

    # WARNING: should avoid symbolic link loop

    package="$1"
    inner=
        shift
        # if package.contains '/'
        if [ "${package/\/}" != "$package" ]; then
            inner="/${package#*/}"
            package="${package%%/*}"
        fi

    roots=
    root=
    groups=
    if [ $# -lt 1 ]; then
        for d in /lam/*; do
            roots="$roots|$d"
        done
    else
        for arg in "$@"; do
            if [ "${arg: -1}" = '/' ]; then
                if [ "$arg" != '/' ]; then
                    arg="${arg::${#arg}-1}"
                 fi
            fi
            roots="$roots|$arg"
        done
    fi
    roots="${roots:1}"

    # root-loop
    _home=
    while [ -n "$roots" ]; do
        if  [ "${roots/|}" = "$roots" ]; then
            root="$roots"
            roots=
        else
            root="${roots%%|*}"
            roots="${roots#*|}"
        fi
        if [ "$root" = '/' ]; then root=; fi
        # echo "root: $root"

        groups=
        for d in "$root/"*.d "$root/"\[*\]; do
            groups="$groups$d|"
        done

        if [ -n "$groups" ]; then
            if [ -z "$roots" ]; then groups="${groups::${#groups}-1}"; fi
            roots="$groups$roots"
        fi

        # xdir-loop
        _xdir=
        while [ -z "$_home" -o "$list" = 1 ]; do
            local prefix="$package"
            # if exist p/prefix* found.
            for f in "$root/$_xdir$prefix"*; do
                if [ "${f: -1}" = '*' ]; then continue; fi

                if [ "$fileonly" = 1 ]; then
                    if [ ! -f "$f" ]; then continue; fi
                else
                    if [ ! -d "$f" ]; then continue; fi
                fi

                # FOUND
                if [ -z "$_home" -o "$last" = 1 ]; then
                    _home="$f"
                fi
                if [ "$list" = 1 ]; then
                    echo "$f"
                elif [ -z $last ]; then
                    break
                fi
            done
            if [ -n "$_home" ]; then
                if [ "$list" = 1 ]; then
                    break #xdir-loop
                else
                    break 2 #root-loop
                fi
            fi

            # do { if exist p/prefix -> xdir-loop } while chop(prefix)
            while [ ${#prefix} -gt 0 ]; do
                # echo "  prefix=$prefix"
                if [ -d "$root/$_xdir$prefix" ]; then
                    _xdir="$_xdir$prefix/"
                    continue 2 #xdir-loop
                fi
                prefix="${prefix::${#prefix}-1}"
            done

            # can't go deeper, try next root
            break #xdir-loop
        done #xdir-loop
    done #root-loop
    # _xdir="$_xdir${_home##*/}"

    if [ -z "$_home" ]; then
        show_error "Not found: $package"
        return 1
    fi

    if [ "$show" = 1 ]; then
        show "$_home"
    fi
    if [ -n "$inner" ]; then
        if [ -z "$eval" ]; then
            die "Can't chdir the parent process"
        else
            echo "cd \"$_home$inner\""
        fi
    fi

    return 0
}

boot "$@"
