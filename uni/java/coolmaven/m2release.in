#!/bin/bash
    . shlib
    import cliboot
    import loadpom

    shopt -s nullglob

    RCSID='$Id: - @VERSION@ @DATE@ @TIME@ - $'
    CONFDIR="$HOME/.m2"
    PROJECT_LIST="$CONFDIR/PROJECT-LIST"
    MODULES="$CONFDIR/MODULES"
    DEPENDS="$CONFDIR/DEPENDS"
    RDEPENDS="$CONFDIR/RDEPENDS"

    short_opts="abI:i:j:frhqv"
    long_opts="all-modules,refresh,setver:,incr:,incr-auto:,fast,recursive,help,quiet,verbose,version"

    all_modules=
    refresh=
    version_spec=1
    version_incr=1
    vcs_auto=
    recursive=
    deploy=1

function version() {
    parse_id "$RCSID"
    echo "[$BASENAME] "
    echo "Written by Lenik, Version $rcs_rev, Last updated at $rcs_date"
}

function help() {
    version
    echo
    echo "Syntax: "
    echo "    $0 [OPTION] [--] [<new-version>]"
    echo
    echo "Options: "
    echo "    -b, --refresh           Force to refresh the project dependencies"
    echo "    -I, --setver=X.Y-Z      Set the explicit version"
    echo "    -i, --incr=X.Y-Z        Increase the version, and set the modifier to Z"
    echo "    -j, --incr-auto=X.Y-Z   Increase the version only if vcs dirty"
    echo "    -a, --all-modules       Reset all modules' version"
    echo "    -r, --recursive         Recursive increase all modules"
    echo "    -f, --fast              Skip maven deploy"
    echo "    -q, --quiet             Repeat to get less info"
    echo "    -v, --verbose           Repeat to get more info"
    echo "    -h, --help              Show this help page"
    echo "        --version           Print the version info"
    echo
    echo "Configurations (in ~/.m2/):"
    echo
    echo "   PROJECT-LIST    List of paths of all concerned projects"
    echo "   MODULES         Generated list of all modules"
    echo "                       GID:AID:PATH"
    echo "   DEPENDS         Generated list of dependencies of by each module in all projects"
    echo "                       GID:AID:DEP_GID:DEP_AID"
    echo "   RDEPENDS        Reversed dependencies"
    echo "                       DEP_GID:DEP_AID:GID:AID"
}

function setopt() {
    case "$1" in
        -a|--all-modules)
            all_modules=1;;
        -b|--refresh)
            refresh=1;;
        -I|--setver)
            version_spec="$2"
            version_incr=0;;
        -i|--incr)
            version_spec="$2"
            version_incr=1;;
        -j|--incr-auto)
            vcs_auto=1
            version_spec="$2"
            version_incr=1;;
        -f|--fast)
            deploy=;;
        -r|--recursive)
            recursive=1;;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {

    if [ -n "$1" ]; then
        version_spec="$1"
        shift
    fi

    [ -f "$PROJECT_LIST" ] || die "You haven't set up $PROJECT_LIST yet."

    # Do refresh when necessary.

        if [ "$refresh" = 1 ] \
                || [ ! -f "$MODULES" ] \
                || [ ! -f "$DEPENDS" ] \
                || [ ! -f "$RDEPENDS" ]; then

            _log1 "Refresh project dependencies"

            rm -f "$MODULES"
            rm -f "$DEPENDS"
            rm -f "$RDEPENDS"

            RDEPENDS_TMP=`tempfile`

            while read path; do
                [ -z "$path" ] && continue
                [ "${path:0:1}" = '#' ] && continue
                project_analyze "$path"
            done <"$PROJECT_LIST"

            sort -u "$RDEPENDS_TMP" >"$RDEPENDS"
            rm -f "$RDEPENDS_TMP"
        fi

    # Where to be start?

        module_path=`m2which "$PWD"`  || die "Failed to get current module"
        root_path=`m2which -r "$PWD"` || die "Failed to get root module"

        _log2 "Current Module-Path: $module_path"
        _log2 "Current Root-Path:   $root_path"

        loadpom "$module_path/pom.xml" 1
        module="$project_group_id:$project_artifact_id"

        if [ "$vcs_auto" ]; then
            dirty=
            while read st_entry; do
                dirty=1
            done < <(vcscmd slist "$module_path" | grep '^[ADM]')

            if [ -z "$dirty" ]; then
                _log1 "VCS clean, release canceled"
                exit 0
            fi
        fi

        if [ "$version_incr" = 1 ]; then
            new_version=`version_add "$project_version" "$version_spec"`
        else
            new_version="$version_spec"
        fi

    # Always increase the version at first.
    set_version "$module" "$new_version"

    # Deploy the new version
    if [ "$deploy" = 1 ]; then
        (cd "$module_path"
            mvn "${MVNOPTS[@]}" deploy
        ) || die "Failed to deploy"
    fi

    # Do the final commit.
        # Prepare release notes.
        NOTES="$root_path/RELEASE-NOTES"
            rm -f "$NOTES"
            touch $NOTES
            if ! ifedit $NOTES; then
                _warn "No change on $NOTES, canceled"
                exit 0
            fi

        commit_file=`tempfile`
            echo -n "Released $module-$new_version" >$commit_file
            for release in "${releases[@]}"; do
                echo -n "$release" >>$commit_file
            done
            echo >>$commit_file
            echo >>$commit_file
            cat $NOTES >>$commit_file

        pushd "$module_path" >/dev/null

            _log2 "Add $module_path to commit"
            # vcscmd add "$NOTES"
            vcscmd add . || die "Failed to add"

            _log2 "Commit $module_path"
            vcscmd commit -F $commit_file || die "Failed to commit"

        popd >/dev/null

    # Clean and exit.
        rm $NOTES
        echo Done.
}

function project_analyze() {
    local project_dir="$1"
    local project_pom="$project_dir/pom.xml"

    _log2 "Analyze $project_pom"

    if [ ! -f "$project_pom" ]; then
        die "File isn't existed: $project_pom"
    fi

    loadpom "$project_pom" 1
    if [ "$project_group_id:$project_artifact_id" = ":" ]; then
        _log2 "    Skipped virtual project"
        return 0
    fi

    _log2 "    Module: $project_group_id:$project_artifact_id"

    echo "$project_group_id:$project_artifact_id:$project_dir" >>"$MODULES"

    while read l; do
        k="${l%%=*}"
        v="${l#*=}"
        case "$k" in
            /project/dependencies/dependency/groupId)       d_gid="$v";;
            /project/dependencies/dependency/artifactId)    d_aid="$v";;
            /project/dependencies/dependency/version)       d_ver="$v";;
            /project/dependencies/dependency/type)          d_type="$v";;
            /project/dependencies/dependency/scope)         d_scope="$v";;
            /project/dependencies/dependency)
                flush_dep
                d_gid=
                d_aid=
                d_ver=
                d_type=jar
                d_scope=compile
               ;;
        esac
    done < <(xml2 <"$project_pom")

    if [ -n "$d_aid" ]; then flush_dep; fi

    for pom in "$project_dir"/*/pom.xml; do
        project_analyze "${pom%/pom.xml}"
    done
}

# DEPENDS         Generated list of dependencies of by each module in all projects
#                       GID:AID:DEP_GID:DEP_AID [:DEP_VER:DEP_PACK:DEP_SCOPE Not used.]
# RDEPENDS        Reversed dependencies
#                       DEP_GID:DEP_AID:GID:AID
function flush_dep() {
    local _this="$project_group_id:$project_artifact_id"
    local _dep="$d_gid:$d_aid"

    if [ -z "$_this" ] || [ -z "$_dep" ]; then
        die "Invalid dependency: $this -> $_dep"
    fi

    echo "$_this:$_dep:$d_ver:$d_type:$d_scope" >>$DEPENDS
    echo "$_dep:$_this" >>$RDEPENDS_TMP
}

function version_add() {
    local base="$1"
    local delta="$2"
    local result=

    local base_tag="${base#*-}"
    if [ "$base_tag" = "$base" ]; then
        base_tag=
    else
        base="${base%%-*}"
    fi

    local delta_tag="${delta#*-}"
    if [ "$delta_tag" = "$delta" ]; then
        delta_tag=
    else
        delta="${delta%%-*}"
        if [ -z "$delta_tag" ]; then
            delta_tag='SNAPSHOT'
        fi
    fi

    while [ -n "$delta" ]; do
        if [ -z "$base" ]; then
            die "Base version underflow: remaind delta: $delta"
        fi

        local b1="${base##*.}"
        if [ "$b1" = "$base" ]; then
            base=
        else
            base="${base%.*}"
        fi

        local d1="${delta##*.}"
        if [ "$d1" = "$delta" ]; then
            delta=
        else
            delta="${delta%.*}"
        fi

        local r1=$((b1 + d1))

        if [ -z "$result" ]; then
            result="$r1"
        else
            result="$r1.$result"
        fi
    done

    if [ -n "$base" ]; then
        if [ -z "$result" ]; then
            result="$base"
        else
            result="$base.$result"
        fi
    fi

    local suffix=
    if [ "$keep_tag" = 1 ]; then
        suffix="$base_tag"
    else
        suffix="$delta_tag"
    fi

    [ -n "$suffix" ] && result="$result-$suffix"
    echo "$result"
}

function module_path() {
    local mod="$1"
    local mod_path=

    while IFS=: read gid aid path; do
        if [ -n "$mod_path" ]; then
            die "Duplicated occurrence of $mod in $MODULES"
        fi
        mod_path="$path"
    done < <(grep "^$mod:" "$MODULES")

    echo "$mod_path"
}

function set_version() {
    local mod="$1"
    local version="$2"
    local indent="$3"
    local mod_path=`module_path "$mod"`

    [ -n "$mod_path" ] || die "Unknown module $mod"

    # The delta version is also supported here.
    if [ "${version:0:1}" = '+' ]; then
        local spec="${version#+}"
        loadpom "$mod_path/pom.xml"
        local tag="${project_version##*-}"
        if [ "$tag" = "SNAPSHOT" ]; then
            # Skip tags
            return
        fi
        version=`version_add "$project_version" "$spec"`
    fi

    set_project_ver "$mod_path" "$version"

    local tmp=`tempfile`

    local dep_path
    local r_deps r_dep ndirty
    local key val
    while IFS=: read gid aid r_gid r_aid; do
        r_path=`module_path "$r_gid:$r_aid"`
        _log1 "$indent  Update: $r_path"

        local dirty=0
        local ctx_gid=
        local ctx_aid=
        while read line; do
            local key="${line%%=*}"
            if [ "$key" = "$line" ]; then
                val=
            else
                val="${line#*=}"
            fi

            case "$key" in
            /project/dependencies/dependency/groupId)
                ctx_gid="$val";;

            /project/dependencies/dependency/artifactId)
                ctx_aid="$val";;

            /project/dependencies/dependency/version)
                if [ "$ctx_gid:$ctx_aid" = "$mod" ]; then
                    if [ "$val" != "$version" ]; then
                        val="$version"
                        dirty=1
                    fi
                fi;;

            /project/dependencies/dependency)
                ctx_gid=
                ctx_aid=
                ;;
            esac

            if [ -n "$val" ]; then
                echo "$key=$val"
            else
                echo "$key"
            fi
        done < <(xml2 <"$r_path/pom.xml") >$tmp

        2xml < $tmp | tr -d '\n' | xmlindent -fnbe >"$r_path/pom.xml"

        if [ "$dirty" = 1 ]; then
            r_deps[ndirty++]="$r_gid:$r_aid"
        fi

    done < <(grep "^$mod:" "$RDEPENDS")

    if [ "$recursive" = 1 ]; then
        for r_dep in "${r_deps[@]}"; do
            set_version "$r_dep" +1 "$indent  "
        done
    fi
}

function set_project_ver() {
    local path="$1"
    local ver="$2"
    local tmp=`tempfile`

    _log1 "Set project version to $ver: $path"

    xml2 <"$path/pom.xml" | sed \
        -e "s|/project/version=.*|/project/version=$version|" \
        | 2xml | tr -d '\n' | xmlindent -fnbe >$tmp
    mv -f $tmp "$path/pom.xml"

    if [ "$all_modules" = 1 ]; then
        local sub_pom
        for sub_pom in "$path"/*/pom.xml; do
            local sub_dir="${sub_pom%/pom.xml}"
            set_project_ver "$sub_dir" "$ver"
        done
    fi
}

boot "$@"
exit 0
