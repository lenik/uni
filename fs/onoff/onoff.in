#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PACKAGE:=@PACKAGE@}
    : ${PROGRAM_TITLE:=Filename-based functionality toggler}
    : ${PROGRAM_SYNTAX:=[OPTIONS] [--] ...}

    . shlib-import cliboot
    option -o --opt =OPTIONS    "Send options to the sub-module"
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    pkgdatadir=@pkgdatadir@
    if [ ! -d "$pkgdatadir" ]; then
        __FILE__=$( readlink -f "$0" )
        __DIR__="${__FILE__%/*}"
         if [ -f "$__DIR__/VERSION.av" ]; then
            pkgdatadir="${__DIR__}"
        fi
    fi

    subopts=()

function setopt() {
    case "$1" in
        -o|--opt)
            subopts=( "${subopts[@]}" "$2" )
            ;;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1))
            subopts=( "${subopts[@]}" -q )
            ;;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1))
            subopts=( "${subopts[@]}" -v )
            ;;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    shopt -s nullglob

    binfile="$0"
    binname="${binfile##*/}"
    case "$binname" in
        *on*)
            act=on;;
        *off*)
            act=off;;
        *)
            quit "Unknown program name: $binname";;
    esac

    declare -A extmap
    for d in "$pkgdatadir" "$HOME/.config"; do
        mapdir="$d/mapping"
        for mf in "$mapdir"/*; do
            _log2 "Load mapping file $mf"
            while IFS='= ' read k v; do
                [ -z "$k" ] && continue
                [ "${k:0:1}" = '#' ] && continue
                _log3 "    extension $k -> $v"
                extmap["$k"]="$v"
            done <"$mf"
        done
    done
    # echoli "${!extmap[@]}"

    for f in "$@"; do
        if [ -d "$f" ] || [ ! -e "$f" ]; then
            siblings=( $f.* )
            nsibling=${#siblings[@]}
            if [ $nsibling = 1 ]; then
                f=${siblings[0]}
            fi
        fi

        dir="${f%/*}"
        base="${f##*/}"
            if [ "$dir" = "$f" ]; then
                dir=.
            fi

        name="${base%.*}"
        ext="${base##*.}"
            if [ "$name" = "$base" ]; then
                ext=
            else
                ext=".$ext"
            fi
        
        fn="${extmap[$ext]}"
            if [ -z "$fn" ]; then
                fn="${ext#.}"
            fi
            _log2 "Functionality: $fn"
        
        sub="onoff-$fn"
        if ! subf=$( which "$sub" ); then
            _error "File isn't supported: $f, ignored."
            continue
        fi
        
        _log1 "Turn $act $fn: $f"
        "$sub" "${subopts[@]}" $act "$f"
    done
}

boot "$@"
