#include <assert.h>
#include <glib.h>

#include <bas/cli.h>
#include <bas/file.h>

#include "config.h"
#include "ai.h"

static GOptionEntry options[] = {
    OPTION('c', "stdout", "Write to stdout instead of the file"),
    OPTION('k', "keep", "Keep the original files, don't delete them"),
    OPTARG('i', "keyfile", "A data file contains the key for encryption"),

    OPTION('f', "force", "Force to overwrite existing files"),
    OPTION('q', "quiet", "Show less verbose info"),
    OPTION('v', "verbose", "Show more verbose info"),
    OPTION(0, "version", "Show version info"),
    { NULL },
};

bool opt_stdout = false;
bool opt_streaming = true;
bool opt_keep= false;
char *opt_keyfile = NULL;               /* also the environ AI_KEYFILE */

char *keydata = NULL;
size_t keysize = 0;

gboolean parse_option(const char *_opt, const char *val,
                      gpointer data, GError **err) {
    const char *opt = _opt;

    bool shortopt = opt++[1] != '-';
    while (*opt == '-')
        opt++;

    if (shortopt)                       /* normalize mixed options. */
        switch (*opt) {
        case 'i':
            opt = "keyfile";
            shortopt = false;
            break;
        }

    switch (*opt) {
    case 'c':
        if (shortopt || streq(opt, "stdout")) {
            opt_stdout = true;
            return true;
        }
        break;

    case 'k':
        if (shortopt || streq(opt, "keep")) {
            opt_keep = true;
            return true;
        }
        if (streq(opt, "keyfile")) {
            opt_keyfile = strdup(val);
            return true;
        }
        break;
    }

    return _parse_option(_opt, val, data, err);
}

int main(int argc, char **argv) {
    program_title = "Ascii-Art Decoder   Version " PACKAGE_VERSION;
    program_help_args = "FILES";

    if (! parse_options(options, &argc, &argv))
        return 1;

    if (opt_stdout)
        opt_keep = true;

    if (opt_keyfile == NULL)
        opt_keyfile = getenv("AI_KEYFILE");
    if (opt_keyfile != NULL && *opt_keyfile) {
        keydata = load_file(opt_keyfile, &keysize, 0, 0);
        if (keydata == NULL) {
            log_perr("Can't load keyfile %s", opt_keyfile);
            return 2;
        }
        if (keysize < 1) {
            log_perr("No key data.");
            return 2;
        }
    }

    while (--argc > 0) {
        argv++;

        char *path = *argv;
        int len = strlen(path);
        char out_path[PATH_MAX];
        FILE *in;
        FILE *out;
        if (strcmp(path, "-") == 0) {
            in = stdin;
            path = "<stdin>";
        } else {
            in = fopen(path, "rb");
            if (in == NULL) {
                log_perr("Open file %s: ", path);
                continue;
            }
        }

        if (opt_stdout) {
            out = stdout;
            strcpy(out_path, "<stdout>");
        } else {
            strcpy(out_path, path);
            if (len >= 5 && strcmp(path + len - 4, ".img") == 0)
                /* decode file.img => file */
                out_path[len - 4] = '\0';
            else {
                log_err("Invalid image extension: %s", path);
                continue;
            }
        }

        bool status;
        if (opt_streaming) {
            status = ai_decode_file(path, in, out_path, out,
                                    keydata, keysize);
        } else {
            size_t in_size;
            char *in_buf = load_file(path, &in_size, 0, 0);
            if (in_buf == NULL) {
                log_err("Failed to load file %s", path);
                return 3;
            }
        
            size_t out_size;
            char *out_buf = ai_decode(in_buf, in_size, &out_size,
                                      keydata, keysize);
            status = out_buf != NULL;
            if (status) {
                fwrite(out_buf, 1, out_size, out);
                free(out_buf);
            }
            free(in_buf);
        }
        
        if (out != NULL && out != stdout)
            fclose(out);
        if (in != NULL && in != stdin) {
            fclose(in);
            if (status && !opt_keep) {
                /* Remove the original file if everything succeeded. */
                log_notice("Remove the original file %s.", path);
                unlink(path);
            }
        }
    }

    return 0;
}
