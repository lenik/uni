#include "config.h"

#include <sys/stat.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <bas/file.h>
#include <bas/log.h>

#include "ai.h"

#define E_AIR 255

extern char **environ;

bool opt_pipesym = false;
char *opt_keyfile = NULL;
char *keydata = NULL;
size_t keysize = 0;

char dtemp[] = "/tmp/XXXXXX";
char pipesym[PATH_MAX] = "";
void del_dtemp() {
    if (strlen(pipesym))
        unlink(pipesym);
    rmdir(dtemp);
}

int main(int argc, char **argv) {
    char cmd_buf[1024];
    char buf[4096];
    //char *p;
    char **pp;
    char *ai_src;
    char *ai_name;                      /* the basename of ai_src */
    char *ai_data = NULL;               /* AI-encoded bytes */
    size_t ai_size = 0;                 /* size of ai_data */
    char *data = NULL;                  /* decoded bytes */
    size_t size = 0;                    /* size of data */
    char *program = NULL;               /* the program to exec */
    char **s_argv = NULL;               /* script argv */
    char **s_env = NULL;                /* script environ */
    
    argv++;
    argc--;

    while (argc && **argv == '-') {
        char *arg = *argv;
        while (*arg == '-')
            arg++;

        if (strcmp(arg, "version") == 0) {
            printf("[air] AI image runner\n");
            printf("Written by Lenik, Version @VERSION@, Last updated at @DATE@\n");
            return 0;
        }
        
        if (strcmp(arg, "help") == 0) {
            printf("Usage: air [OPTIONS] AI-IMAGE ARGS...\n");
            printf("\n");
            printf("Options:\n");
            printf("    --help          Print this help page.\n");
            printf("    --version       Print the version information.\n");
            return 0;
        }

        break;
    }
    
    if (argc == 0) {
        fprintf(stderr, "AI source file isn't specified.\n");
        return E_AIR;
    }
    
    ai_src = *argv++;
    argc--;

    ai_name = strrchr(ai_src, '/');     /* find the basename */
    if (ai_name == NULL)
        ai_name = ai_src;
    else
        ai_name++;
    
    if (opt_keyfile == NULL)            /* environ AI_KEYFILE */
        opt_keyfile = getenv("AI_KEYFILE");
    if (opt_keyfile != NULL && *opt_keyfile) {
        keydata = load_file(opt_keyfile, &keysize, 0, 0);
        if (keydata == NULL) {
            log_perr("Can't load keyfile %s", opt_keyfile);
            return E_AIR;
        }
        if (keysize < 1) {
            log_perr("No key data.");
            return E_AIR;
        }
    }

    ai_data = load_file(ai_src, &ai_size, 0, 0); /* loading */
    if (ai_data == NULL) {
        log_err("Failed to load file %s.\n", ai_src);
        return E_AIR;
    }

    data = ai_decode(ai_data, ai_size, &size, /* decoding */
                     keydata, keysize);
    if (data == NULL) {
        log_err("Invalid data.");
        goto err;
    }

    int pipefd[2] = { 0, 0 };
    if (pipe(pipefd) != 0) {            /* setup the pipe */
        log_err("Pipe failed.");
        goto err;
    } else {
        pid_t pid = fork();
        if (pid < (pid_t) 0) {
            log_err("Fork failed.");
            goto err;
        }
        if (pid == 0) {                     /* child process */
            /* send the decoded data to the pipe. */
            close(pipefd[0]);
            FILE *pipe_out = fdopen(pipefd[1], "w");
            fwrite(data, 1, size, pipe_out);
            fclose(pipe_out);
            return 0;
        } else {
            close(pipefd[1]);
        }
    }
    
    program = ai_src;
                                        /* clone the environ */
    int envc = 0;
    pp = environ;
    while (*pp++) envc++;
    s_env = malloc(sizeof(char *) * (envc + 10));
    char **se = s_env + envc;
    memcpy(s_env, environ, sizeof(char *) * envc);
                                        /* prepare the args */
    s_argv = malloc(sizeof(char *) * (argc + 10));
    char **sa = s_argv;

                                        /* script / binary? */
    if (data[0] == '#' && data[1] == '!') {
        /* copy the first line to buf */
        int lmax = sizeof(buf);
        char *next = strchr(data, '\n');
        if (next != NULL && next - data < lmax)
            lmax = next - data;
        strncpy(buf, data, lmax);
        
        /* (#!) <interpreter> [arg1] <(unai -c ...) args... */
        char *shebang = strtok(buf, " \t\r\n");
        program = strdup(shebang + 2);
        *sa++ = program;                /* display name */

        /* don't parse the shebang args, treat as a single long arg. */
        char *arg1opt = strtok(NULL, "\0");
        if (arg1opt)
            *sa++ = arg1opt;

        char fdpath[PATH_MAX];
        sprintf(fdpath, "/dev/fd/%d", pipefd[0]);

        /* OPTIM: try to create a symlink to the pipe. */
        if (opt_pipesym) {
            if (!mkdtemp(dtemp)) {
                log_err("Failed to create tmp dir");
                goto err;
            } else {
                atexit(del_dtemp);
                strcpy(pipesym, dtemp);
                strcat(pipesym, "/");
                strcat(pipesym, ai_name);
                if (symlink(fdpath, pipesym) != 0)
                    *sa++ = pipesym;
                else
                    *sa++ = fdpath;
            }
        } else {
            *sa++ = fdpath;
        }
        
    } else {
        *sa++ = program;                /* display name */

        /* decode into a tmp file, run it then. */
        char *tmp = tempnam(NULL, "");  /* allocated */
        FILE *out = fopen(tmp, "wb");
        if (out == NULL) {
            perror("Can't write to tmp file");
            goto err;
        }

        fwrite(data, 1, size, out);
        
        fchmod(fileno(out), S_IRUSR | S_IWUSR | S_IXUSR);
        fclose(out);

        program = tmp;                  /* The real program. */
        /* TODO: remove the tmp on exit. */
    }
    
    while (argc--)
        *sa++ = *argv++;
    *sa = NULL;

    sprintf(buf, "AI_SOURCE=%s", ai_src);
    *se++ = strdup(buf);
    *se++ = NULL;
    
    // printf("execv %s\n", program);
    // sa = s_argv; while (*sa) printf("  arg: %s\n", *sa++);
    // se = s_env; while (*se) printf("  env: %s\n", *se++);
    
    execve(program, s_argv, s_env);

 err:
    return E_AIR;
}
