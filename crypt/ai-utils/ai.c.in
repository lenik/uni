#include <assert.h>
#include <glib.h>

#include <bas/cli.h>
#include <bas/file.h>

#include "config.h"
#include "ai.h"

#define TEMPLATE_DIR "@templatedir@"
#define DEFAULT_TEMPLATE "grid"

#define ASCII_L1 10
#define ASCII_L2 20
#define ASCII_L3 40

static GOptionEntry options[] = {
    OPTION('c', "stdout", "Write to stdout instead of the file"),
    OPTION('k', "keep", "Keep the original files, don't delete them"),
    OPTARG('t', "template", "Specify the template ascii art image"),
    OPTARG('i', "keyfile", "A data file contains the key for encryption"),

    OPTARG('s', "stab", "Specify the substitution table"),
    OPTARG('a', "ascii", "Specify encode level for ASCII-7 charset"),
    OPTION('u', "utf-8", "Using UTF-8 charset"),

    OPTION('f', "force", "Force to overwrite existing files"),
    OPTION('q', "quiet", "Show less verbose info"),
    OPTION('v', "verbose", "Show more verbose info"),
    OPTION(0, "version", "Show version info"),

    { NULL },
};

bool opt_stdout = false;
bool opt_keep= false;
char *opt_keyfile = NULL;               /* also the environ AI_KEYFILE */
char opt_stab8[256];                    /* 8-bit substition table  */
bool opt_ascii7 = true;
bool opt_utf8 = false;
char *opt_template = NULL;

char *keydata = NULL;
size_t keysize = 0;
char *template_image = NULL;

char *load_template(const char *name);

gboolean parse_option(const char *_opt, const char *val,
                      gpointer data, GError **err) {
    const char *opt = _opt;

    bool shortopt = opt++[1] != '-';
    while (*opt == '-')
        opt++;

    if (shortopt)                       /* normalize mixed options. */
        switch (*opt) {
        case 'i':
            opt = "keyfile";
            shortopt = false;
            break;
        }

    switch (*opt) {
    case 'a':
        if (shortopt || streq(opt, "ascii")) {
            int level = strtol(val, NULL, 0);
            if (level <= 0) {
                error("Bad ascii-7 encode level: %s\n", val);
                return false;
            }

            char *stab;
            switch (level) {
            case 1:
                stab = strndup(ascii_stab, ASCII_L1 * 2);
                break;
            case 2:
                stab = strndup(ascii_stab, ASCII_L2 * 2);
                break;
            case 3:
                stab = strndup(ascii_stab, ASCII_L3 * 2);
                break;
            default:
                stab = strdup(ascii_stab);
                break;
            }

            parse_stab(opt_stab8, stab);
            free(stab);

            opt_ascii7 = true;
            opt_utf8 = false;
            return true;
        }
        break;

    case 'c':
        if (shortopt || streq(opt, "stdout")) {
            opt_stdout = true;
            return true;
        }
        break;

    case 'k':
        if (shortopt || streq(opt, "keep")) {
            opt_keep = true;
            return true;
        }
        if (streq(opt, "keyfile")) {
            opt_keyfile = strdup(val);
            return true;
        }
        break;

    case 's':
        if (shortopt || streq(opt, "stab")) {
            parse_stab(opt_stab8, val);
            return true;
        }
        break;

    case 't':
        if (shortopt || streq(opt, "template")) {
            opt_template = strdup(val);
            return true;
        }
        break;

    case 'u':
        if (shortopt || streq(opt, "utf-8")) {
            opt_ascii7 = false;
            opt_utf8 = true;
            return true;
        }
        break;
    }

    return _parse_option(_opt, val, data, err);
}

int main(int argc, char **argv) {
    /* .section. global initialization */
    program_title = "Ascii-Art Encoder   Version " PACKAGE_VERSION;
    program_help_args = "FILES";

    /* The maximum level of ascii-7 by default. */
    parse_stab(opt_stab8, ascii_stab);

    /* .section. Software Authorization */
    /* Umm. this is a freeware. */

    /* .section. CLI boot */
    if (! parse_options(options, &argc, &argv))
        return 1;

    if (opt_stdout)
        opt_keep = true;

    if (opt_keyfile == NULL)
        opt_keyfile = getenv("AI_KEYFILE");
    if (opt_keyfile != NULL && *opt_keyfile) {
        keydata = load_file(opt_keyfile, &keysize, 0, 0);
        if (keydata == NULL) {
            log_perr("Can't load keyfile %s", opt_keyfile);
            return 2;
        }
        if (keysize < 1) {
            log_perr("No key data.");
            return 2;
        }
    }

    if (opt_template == NULL)
        opt_template = DEFAULT_TEMPLATE;
    if (opt_template != NULL)
        template_image = load_template(opt_template);

    int template_bits = 0;
    if (template_image == NULL) {
        log_err("The template image used by the encoder isn't specified.");
        return 3;
    } else {
        char *p = template_image;
        char ch;
        while ((ch = *p++)) {
            if (opt_stab8[ch])
                template_bits++;
        }

        if (template_bits == 0) {
            log_err("Bad template image: no useful bit.");
            return 4;
        }
        log_info("Useful bits in the template image: %d", template_bits);
    }

    log_info("Substition table: %s", opt_stab8);

    while (--argc > 0) {
        argv++;

        char *path = *argv;
        int len = strlen(path);
        char out_path[PATH_MAX];
        FILE *in;
        FILE *out;
        if (strcmp(path, "-") == 0) {
            in = stdin;
            path = "<stdin>";
        } else {
            in = fopen(path, "rb");
            if (in == NULL) {
                log_perr("Open file %s", path);
                continue;
            }
        }

        if (opt_stdout) {
            out = stdout;
            strcpy(out_path, "<stdout>");
        } else {
            strcpy(out_path, path);
            strcat(out_path, ".img");
            out = fopen(out_path, "wb");
        }

        bool status;
        status = ai_encode_file(path, in, out_path, out,
                                keydata, keysize,
                                opt_stab8,
                                template_image);

        if (out != NULL && out != stdout)
            fclose(out);
        if (in != NULL && in != stdin) {
            fclose(in);
            if (status && !opt_keep) {
                /* Remove the original file if everything succeeded. */
                log_notice("Remove the original file %s.", path);
                unlink(path);
            }
        }
    }

    return 0;
}

char *load_template(const char *name) {
    FILE *in = fopen(name, "rb");
    size_t size;
    size_t cb;
    int i;
    char *image;

    if (in == NULL)
        if (*name != '/') {
            char shared_image[PATH_MAX];
            strcpy(shared_image, TEMPLATE_DIR);
            strcat(shared_image, "/");
            strcat(shared_image, name);
            in = fopen(shared_image, "rb");
        }
    if (in == NULL) {
        log_perr("Open template file %s", name);
        return NULL;
    }

    fseek(in, 0, SEEK_END);
    size = ftell(in);
    fseek(in, 0, SEEK_SET);

    if (size >= 0x7fffffff) {
        log_err("File %s is too big: %ld", name, size);
        return NULL;
    }

    image = (char *) malloc(size + 1); /* +1 for the terminator. */
    if (image == NULL) {
        fclose(in);
        log_crit("Memory out");
        return NULL;
    }

    cb = fread(image, 1, size, in);
    fclose(in);

    if (cb != size) {
        free(image);
        log_perr("Read incomplete: expected %d, but read %d", size, cb);
        return NULL;
    }
    image[size] = '\0';

    /* Check if the template image text contains '\0'.  */
    for (i = 0; i < size; i++) {
        if (image[i] == '\0') {
            free(image);
            log_err("The template image contains NUL char, at offset %d", i);
            return NULL;
        }
    }

    return image;
}
