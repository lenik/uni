#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PROGRAM_TITLE:="Mount ssh points"}
    : ${PROGRAM_SYNTAX:="[OPTIONS] [--] ssh-mountpoints... (named in format user@host:port:path)"}

    . shlib-import cliboot
    option -q --quiet       "Repeat to get less info"
    option -v --verbose     "Repeat to get more info"
    option -h --help        "Show this help page"
    option    --version     "Print the version info"

    sshfs_opts=()
    sshfs_optn=0

function setopt() {
    case "$1" in
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    for dir in "$@"; do
        id="${dir%/}"
        id="${id##*/}"

        remote=
        # user@host:port:path
        # user@host::path
        user="${id%%@*}"
        if [ "$user" = "$id" ]; then
            user=
        else
            id="${id#*@}"
            remote="$user@"
        fi

        host="${id%%:*}"
        if [ "$host" = "$id" ]; then
            # no port, no path.
            id=''
        else
            id="${id#*:}"
        fi
        remote="$remote$host"

        if [ -n "$id" ]; then
            port="${id%%:*}"
            if [ "$port" = "$id" ]; then
                # no path
                id=''
            else
                id="${id#*:}"
            fi
            # remote="$remote:$port"
            sshfs_opts[sshfs_optn++]=-p
            sshfs_opts[sshfs_optn++]=$port
        fi

        rpath="${id//://}"

        _log2 "Host:         $host (port: $port)"
        _log2 "Login-User:   $user"
        _log2 "Remote-Path:  $rpath"
        _log2 "Connect-Name: $remote"

        _log2 Execute: sshfs -p $port "$remote:$rpath" "$dir"
        sshfs "${sshfs_opts[@]}" "$remote:$rpath" "$dir"
    done
}

boot "$@"
