#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PROGRAM_TITLE:="SVN Remix (Merge with re-indexing)"}
    : ${PROGRAM_SYNTAX:="[OPTIONS] [--] REPO-LIST"}

    . shlib-import cliboot
    option -s --stage =STAGE "Resume from stage"
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    stage=0

    allrepo_name=.allmixed

function setopt() {
    case "$1" in
        -s|--stage)
            stage="$2"
            if [ "${stage//[0-9]/}" != "" ]; then
                die "Stage $stage isn't a number"
            fi
            ;;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

# dump each repo to .dump/DATE.REPO.REV
function dump() {
    rm -fR .dump; mkdir -p .dump

    for d in "$@"; do
        repo_dir=`readlink -f $d`
        repo_url=`tourl $d`
        repo_name="${repo_dir##*/}"
        repo_name="${repo_name//[^a-zA-Z_0-9]/_}"

        # svn log always print revs in reversed order, the latest at first.
        # So we can fix it inline.
        nextrev_date=

        svn log $repo_url -q | grep '^r' | \
                while IFS='|' read rev author date; do
            rev=${rev#r}                # rNNN -> NNN
            date="${date# }"            # rev | author | date +...
            date="${date% +*}"

            # Fix commit date inline.
            if [ -n "$nextrev_date" ] && [ "$date" \> "$nextrev_date" ]; then
                echo -n '<'
                date="$nextrev_date"
            else
                nextrev_date="$date"
            fi

            # yyyy-mm-dd HH:MM:SS[.xx] +... => yyyy-mm-dd_HH-MM-SS.xx
            date="${date//:/-}"
            date="${date// /_}"

            svnadmin dump -r $rev --incremental $repo_dir >.dump/$date.$repo_name.$rev 2>/dev/null

            echo -n .
        done
    done
}

# fix the dump timestamp to reflect the revision order.
function fix_dump() {
    # Fixed inline. see dump().
    :
}

# touch/set the date on the dump file, and move to .reindex/SEQ.REPO.REV
function reindex() {
    rm -fR .reindex; mkdir -p .reindex

    cd .dump
    seq=0

    # Using version-sort (maybe GNU only?) to avoid dict-revision-order when
    # same date happens.
    SORT_V="sort -V"

    find . -maxdepth 1 -type f | $SORT_V | \
            while read f; do
        ((seq++))
        seqf=00000000$seq
        seqf=${seqf: -8}

        # ./file => file
        s=$f
        s=${s#./}

        rev=${s##*.}
        s=${s%.*}

        repo_name=${s##*.}
        s=${s%.*}

        date=${s%_*}
        time=${s##*_}
        dstr="$date ${time//-/:}"

        touch -d"$dstr" $f
        mv $f ../.reindex/$seqf.$repo_name.$rev
        echo -n .
    done

    cd ..
    rmdir .dump
}

function create_all() {
    # Remove if any existed.
    rm -fR $allrepo_name

    svnadmin create $allrepo_name

    topdirs=
    for d in "$@"; do
        topdirs="$topdirs $allrepo_url/$d"
    done
    svn mkdir -m "[svn-remix] Initialize top directories" $topdirs >/dev/null
}

function reload_all() {
    find .reindex -maxdepth 1 -type f | sort -V |
    while read f; do
        s=${f##*/}

        # SEQ.REPO.REV
        seq=${s%%.*}
        seq=$((1$seq-100000000+1))
        s=${s#*.}

        repo=${s%.*}
        rev=${s#*.}

        if svnadmin load --parent-dir $repo $allrepo_dir <$f >/dev/null; then
            echo -n .
        else
            echo Error loading $f
            echo "Command: svnadmin load --parent-dir $repo $allrepo_dir <$f"
            exit 1
        fi

        current=`svnlook youngest $allrepo_dir`
        if [ $seq != $current ]; then
            echo "Expect revision $seq, but current is $current"
            #exit 2
        fi
    done
}

function main() {
    if [ $stage -le 1 ]; then
        echo "1. Dump all repos: date.repo.rev (with fix)"
        dump "$@"
        echo
    fi

    if [ $stage -le 2 ]; then
        echo "2. Fix dump timestamp to reflect the revision order. (obsoleted)"
        fix_dump
        echo
    fi

    if [ $stage -le 3 ]; then
        echo "3. Re-Index: seq.repo.rev"
        reindex
        echo
    fi

    allrepo_dir=`readlink -f $allrepo_name`
    allrepo_url=`tourl       $allrepo_name`

    if [ $stage -le 4 ]; then
        echo "4. Create all repo: $allrepo_dir"
        create_all "$@"
        echo
    fi

    if [ $stage -le 5 ]; then
        echo "5. Reload dumps"
        reload_all
        echo
    fi
}

boot "$@"
