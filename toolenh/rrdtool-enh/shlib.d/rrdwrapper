# vim: set filetype=sh :

    SCRIPT_PATH=`readlink -f $0`

    import cliboot
    import time
    import htmlcolor

    option -i --install         "Create an RRD database and setup cron jobs"
    option    --remove          "Delete an RRD database and remove cron jobs"
    option    --run =ID         "Run the specific sample procedure immediately"
    option -r --run-cron =ID    "Run the specific sample procedure from cron"
    option    --run-all         "Run all sample procedures immediately"
    option -l --list            "List available graphs"
    option -p --plot =ID        "Plot the specific graph"
    option    --plot-all        "Plot all graphs"
    option -s --show            "Open the result image after plot done"
    option -c --cgi             "Run in CGI/HTML mode"
    option -t --content-type =TYPE "Override the Content-Type header"
    option -q --quiet           "Repeat to get less info"
    option -v --verbose         "Repeat to get more info"
    option -h --help            "Show this help page"
    option    --version         "Print the version info"

    MODE=run-all
    CGI=0
    cron_mode=0
    auto_open=

    rcfile="$HOME/.rrdwrapper.rc"
    datadir="$HOME/public/data"
    plotdir="$HOME/public/html/plots"
    datafile=
    plotout=

    want_sample_id=
    want_plot_id=
    content_type=

    pending_cmdv=()

function setopt() {
    case "$1" in
        -i|--install)
            MODE=install;;
        --remove)
            MODE=remove;;
        --run)
            MODE=run
            want_sample_id="$2";;
        -r|--run-cron)
            MODE=run
            want_sample_id="$2"
            cron_mode=1;;
        --run-all)
            MODE=run-all;;
        -l|--list)
            MODE=list;;
        -p|--plot)
            MODE=plot
            want_plot_id="$2";;
        --plot-all)
            MODE=plot-all;;
        -s|--show)
            auto_open=1;;
        -c|--cgi)
            CGI=1;;
        -t|--content-type)
            content_type="$2";;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    [ -n "$REMOTE_ADDR" ] && CGI=1

    # initialization...
    if [ -f "$rcfile" ]; then
        . "$rcfile" || die "Failed to init rrdwrapper rc file, exit code=$?"
    fi

    trap 'commit' EXIT
}

function commit() {
    [ ${#pending_cmdv[@]} = 0 ] && return

    _log2 "Commit pending command: ${pending_cmdv[@]}"
    if "${pending_cmdv[@]}"; then
        _log2 "Succeeded."
    else
        _error "Failed: exit code=$?"
    fi
}

function pendemit() {
    local arg
    local n=${#pending_cmdv[@]}
    for arg in "$@"; do
        pending_cmdv[n++]="$arg"
    done
}

# RRD Wrapper Framework:
topic=no-database
step_time=300

plot_index=0
context_plot_id=default
plot_opts=()
plot_optn=0
plotcmds=()
plotcmdn=0

function database() {
    topic="$1"
    datafile="$datadir/${topic}_db.rdb"
    shift

    case "$MODE" in
        install)
            mkdir -p "$datadir"
            pending_cmdv=(rrdtool create "$datafile")

            while parse_event "$@"; do
                case "${ACTION[0]}" in
                    step) # on 60sec step
                        step_time=`duration2sec $EVENT`
                        pendemit --step $step_time
                        ;;

                    make) # on 1step make max for 30day
                        local unit=`getunit $EVENT`
                        local steps=
                        if [ "$unit" = step ]; then
                            steps=${EVENT:0: -4}
                        else
                            steps=`duration2sec $EVENT`
                            steps=$(( steps / step_time ))
                        fi

                        [ "${ACTION[2]}" = "for" ] || die "Expected 'for': ${ACTION[2]}"

                        local target="${ACTION[1]}"

                        local for_time="${ACTION[3]}"
                        local for_steps=
                        unit=`getunit $for_time`
                        if [ "$unit" = step ]; then
                            for_steps=${for_time:0: -4}
                        else
                            for_steps=`duration2sec $for_time`
                            for_steps=$(( for_steps / step_time ))
                        fi

                        case "$target" in
                            max)
                                target=MAX;;
                            min)
                                target=MIN;;
                            average)
                                target=AVERAGE;;
                            last)
                                target=LAST;;
                            *)
                                die "Illegal RRD archive: $target";;
                        esac

                        pendemit RRA:$target:0.5:$steps:$for_steps
                        ;;
                esac
                shift $NEXT_ON
            done

            ;;

        remove)
            _log1 "Remove the RRD database $datafile."
            rm -f "$datafile"
            ;;
    esac
}

function gauge() {
    local id="$1"
    local range="$2"
    shift 2

    local timeout=$step_time
    while parse_event "$@"; do
        case "${ACTION[0]}" in
            timeout) # on 10min timeout
                timeout=`duration2sec $EVENT`
                ;;
            read) # on pingtest read RTT_AVG
                local sample_id="$EVENT"
                local reffield="${ACTION[1]}"
                local cmap_var=cmap_${sample_id}

                # NOT WORKED.
                #Segment fault: if declare a local assoc array here.
                #[ -v "$cmap_var" ] || declare -g -A $cmap_var
                #declare "${cmap_var}[$id]"="$reffield"

                # Append ":rtt=RTT_AVG" to cmap.
                declare -g $cmap_var="${!cmap_var}:$id=$reffield"
                ;;
        esac
        shift $NEXT_ON
    done

    case "$MODE" in
        install) # Define RRA records
            pendemit "DS:$id:GAUGE:$timeout:$range"
            ;;

        run) # On job done, do update
            : # executed by "sample" statement.
            ;;
    esac
}

function sample() {
    local id="$1"; shift
    local interval
    local crontab
    local cron_id="@RRD $topic::$id"

    while parse_event "$@"; do
        case "${ACTION[0]}" in
            update) # on 3min update
                interval=`duration2sec $EVENT`;;
            *)
                die "Unexpected: $@";;
        esac
        shift $NEXT_ON
    done

    case "$MODE" in
        install) # Install crontab
            local cronspec="* * * * *" # Ignore interval.

            crontab=`tempfile`
            crontab -l >$crontab

            lineconf -tm "Add sample procedure to crontab" \
                $crontab "$cron_id" \
                "$cronspec \"$SCRIPT_PATH\" --run \"$id\""

            crontab $crontab
            rm -f $crontab
            ;;

        remove) # Uninstall crontab
            _log1 "Remove sample procedure from crontab."

            crontab=`tempfile`
            crontab -l >$crontab

            lineconf -k $crontab "$cron_id"

            crontab $crontab
            rm -f $crontab
            ;;

        run) # Run the command
            if [ "$want_sample_id" = "$id" ]; then
                local run_now=1
                if [ "$cron_mode" = 1 ]; then
                    local time_m=$(( `date +$s` / 60 )) # minutes since 1970-1-1
                    local interval_m=$(( interval / 60 ))
                    local offset=$(( time_m % interval_m ))
                    run_now=$(( offset == 0 ))
                fi
                if [ "$run_now" = 1 ]; then
                    _log2 "Add sample-execution to the cmdqueue: $id"
                    pendemit sample_exec "$id" # TODO Add custom arguments support?
                fi
            fi
            ;;

        run-all) # Run all samples immediately
            _log1 "Run-Sample: $id"
            "$SCRIPT_PATH" --run "$id"
            ;;
    esac
}

function sample_exec() {
    local id="$1"; shift
    local cmap_var=cmap_$id
    local output=`tempfile`

    if "${id}_proc" "$@" >$output; then
        _log2 "Succeeded to execute the sample procedure."

        local key val
        while IFS== read key val; do
            declare "val_$key"="$val"
            _log2 "Field $key = $val"
        done <$output

        local cmap="${!cmap_var}"
        local entry
        for entry in ${cmap//:/ }; do
            [ -z "$entry" ] && continue
            local vname="${entry%%=*}"
            local fieldvar="val_${entry#*=}"
            val="${!fieldvar}"
            _log1 "Update data source $vname to $val"

            rrdtool update "$datafile" --template "$vname" N:"$val"
        done
    else
        _error "Failed to execute the sample procedure, exit code=$?"
    fi

    rm -f $output
}

function graph() {
    local id="$1"
    shift

    (( plot_index++ ))

    case "$MODE" in
        list)
            #if [ "$CGI" = 0 ]; then
                echo -n "Graph $plot_index. $id"
                if [ $# = 0 ]; then
                    echo
                else
                    echo ": $*"
                fi
            #fi
            ;;

        plot-all)
            _log1 "Plot-Graph: $id"
            "$SCRIPT_PATH" --plot "$id"
            ;;

        plot)
            context_plot_id="$id"
            plot_opts=()
            plot_optn=0

            pending_cmdv=(rrdgraph)
            function rrdgraph() {
                local plotoutdir="$plotdir/$topic"
                local serial=`date +%Y-%m-%d`
                local plotout="$plotoutdir/$serial.png"

                mkdir -p "$plotoutdir" || die "Failed to create image directory: $plotoutdir"

                _log1 "Generate graph $plotout..."
                if ! rrdtool graph "$plotout" "${plot_opts[@]}" "${plotcmds[@]}"; then
                    _error "Failed to generate graph, exit code=$?."
                else
                    if [ "$auto_open" = 1 ]; then
                        _log2 "Auto open the result image file: $plotout"
                        alt-exec -su x-open "$plotout"
                    fi
                fi
            }
            ;;
    esac
}

function isplot() {
    [ "$MODE" = plot ] || return 1
    if [ "$context_plot_id" = "$want_plot_id" ]; then
        return 0
    else
        return 1
    fi
}

function plot-config() {
    isplot || return
    plot_opts=("$@")
    plot_optn="${#plot_opts[@]}"
}

function plotemit() {
    local arg
    for arg in "$@"; do
        plotcmds[plotcmdn++]="$arg"
    done
}

function def() {
    isplot || return
    # def roundtrip = NetStat.rtt:MAX
    # => DEF:roundtrip=latency_db.rrd:rtt:MAX \
    if parse_keyvalue "$@"; then
        local rdb="$datadir/${VALUE%%.*}_db.rdb"
        local ds_type="${VALUE#*.}"
        plotemit "DEF:$KEY=$rdb:$ds_type"
    else
        _error "Illegal syntax: $@"
    fi
}

function list() {
    isplot || return
    if parse_keyvalue "$@"; then
        local rpn=`rpn_eval $VALUE`
        plotemit "CDEF:$KEY=$rpn"
    else
        _error "Illegal syntax: $@"
    fi
}

function val() {
    isplot || return
    if parse_keyvalue "$@"; then
        local rpn=`rpn_eval $VALUE`
        plotemit "VDEF:$KEY=$rpn"
    else
        _error "Illegal syntax: $@"
    fi
}

function putstr() {
    isplot || return
    plotemit "COMMENT:$*"
}

function putstrln() {
    isplot || return
    plotemit "COMMENT:$*"'\\n'
}

function plot() {
    isplot || return

    [ "$2" = as ] || die "plot <vname>: Expected 'as': $1"
    local vname="$1"
    shift 2

    local shape=
    local width=1
    local stacking=
    local color=

    local arg
    for arg in "$@"; do
        case "$arg" in
            *px)
                width="${arg%px}";;
            '#'*)
                color="$arg";;
            line)
                shape=line;;
            area)
                shape=area;;
            stacked)
                stacking=:STACK;;
            --)
                shift; break;;
            *)
                break;;
        esac
        shift
    done

    local buf
    case "$shape" in
        line)
            # LINE[width]:value[#color][:legend[:STACK]][:dashes=...]
            buf="LINE$width:$vname$color:$*$stacking"
            ;;
        area)
            # AREA:value[#color][:legend[:STACK]]
            buf="AREA:$vname$color:$*$stacking"
            ;;
        *)
            die "Unknown shape: $@";;
    esac

    plotemit "$buf"
}

function gprint() {
    isplot || return
    local varspec="$1"
    local mesg="$2"
    plotemit "GPRINT:$varspec:$mesg"
}

function gprintln() {
    isplot || return
    local varspec="$1"
    local mesg="$2"
    plotemit "GPRINT:$varspec:$mesg"'\\n'
}

function parse_keyvalue() {
    local line="$*"
    KEY="${line%%=*}"
    VALUE="${line#*=}"
    if [ "$KEY" = "$line" ]; then
        return 1
    fi
    while [ "${KEY: -1}" = ' ' ]; do
        KEY="${KEY% }"
    done
    while [ "${VALUE:0:1}" = ' ' ]; do
        VALUE="${VALUE# }"
    done
}

##
# on EVENT ACTION ...
# return: 0 if success, otherwise illegal arguments.
#   env EVENT = The event name, or duration (with unit).
#   env ACTION = (action-args)
#   env NEXT_ON = The index of next occurrence of "on", or to the end.
function parse_event() {
    [ $# = 0 ] && return 1

    [ "$1" = 'on' ] || die "Illegal syntax, expected 'on': $*"
    [ $# -lt 3 ] &&  die "Too few arguments for on-statement: $*"

    EVENT="$2"
    ACTION=()
    NEXT_ON=$#

    local i
    local n=0
    for ((i = 3; i <= $#; i++)); do
        if [ "${!i}" = on ]; then
            NEXT_ON=$((i - 1))
            break
        else
            ACTION[n++]="${!i}"
        fi
    done

    return 0
}


function rpn_eval() {
    local args="$*"
    local escaped=`_rpn_eval ${args//\*/_mul_}`
    echo "${escaped//_mul_/*}"
}

function _rpn_eval() {
    local expr="$*"
    local r1="${expr#*)}"
    if [ "$expr" = "$r1" ]; then
        echo "$expr"
        return
    fi
    expr="${expr%%)*}"
    local l1="${expr%(*}"
    if [ "$l1" = "$expr" ]; then
        echo "$expr"
        return
    fi
    expr="${expr##*(}"
    expr=`_rpn_call $expr`
    _rpn_eval $l1 $expr $r1
}

function _rpn_call() {
    #local fn="$1"; shift
    local cmd="$1"; shift
    local buf=
    local arg
    for arg in "$@"; do
        arg=`_rpn_eval "$arg"`
        buf="$buf,$arg"
    done
    buf="$buf,$cmd"
    echo ${buf#,}
}
