#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PACKAGE:=@PACKAGE@}
    : ${PROGRAM_TITLE:=Namecheap API accessor}
    : ${PROGRAM_SYNTAX:=[OPTIONS] [--] cmd args...}

    svr_sandbox=api.sandbox.namecheap.com
    svr_production=api.namecheap.com

    opt_user="$USER"
    opt_server="$svr_production"
    opt_key="a3a3ac557fc84fdb9338212c9b2ac9a1"
    opt_api_user=
    opt_dry_run=0
    opt_client_ip=auto
    opt_proxychains=0
    opt_package=
    opt_completion=0

    curlopts=()
    run_proxy=()
    
    pkgdatadir='@pkgdatadir@'
    if [ "${pkgdatadir:0:1}" = '@' ]; then
        __FILE__=$(readlink -f "$0")
        pkgdatadir="${__FILE__%/*}"
    fi

    configdir="$HOME/.config/ncapi"

    . shlib
    import cliboot
    #import strfn

    option -u --user =NAME      "Namecheap user name. (default the login user)"
    option -s --server =HOSTNAME "The API server"
    option -a --api-user =NAME  "API user name."
    option -k --api-key =KEY    "Specify the API key"
    option -n --dry-run         "Use the sandbox server"
    option -c --client-ip =IP   "The client IP address. auto detected by default."
    option -p --proxychains     "Use proxychains to execute commands"
    
    option -D --domains         "Set default package to domains"
    option -B --domains-dns     "Set default package to domains.dns"
    option -N --domains-ns      "Set default package to domains.ns"
    option -T --domains-transfer "Set default package to domains,transfer"
    option -S --ssl             "Set default package to ssl"
    option -U --users           "Set default package to users"
    option -A --users.address   "Set default package to users.address"
    option -P --domainprivacy   "Set default package to domainprivacy"
    
    option -z --completion      "completion support mode, no operation"
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version
    
function setopt() {
    case "$1" in
        -u|--user)
            opt_user="$2";;
        -s|--server)
            opt_server="$2";;
        -a|--api-user)
            opt_api_user="$2";;
        -k|--api-key)
            opt_api_key="$2";;
        -n|--dry-run)
            opt_dry_run=1
            opt_server="$svr_sandbox"
            ;;
        -c|--client-ip)
            opt_client_ip="$2";;
        -p|--proxychains)
            opt_proxychains=1
            run_proxy=(proxychains4 -q)
            ;;
            
        -D|--domains)
            opt_package=namecheap.domains;;
        -B|--domains-dns)
            opt_package=namecheap.domains.dns;;
        -N|--domains-ns)
            opt_package=namecheap.domains.ns;;
        -T|--domains-transfer)
            opt_package=namecheap.domains.transfer;;
        -S|--ssl)
            opt_package=namecheap.ssl;;
        -U|--users)
            opt_package=namecheap.users;;
        -A|--users.address)
            opt_package=namecheap.users.address;;
        -P|--domainprivacy)
            opt_package=namecheap.domainprivacy;;
    
        -z|--completion)
            opt_completion=1;;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    if [ "$opt_completion" = 1 ]; then
        LOGLEVEL=0
    fi

    local cmd_name="$1"
    shift
    
    package=$opt_package
    if [ "${cmd_name/./}" != "${cmd_name}" ]; then
        package=${cmd_name%.*}
        cmd_name="${cmd_name##*.}"
    fi
    
    . "$pkgdatadir/libnamecheap-cmds"
    
    cmd_undef=0
    if [ -z "$package" ]; then
        # cmd_name is simple name. try to expand it.
        local match_names=()
        local match_docs=()
        if whichcmd "$cmd_name" match; then
            local ncmd=${#match_names[@]}
            if [ $ncmd -gt 1 ]; then
                _error "ambiguous command name $cmd_name. ($ncmd)"
                for ((i = 0; i < ncmd; i++)); do
                    local name2=${match_names[i]}
                    _log1 "  $name2: ${match_docs[i]}"
                done
                exit 1
            fi
            local first="${match_names[0]}"
            package="${first%/*}"
        else
            cmd_undef=1
        fi
    fi

    if [ $# = 0 ] && [ "$opt_completion" = 1 ]; then
        compcmd "$cmd_name" "$package"
        exit 0
    fi

    [ "$cmd_undef" = 1 ] && quit "command $cmd_name undefined."
    
    if [ $LOGLEVEL -le 2 ]; then
        curlopts+=(-s)
    fi
    
    local cache_name=client-ip
    if [ "$opt_proxychains" = 1 ]; then
        cache_name=client-ip.proxy
    fi
    
    if [ "$opt_client_ip" = auto ]; then
        local ip=$( loadconfig $cache_name )
        if [ ! -z "$ip" ]; then
            _log1 "use cached client-ip $ip. refresh with -c0 if necessary."
            opt_client_ip="$ip"
        fi
    fi
    
    if [ "$opt_client_ip" = auto -o "$opt_client_ip" = 0 ]; then
        _log1 "detecting the client IP address."
        if ip=$( myaddr ); then
            _log1 "detected: $ip"
            opt_client_ip="$ip"
            saveconfig $cache_name "$ip"
        else
            quit "failed."
        fi
    fi
    
    if [ -z "$opt_api_user" ]; then
        opt_api_user="$opt_user"
    fi
    
    api_call "$package" "$cmd_name" "$@"
}

function myaddr() {
    local svr=http://121.43.146.153:800/~lenik/admin/clientinfo
    local svrip svrport myip myport
    IFS=, read svrip svrport myip myport _ < <( curl "$svr" )
    _log2 "server: $svrip port $svrport"
    _log2 "client: $myip port $myport"
    echo "$myip"
}

function api_call() {
    local package="$1"
    local cmd="$2"
    local client_ip=
    shift 2
    
    if [ "$opt_completion" = 1 ]; then
        local args=( "$@" )
        local n=$#
        local last="${args[n - 1]}"
        compparam "$last" "$cmd" "$package"
        exit 0
    fi

    local -A params
    params[ApiUser]="$opt_api_user"
    params[ApiKey]="$opt_key"
    params[UserName]="$opt_user"
    params[ClientIp]="$opt_client_ip"
    params[Command]="$cmd"
    
    local url=$(make_url "https://$opt_server/xml.response" params)
    curl $url
}

function make_url() {
    local url="$1"
    local -n map="$2"
    
    local i=0 k v
    for k in "${!map[@]}"; do
        v="${map[$k]}"
        [ -z "$v" ] && continue
        if [ "$i" == 0 ]; then
            url="$url?$k=$v"
        else
            url="$url&$k=$v"
        fi
        ((i++))
    done
    
    echo "$url"
}

CURL=$(which curl)
function curl() {
    _log2 "$CURL" "${curlopts[@]}" "$@"
    "${run_proxy[@]}" "$CURL" "${curlopts[@]}" "$@"
}

function configfile() {
    local name="$1"
    local file="$configdir/$name"
    if [ ! -d "configdir" ]; then
        mkdir -p "$configdir"
    fi
    echo "$file"
}

function loadconfig() {
    local name="$1"
    local file="$configdir/$name"
    if [ -f "$file" ]; then
        cat "$file"
    fi
}

function saveconfig() {
    local file=$( configfile "$1" )
    shift
    echo "$*" > "$file"
}

function whichcmd() {
    local cmd="$1"
    local retvar="$2"
    local -n ret_names="${retvar}_names"
    local -n ret_docs="${retvar}_docs"
    local pkg
    for pkg in "${PACKAGES[@]}"; do
        local pkgvar=${pkg//./_}
        local -n docs="${pkgvar}"
        if [ -n "$cmd" ]; then
            local doc="${docs["$cmd"]}"
            if [ -n "$doc" ]; then
                ret_names+=("$pkg.$cmd")
                ret_docs+=("$doc")
            fi
        fi
    done
    local n=${#ret_names[@]}
    test $n != 0
}

function compcmd() {
    local head="$1"
    local pkg="$2"

    local pkgv=("${PACKAGES[@]}")
    [ -n "$pkg" ] && pkgv=("$pkg")

    for pkg in "${pkgv[@]}"; do
        local -n a_cmds=${pkg//./_}__cmds
        local cmd
        for cmd in ${a_cmds[@]}; do
            if [ -z "$head" ] || [ "${cmd#"$head"}" != "$cmd" ]; then
                echo "$cmd"
            fi
        done
    done | sort -u
}

function compparam() {
    local head="$1"
    local cmd="$2"
    local pkg="$3"

    local pkgv=("${PACKAGES[@]}")
    [ -n "$pkg" ] && pkgv=("$pkg")

    for pkg in "${pkgv[@]}"; do
        local cmdvar=${pkg//./_}_$cmd
        local -n a_docs=${cmdvar}_in
        local -n a_types=${cmdvar}_in_type
        local key
        for key in ${!a_types[@]}; do
            if [ -z "$head" ] || [ "${key#"$head"}" != "$key" ]; then
                echo "$key"
            fi
        done
    done | sort -u
}

boot "$@"
