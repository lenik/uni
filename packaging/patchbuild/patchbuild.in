#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PROGRAM_TITLE:="Rebuild debian package with automatic personal patch management"}
    : ${PROGRAM_SYNTAX:="[OPTIONS] [--] ..."}

    . shlib-import cliboot
    option -c --continue        "Build again after edit-patch"
    option -l --local           "Install by dpkg -i, instead of apt-get"
    option -p --dput-host =HOST "Host config name used to dput"
    option -f --fast-build      "Don't clean & re-configure before build"
    option -s --symlink         "Add patch files by symlink"
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    shopt -s nullglob

    cont=
    local_install=0
    dput_host=bodz
    fast_build=
    symlink=

function setopt() {
    case "$1" in
        -c|--continue)
            cont=1;;
        -l|--local)
            local_install=1;;
        -p|--dput-host)
            local_install=0
            dput_host="$2";;
        -f|--fast-build)
            fast_build=1;;
        -s|--symlink)
            symlink=1;;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            show_version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    if [ -z "$1" ]; then
        [ -z "$cont" ] && die "No package name specified"

        latest="${PWD##*/}"
        package="${latest%-*}"

        _warn "Assume current working package is $package"

    else
        package="$1"

        vers=("$package-"*/)
        if [ ${#vers[@]}  = 0 ]; then
            _log1 "Get source of $package"
            apt-get source "$package" || die "Failed to get source"
            vers=("$package-"*/)
            [ ${#vers[@]} = 0 ] && die "Unexpected: no source code directory found for $package"
        fi

        nvers=${#vers[@]}
        latest="${vers[nvers-1]}"
        latest="${latest%/}"
        _log1 "Working on $latest"

        cd "$latest" || die "Can't chdir into $latest. "
    fi

    if [ -z "$cont" ]; then
        # Start of prepare & patch

        sudo apt-get build-dep "$package" \
            || die "Can't get build dependencies for $package. "

        # Get the root dir of personal patch repo
        ppconf="$HOME/.personal_patch_conf"
        if [ ! -f "$ppconf" ]; then
            echo "You need to config personal patch repository settings"
            echo "A new empty config file is created for you. "
            echo "See $ppconf (5)"
            echo "PPCONF_HOME=~/.patches/" >"$ppconf"
            exit 1
        fi

        # Environ settings
        _log2 "Sourcing $ppconf..."
        source "$ppconf"

        PPCONF_HOME="${PPCONF_HOME%/}"
            [ -z "$PPCONF_HOME" ] && die "Variable PPCONF_HOME isn't initialized"
            [ -d "$PPCONF_HOME" ] || die "Personal patch repository home isn't existed: $PPCONF_HOME"

        PPDIR="$PPCONF_HOME/$package"
        _log1 "Using Personal patch directory: $PPDIR"

        PPSYS=$PPCONF_SYSTEM
            [ -z "$PPSYS" ] && PPSYS=quilt
            grep -q "dpatch" debian/rules && PPSYS=dpatch
            _log1 "Set patch system to $PPSYS"

            PPLIST=
            case "$PPSYS" in
                dpatch)
                    PPLIST=00list;;
                quilt)
                    PPLIST=series;;
                *)
                    die "Unsupported patch system: $PPSYS"
                    ;;
            esac
            listfile="debian/patches/$PPLIST"

        if [ ! -d debian/patches ]; then
            echo "No patch system defined for $package, create a default one"
            mkdir debian/patches
        fi

        # Search & copy to debian/patches
        _log1 "Search personal patches for $package"
        tmplist=`mktemp`
        [ -f "$listfile" ] && cat "$listfile" >$tmplist

        for p in "$PPDIR/"*; do
            pbase="${p##*/}"
            if [ "$pbase" = "version" ]; then continue; fi
            if [ "${pbase:0:1}" = . ]; then continue; fi

            pname="${pbase%.*}"
            if [ -z "$symlink" ]; then
                _log1 "    Add Patch $pname"
                cp -f "$p" debian/patches/
            else
                _log1 "    Add Patch (Link) $pname"
                ln -snf `readlink -f "$p"` debian/patches/
            fi
            echo "$pbase" >>$tmplist
        done

        case "$PPLIST" in
            *list)
                sort -u $tmplist >"$listfile";;
            series)
                uniq $tmplist >"$listfile";;
            *)
                die "Unknown patches list file: $PPLIST";;
        esac
        # End of prepare & patch
    fi

    # Build the package
    _log1 "Increase version number"
    dh_incr || die "Failed to increase version number"

    _log1 "Build the debian package"
    DPKGOPTS=()
        if [ "$fast_build" = 1 ]; then
            _warn "  Fast Mode: You should clean everything yourself. "
            DPKGOPTS=(-F -nc)
        fi
    dpkg-buildpackage ${DPKGOPTS[@]} || die "Failed to build the package"

    changes=(../"$package"_*.changes)
    nchanges=${#changes[@]}
    [ $nchanges = 0 ] && die "No $package*.changes created. "

    changes="${changes[nchanges-1]}"
    _log1 "Install Debian packages listed in $changes"

    if [ "$local_install" = 1 ]; then
        debs=()
        ndeb=0
        files_section=0
        while read -r hash size section priority file; do
            if [ "$hash" = "Files:" ]; then
                files_section=1
                continue
            fi
            if [ "$files_section" = 0 ]; then continue; fi
            if [ -z "$hash" ]; then break; fi
            if [ "${file: -4}" = '.deb' ]; then
                _log1 "    Add to install: $file"
                debs[ndeb++]="../$file"
            fi
        done <"$changes"

        sudo dpkg -i "${debs[@]}" || die "Failed to install ${debs[@]}"

    else
        _log1 "Dput to $dput_host: $changes"
        dput -f $dput_host "$changes"

        _log1 "Refresh package status"
        sudo aptitude update

        _log1 "Upgrade system"
        sudo apt-get dist-upgrade
    fi
}

boot "$@"
