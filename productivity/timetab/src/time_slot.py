from dataclasses import dataclass
from typing import Dict, Any, Optional
from .time_utils import Time
from .json_interface import JSONMixin
from .sector import Sector
from .user import User
from collections import OrderedDict

@dataclass
class TimeSlot(JSONMixin):
    seq: int
    start: Time
    duration: int
    end: Time
    slot_type: str
    description: str
    original_index: int
    id: Optional[str] = None  # Globally unique ID (optional)
    user: Optional['User'] = None  # Reference to user
    sector: Optional['Sector'] = None  # Direct reference to sector instance
    split: Optional[int] = None  # Split sequence number for split sectors
    
    @classmethod
    def from_strings(cls, seq: int, start: str, duration: int, end: str, 
                    slot_type: str, description: str, original_index: int, 
                    user: Optional['User'] = None, sector: Optional['Sector'] = None, 
                    split: Optional[int] = None, id: Optional[str] = None) -> 'TimeSlot':
        """Create TimeSlot from string time values"""
        start_time = Time.from_string(start)
        end_time = Time.from_string(end)
        return cls(seq, start_time, duration, end_time, slot_type, description, original_index, id, user, sector, split)
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any], user: Optional['User'] = None, 
                  sector: Optional['Sector'] = None) -> 'TimeSlot':
        """Create TimeSlot from dictionary"""
        return cls.from_strings(
            seq=data['seq'],
            start=data['start'],
            duration=data['duration'],
            end=data['end'],
            slot_type=data['slot_type'],
            description=data['description'],
            original_index=data['original_index'],
            user=user,
            sector=sector,
            split=data.get('split'),
            id=data.get('id')
        )

    def to_dict(self) -> dict:
        """Convert to dictionary with string time values"""
        result = OrderedDict()
        if self.id:
            result['id'] = self.id
        if self.user:
            result['user_id'] = self.user.id
        result['seq'] = self.seq
        result['start'] = self.start.to_string()
        result['duration'] = self.duration
        result['end'] = self.end.to_string()
        result['slot_type'] = self.slot_type
        result['description'] = self.description
        result['original_index'] = self.original_index
        if self.sector:
            result['sector'] = self.sector.to_dict()
        if self.split is not None:
            result['split'] = self.split
        return dict(result)
    
    def is_available(self) -> bool:
        """
        Check if this time slot is available (slot type starts with 'A').
        
        Returns:
            True if the slot is available, False otherwise
        """
        return self.slot_type.startswith('A')
    
    def is_generated(self) -> bool:
        """
        Check if this time slot was generated by the scheduler (e.g., break slots).
        
        Returns:
            True if the slot was generated, False otherwise
        """
        return self.slot_type == "Break/Load" 
