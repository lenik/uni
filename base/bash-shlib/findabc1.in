#!/bin/bash
    : ${RCSID:=$Id: - @VERSION@ @DATE@ @TIME@ - $}
    : ${PROGRAM_TITLE:="Find file by prefix-chain"}
    : ${PROGRAM_SYNTAX:="[OPTIONS] [--] package { dir | %loc }..."}

    . shlib-import cliboot
    option -a --abctab      "Read abctab for %loc expansion"
    option -e --eval        "Print shell commands to be evaluated"
    option -f --file-only   "Find file only"
    option -p --print       "Print the result"
    option -l --list        "List all matched paths"
    option -z --last        "Get the last match"
    option -u --unix        "Path format in Unix style"
    option -w --windows     "Path format in Windows style"
    option -q --quiet
    option -v --verbose
    option -h --help
    option    --version

    shopt -s nullglob

    # Fix utf-8 collation.
    LANG=C

    perc=
    eval=
    fileonly=
    show=
    list=
    last=
    style=

    declare -A abctab

function setopt() {
    case "$1" in
        -a|--abctab)
            if [ -f ~/.abctab ]; then
                while read loc path; do
                    if [ -z "$loc" ] || [ -z "$path" ]; then
                        continue
                    fi
                    if [ "${path:0:1}" != '/' ]; then
                        path="$HOME/$path"
                    fi
                    # echo "abctab[$loc]=$path"
                    abctab[$loc]="$path"
                done < ~/.abctab
            fi
            perc=1;;
        -e|--eval)
            eval=1;;
        -f|--file-only)
            fileonly=1;;
        -p|--print)
            show=1;;
        -l|--list)
            list=1;;
        -z|--last)
            last=1;;
        -u|--unix)  # not used
            style=unix;;
        -w|--windows)  # not used
            style=win32;;
        -h|--help)
            help $1; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function show() {
    if [ -z "$eval" ]; then
        echo "$@"
    else
        echo "echo \"$*\""
    fi
}

function show_error() {
    if [ -z "$eval" ]; then
        echo "$@" >&2
        return 0
    else
        echo "echo \"$*\" >&2; false"
        return 1
    fi
}

function main() {
    [ $# = 0 ] && die "No name specified. "

    # WARNING: should avoid symbolic link loop

    package="$1"
    inner=
        shift
        # if package.contains '/'
        if [ "${package/\/}" != "$package" ]; then
            inner="/${package#*/}"
            package="${package%%/*}"
        fi

    roots=()
    nroot=0

    root=
    if [ $# -lt 1 ]; then
        for d in "${abctab[@]}"; do
            roots[nroot++]="$d"
        done
    else
        for arg in "$@"; do
            if [ "$perc" = 1 ]; then
                if [ "${arg:0:1}" = '%' ]; then
                    arg="${arg:1}"
                    arg="${abctab[$arg]}"
                fi
            fi
            if [ "${arg: -1}" = '/' ]; then
                if [ "$arg" != '/' ]; then
                    arg="${arg::${#arg}-1}"
                 fi
            fi
            roots[nroot++]="$arg"
        done
    fi
    # echo "Roots: $roots"

    # root-loop
    _home=
    for root in "${roots[@]}"; do
        if [ "$root" = '/' ]; then root=; fi
        # echo "root: $root"

        # Prepend subroots to the roots.
        subroots=()
        nsubroot=0
        for d in "$root/"*.d "$root/"\[*\]; do
            subroots[nsubroot++]="$d"
        done
        roots=("${subroots[@]}" "${roots[@]}")

        # xdir-loop
        _xdir=
        while [ -z "$_home" -o "$list" = 1 ]; do
            local prefix="$package"
            # if exist p/prefix* found.
            for f in "$root/$_xdir$prefix"*; do
                if [ "${f: -1}" = '*' ]; then continue; fi

                if [ "$fileonly" = 1 ]; then
                    if [ ! -f "$f" ]; then continue; fi
                else
                    if [ ! -d "$f" ]; then continue; fi
                fi

                # FOUND
                if [ -z "$_home" -o "$last" = 1 ]; then
                    _home="$f"
                fi
                if [ "$list" = 1 ]; then
                    echo "$f"
                elif [ -z $last ]; then
                    break
                fi
            done
            if [ -n "$_home" ]; then
                if [ "$list" = 1 ]; then
                    break #xdir-loop
                else
                    break 2 #root-loop
                fi
            fi

            # do { if exist p/prefix -> xdir-loop } while chop(prefix)
            while [ ${#prefix} -gt 0 ]; do
                # echo "  prefix=$prefix"
                if [ -d "$root/$_xdir$prefix" ]; then
                    _xdir="$_xdir$prefix/"
                    continue 2 #xdir-loop
                fi
                prefix="${prefix::${#prefix}-1}"
            done

            # can't go deeper, try next root
            break #xdir-loop
        done #xdir-loop
    done #root-loop
    # _xdir="$_xdir${_home##*/}"

    if [ -z "$_home" ]; then
        show_error "Not found: $package"
        return 1
    fi

    if [ "$show" = 1 ]; then
        show "$_home"
    fi
    if [ -n "$inner" ]; then
        if [ -z "$eval" ]; then
            die "Can't chdir the parent process"
        else
            echo "cd \"$_home$inner\""
        fi
    fi

    return 0
}

boot "$@"
