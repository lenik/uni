# vim: set filetype=sh :

. shlib

import load
import log
import rcs

BASENAME=${0##*/}
LONGOPTS=1

if [ "$OS" = Cygwin ]; then
    LONGOPTS=0 # It's too slow in cygwin
else
    getopt -T >/dev/null
    if [ $? != 4 ]; then # incompatible getopt version
        LONGOPTS=0
    fi
fi

function cleanup() {
    true
}

function setopt() {
    local nam=${1:1}
    if [ "${nam:0:1}" = "0" ]; then nam=${nam:1}; fi
    eval $nam=$2
}

function do_arg() {
    local n=${#_arg[@]}
    _arg[n + 1]="$1"
}

function quit() {
    local err=$?
    cleanup
    if [ $# != 0 ]; then
        if [ $err = 0 ]; then
            _warn "$@"
        else
            _error "$@"
        fi
    fi
    exit $err
}

function die() {
    _error "$@"
    cleanup
    exit 1
}

function bootvoid() {
    # help
    # exit
    main
}

function boot() {
    local args opt mid arg
    if [ -z "$*" ]; then bootvoid; exit; fi
    if [ "$LONGOPTS" = 1 ]; then

        if ! args=`POSIXLY_CORRECT=1 getopt \
                        -o "$short_opts" \
                        -l "$long_opts" \
                        -n "$BASENAME" -- "$@"`; then
            die "Syntax error."
            exit 1
        fi

        eval set -- "$args"

        long_opts=",$long_opts"
        while [ $# -ne 0 ]; do
            case "$1" in
            --)
                shift 1
                break
                ;;
            --*)
                opt="${1#--}"
                if [ "${long_opts/,$opt:}" != "$long_opts" ]; then
                    setopt "$1" "$2"
                    shift 2
                else
                    setopt "$1"
                    shift 1
                fi
                ;;
            -*)
                opt="${1#-}"
                if [ "${short_opts/$opt:}" != "$short_opts" ]; then
                    setopt "$1" "$2"
                    shift 2
                else
                    setopt "$1"
                    shift 1
                fi
                ;;
            esac
        done

    else
        # faster built-in
        while getopts $short_opts opt; do
            setopt -$opt "$OPTARG"
            ## all arguments between -opt1 <mid...> -opt2 are ignored
            # for ((mid = 2; mid < $OPTIND; mid++)); do
            #     do_arg "${!mid}"
            # done

            # OPTIND: the next argument to be processed. initially 1
            #shift $((OPTIND - 1))
        done
        shift $((OPTIND - 1))
    fi

    for arg in "$@"; do do_arg "$arg"; done
    main "${_arg[@]}"
}

function dump() {
    echo count=$#
    for ((i=0; i<=$#; i++)); do
        echo arg[$i] = ${!i}
    done
}
