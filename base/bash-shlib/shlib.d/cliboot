# -*- mode: sh -*-
# vim: set filetype=sh :

. shlib --

import load
import log
import rcs

: ${PROGRAM_PATH:=$0}
: ${PROGRAM_NAME:=${PROGRAM_PATH##*/}}
: ${LONGOPTS:=1}

if [ "$OS" = Cygwin ]; then
    LONGOPTS=0 # It's too slow in cygwin
else
    getopt -T >/dev/null
    if [ $? != 4 ]; then # incompatible getopt version
        LONGOPTS=0
    fi
fi

function cleanup() {
    true
}

function setopt() {
    local nam=${1:1}
    if [ "${nam:0:1}" = "0" ]; then nam=${nam:1}; fi
    eval $nam=$2
}

function do_arg() {
    :
}

function quit() {
    local err=$?
    cleanup
    if [ $# != 0 ]; then
        if [ $err = 0 ]; then
            _warn "$@"
        else
            _error "$@"
        fi
    fi
    exit $err
}

function die() {
    _error "$@"
    cleanup
    exit 1
}

function bootvoid() {
    # help
    # exit
    main
}

function boot() {
    trap cleanup EXIT

    if [ -z "$*" ]; then bootvoid; return; fi

    parse_opts "$@"

    main "${g_args[@]}"
}

function parse_opts() {
    local args opt mid arg
    local setopt_fn="${FUNCNAME[1]}_setopt"
    if [ "$(type -t $setopt_fn)" != 'function' ]; then
        if [ "$setopt_fn" = 'boot_setopt' ]; then
            setopt_fn=setopt
        else
            local fn_list=("$setopt_fn" _setopt)
            local fn found=0
            for fn in "${fn_list[@]}"; do
                if [ "$(type -t $fn)" = 'function' ]; then
                    found=1
                    break
                fi
            done
            [ $found = 1 ] || die "function ${fn_list[0]} isn't defined."
            setopt_fn=$fn
        fi
    fi

    if [ "$LONGOPTS" = 1 ]; then

        if ! args=`POSIXLY_CORRECT=1 getopt \
                        -o "$g_short_opts" \
                        -l "$g_long_opts" \
                        -n "$PROGRAM_NAME" -- "$@"`; then
            die "Syntax error."
            exit 1
        fi

        eval set -- "$args"

        g_long_opts=",$g_long_opts"
        while [ $# -ne 0 ]; do
            case "$1" in
            --)
                shift 1
                break
                ;;
            --*)
                opt="${1#--}"
                if [ "${g_long_opts/,$opt:}" != "$g_long_opts" ]; then
                    $setopt_fn "$1" "$2"
                    shift 2
                else
                    $setopt_fn "$1"
                    shift 1
                fi
                ;;
            -*)
                opt="${1#-}"
                if [ "${g_short_opts/$opt:}" != "$g_short_opts" ]; then
                    $setopt_fn "$1" "$2"
                    shift 2
                else
                    $setopt_fn "$1"
                    shift 1
                fi
                ;;
            esac
        done

    else
        # faster built-in
        while getopts $g_short_opts opt; do
            $setopt_fn -$opt "$OPTARG"
            ## all arguments between -opt1 <mid...> -opt2 are ignored
            # for ((mid = 2; mid < $OPTIND; mid++)); do
            #     do_arg "${!mid}"
            # done

            # OPTIND: the next argument to be processed. initially 1
            #shift $((OPTIND - 1))
        done
        shift $((OPTIND - 1))
    fi

    local _lev=$(( $LOGLEVEL + $LOGLEVEL_DELTA ))
    if [ $_lev -lt -1 ]; then
        _lev=-1
    elif [ $_lev -gt 3 ]; then
        _lev=3
    fi
    case "$_lev" in
        -1)
            logopt=-q
            logopts=-qq
            ;;
        0)
            logopt=-q
            logopts=-q
            ;;
        1)
            logopt=
            logopts=
            ;;
        2)
            logopt=-v
            logopts=-vv
            ;;
        3)
            logopt=-v
            logopts=-vvv
            ;;
    esac

    decl_opts_end

    g_args=("$@")
    g_args_n=${#g_args[@]}
    for arg in "$@"; do
        do_arg "$arg"
    done
    
    decl_opts_begin
}

function decl_opts_begin() {
    g_short_opts=
    g_long_opts=

    ##
    # Align at column 28, which looks like:
    #   -f, --FILE=PATH         Description...
    : ${OPTHLP_ALIGN:=28}
    g_opthlp0=()
    g_opthlp1=()
    g_opthlp2=()
    g_opthlp3=()
    g_opthlp4=()
    g_nopt=0
}

function decl_opts_end() {
    g_args=()
    g_args_n=0
}
decl_opts_begin

function option() {
    local opthlp=
    local vname=
    local mod=
    local shortform=
    local longform=
    for a in "$@"; do
        case "$a" in
        -*) ;;
        =*)
            vname="$a"
            mod=:
            break;;
        *)
            break;;
        esac
    done

    while [ $# != 0 ]; do
        case "$1" in
            -*)
                if [ -z "$opthlp" ]; then
                    opthlp="$1"
                else
                    opthlp="$opthlp, $1"
                fi
                if [ "${1:0:2}" = '--' ]; then
                    longform="$1"
                    if [ -z "$g_long_opts" ]; then
                        g_long_opts="${1:2}$mod"
                    else
                        g_long_opts="$g_long_opts,${1:2}$mod"
                    fi
                else
                    shortform="$1"
                    g_short_opts="$g_short_opts${1:1}$mod"
                fi
                shift
                ;;
            =*)
                shift;;
            *)
                break;;
        esac
    done

    local leading='    '
    if [ -z "$shortform" ]; then
        leading="$leading    "
    fi

    opthlp="$opthlp$vname"

    local indent
    local tmp="$leading$opthlp"
    while [ ${#tmp} -lt $OPTHLP_ALIGN ]; do
        indent="$indent "
        tmp="$leading$opthlp$indent"
    done

    g_opthlp0[g_nopt]="$leading"
    g_opthlp1[g_nopt]="$opthlp"
    g_opthlp2[g_nopt]="$indent"

    local description
    local textlines=()

    if [ $# -gt 0 ]; then
        description="$1"
        shift
        textlines=("$@")
    else
        case "$longform" in
            --help)
                description="Print this help page"
                textlines=(
        "Display a brief usage for this command, and exit."
                    )
                ;;
            --quiet)
                description="Be more quiet"
                textlines=(
        "Repeat this option to reduce the verbosity of information to output."
                    )
                ;;
            --verbose)
                description="Be more verbose"
                textlines=(
        "Repeat this option to expand the verbosity of information to output."
                    )
                ;;
            --version)
                description="Print the version information"
                textlines=(
        "Print the program title, a short description, and the version string"
        "at the very beginning, and exit."
                    )
                ;;
        esac
    fi

    g_opthlp3[g_nopt]="$description"

    local text ln
    for ln in "${textlines[@]}"; do
        text="$text        $ln"$'\n'
    done
    g_opthlp4[g_nopt]="$text"

    ((g_nopt++))
}

function help() {
    local details=0
    if [ "$1" == '--help' ]; then
        details=1
    fi

    local usages=()
    local l

    readarray -t usages < <(
        while read l; do echo "$l"; done < <(
            echo "$PROGRAM_SYNTAX"))

    if [ ${#usages[@]} -gt 1 ]; then
        echo "Usage: "
        for l in "${usages[@]}"; do
            echo "    $PROGRAM_PATH $l"
        done
        echo
    else
        echo "Usage: $PROGRAM_PATH $usages"
    fi

    help_options $details
    help_more $details
}

function help_options() {
    local details="$1"
    local i
    echo "Options: "
    for ((i = 0; i < g_nopt; i++)); do
        if [ "$details" = 1 ]; then
            echo "${g_opthlp0[i]}${g_opthlp1[i]}${g_opthlp2[i]}${g_opthlp3[i]}."
            if [ -n "${g_opthlp4[i]}" ]; then
                echo "${g_opthlp4[i]}"
            fi
        else
            echo "${g_opthlp0[i]}${g_opthlp1[i]}${g_opthlp2[i]}${g_opthlp3[i]}"
        fi
    done
}

function help_more() {
    :
}

function show_version() {
    parse_id "$RCSID"
    echo "[$PROGRAM_NAME] $PROGRAM_TITLE"
    echo "Written by Lenik, Version $rcs_rev, Last updated at $rcs_date"
    show_version_more
}

function show_version_more() {
    :
}

function dump() {
    echo count=$#
    for ((i=0; i<=$#; i++)); do
        echo arg[$i] = ${!i}
    done
}

