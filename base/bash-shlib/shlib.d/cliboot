# vim: set filetype=sh :

. shlib

import load
import log
import rcs

: ${PROGRAM_NAME:=${0##*/}}
: ${LONGOPTS:=1}

if [ "$OS" = Cygwin ]; then
    LONGOPTS=0 # It's too slow in cygwin
else
    getopt -T >/dev/null
    if [ $? != 4 ]; then # incompatible getopt version
        LONGOPTS=0
    fi
fi

function cleanup() {
    true
}

function setopt() {
    local nam=${1:1}
    if [ "${nam:0:1}" = "0" ]; then nam=${nam:1}; fi
    eval $nam=$2
}

function do_arg() {
    local n=${#_arg[@]}
    _arg[n + 1]="$1"
}

function quit() {
    local err=$?
    cleanup
    if [ $# != 0 ]; then
        if [ $err = 0 ]; then
            _warn "$@"
        else
            _error "$@"
        fi
    fi
    exit $err
}

function die() {
    _error "$@"
    cleanup
    exit 1
}

function bootvoid() {
    # help
    # exit
    main
}

function boot() {
    local args opt mid arg
    if [ -z "$*" ]; then bootvoid; return; fi
    if [ "$LONGOPTS" = 1 ]; then

        if ! args=`POSIXLY_CORRECT=1 getopt \
                        -o "$short_opts" \
                        -l "$long_opts" \
                        -n "$PROGRAM_NAME" -- "$@"`; then
            die "Syntax error."
            exit 1
        fi

        eval set -- "$args"

        long_opts=",$long_opts"
        while [ $# -ne 0 ]; do
            case "$1" in
            --)
                shift 1
                break
                ;;
            --*)
                opt="${1#--}"
                if [ "${long_opts/,$opt:}" != "$long_opts" ]; then
                    setopt "$1" "$2"
                    shift 2
                else
                    setopt "$1"
                    shift 1
                fi
                ;;
            -*)
                opt="${1#-}"
                if [ "${short_opts/$opt:}" != "$short_opts" ]; then
                    setopt "$1" "$2"
                    shift 2
                else
                    setopt "$1"
                    shift 1
                fi
                ;;
            esac
        done

    else
        # faster built-in
        while getopts $short_opts opt; do
            setopt -$opt "$OPTARG"
            ## all arguments between -opt1 <mid...> -opt2 are ignored
            # for ((mid = 2; mid < $OPTIND; mid++)); do
            #     do_arg "${!mid}"
            # done

            # OPTIND: the next argument to be processed. initially 1
            #shift $((OPTIND - 1))
        done
        shift $((OPTIND - 1))
    fi

    for arg in "$@"; do do_arg "$arg"; done
    main "${_arg[@]}"
}

function dump() {
    echo count=$#
    for ((i=0; i<=$#; i++)); do
        echo arg[$i] = ${!i}
    done
}

short_opts=
long_opts=

##
# Align at column 28, which looks like:
#   -f, --FILE=PATH         Description...
: ${OPTDOC_ALIGN:=28}
optdocs=()
optdocn=0

function option() {
    local optdoc=
    local vname=
    local mod=
    local shortform=0
    for a in "$@"; do
        case "$a" in
        -*) ;;
        =*)
            vname="$a"
            mod=:
            break;;
        *)
            break;;
        esac
    done

    while [ $# != 0 ]; do
        case "$1" in
            -*)
                if [ -z "$optdoc" ]; then
                    optdoc="    $1"
                else
                    optdoc="$optdoc, $1"
                fi
                if [ "${1:0:2}" = '--' ]; then
                    if [ -z "$long_opts" ]; then
                        long_opts="${1:2}$mod"
                    else
                        long_opts="$long_opts,${1:2}$mod"
                    fi
                else
                    shortform=1
                    short_opts="$short_opts${1:1}$mod"
                fi
                shift
                ;;
            =*)
                shift;;
            *)
                break;;
        esac
    done

    if [ $shortform = 0 ]; then
        optdoc="    $optdoc"
    fi

    optdoc="$optdoc$vname"

    while [ ${#optdoc} -lt $OPTDOC_ALIGN ]; do
        optdoc="$optdoc "
    done

    optdoc="$optdoc$@"
    optdocs[optdocn++]="$optdoc"
}

function help() {
    version
    echo
    echo "Syntax: "

    local syntax
    while read syntax; do
        echo "    $0 $syntax"
    done < <(echo "$PROGRAM_SYNTAX")

    echo
    help_options
    help_more
}

function help_options() {
    echo "Options: "
    for optdoc in "${optdocs[@]}"; do
        echo "$optdoc"
    done
}

function help_more() {
    :
}

function version() {
    parse_id "$RCSID"
    echo "[$PROGRAM_NAME] $PROGRAM_TITLE"
    echo "Written by Lenik, Version $rcs_rev, Last updated at $rcs_date"
    version_more
}

function version_more() {
    :
}
