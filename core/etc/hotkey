#NoTrayIcon
#SingleInstance ignore

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; functions {
    funpack(count, prefix) {
        global
        local index = 0
        local pid
        loop %count% {
            pid := %prefix%_p%a_index%
            if pid {
                process, exist, % pid
                if errorlevel {
                    continue
                }
            }
            index := a_index
            break
        }
        if index {
            local prog = %prefix%%index%
            run, %prog%, , , %prefix%_p%index%
        }
    }

    runp(pre, cmd) {
        regwrite, REG_SZ, HKEY_LOCAL_MACHINE, SOFTWARE\Microsoft\Command Processor, AutoRun, %pre%
        run %cmd%
    }

    do_usecode() {
        local scheme, cat, ph, mkdef, text, t

        GuiControlGet, scheme,, UScheme
        GuiControlGet, cat,, UCategory
        GuiControlGet, ph,, UPhrase
        GuiControlGet, mkdef,, UMakeDefault
        GuiControlGet, text,, UText
        if %mkdef%
            mkdef=--make-default
        else
            mkdef=
        if ph
            t=%mkdef% "-s=%scheme%" "-g=%cat%" "-p=%ph%" -- "%text%"
        else
            t=-- "%text%"
        t=%perlw% /lapiota/bin/usecode %t%
        clipboard=
        run, %t%, , , pid
        clipwait
        return %clipboard%
    }

    usecode_dlg() {
        global UScheme, UCategory, UPhrase, UMakeDefault, UText

        Gui, Add, Text, x16 y16 w45 h13, &Scheme:
        Gui, Add, Edit, x76 y12 w77 h19 vUScheme, dm

        Gui, Add, Text, x176 y16 w45 h13, &Category:
        Gui, Add, Edit, x236 y12 w161 h19 vUCategory, 32

        Gui, Add, Text, x16 y44 w45 h13, P&hrase:
        Gui, Add, Edit, x76 y40 w321 h19 password# vUPhrase

        Gui, Add, CheckBox, x288 y68 w109 h17 vUMakeDefault, Save as &default

        Gui, Add, Text, x16 y108 w45 h13, &Text:
        Gui, Add, Edit, x76 y104 w321 h19 password# vUText
        GuiControl, Focus, UText

        Gui, Add, Text, x12 y92 w393 h1

        Gui, Add, Button, x16 y136 w65 h25, &Print

        Gui, Add, Button, x272 y136 w57 h25 default, OK
        Gui, Add, Button, x340 y136 w57 h25, &Quit

        Gui, Show, w415 h179, Enter Usecode Parameters
        Return

        ButtonPrint:
            code := do_usecode()
            msgbox %code%
            return

        ButtonOK:
            do_usecode()

        ButtonQuit:
        GuiClose:
            Gui, Destroy
            return
    }

    stackpush(name, val) {
        global
        local ptr := %name%_p
        ptr++
        %name%_p := ptr
        %name%_%ptr% := val
    }

    stackpop(name, err="") {
        global
        local ptr = %name%_p
        if (ptr = "" or ptr = 0) {
            %name% := err
        } else {
            local val = %name%_%ptr%
            ptr--
            %name%_p := ptr
            %name% := val
        }
    }

    stackdump(name, desc="") {
        global
        local ptr = %name%_p
        local msg
        if (desc = "")
            desc = %name%
        msg = Stack of %desc%:
        loop %ptr% {
            local val = %name%_%a_index%
            msg = %msg%`n%name%[%a_index%] = "%val%"
        }
        msgbox 0, Stack Dump, %msg%
    }

    restore() {
        global
        loop {
            stackpop("mwin")
            if (mwin == "")
                return
            winshow ahk_id %mwin%
            winactivate ahk_id %mwin%
        }
    }

    _include(path) {
        local verf := 3, veri := 3
        slash := instr(path, "\", false, 0)
        if (slash != 0) {
            base := substr(path, slash + 1)
        } else {
            base = %path%
        }
        filecreatedir %a_appdata%\.hotkey
        inst = %a_appdata%\.hotkey\%base%
        filegettime, verf, %path%
        filegettime, veri, %inst%
        if (verf != veri) {
            ifexist, %path%
            {
                filecopy, %path%, %inst%, 1
                if errorlevel {
                    msgbox can't include %path%: failed to copy to %inst%.
                } else {
                    reload
                }
            } else {
                filedelete, %inst%
                if errorlevel {
                    msgbox failed to clean %inst%.
                } else {
                    reload
                }
            }
        }
    }

    fastcall(cmdline) {
        FileAppend, %cmdline%, %TMP%\fast0.bat
        run winevent -s fast0
    }
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; initialize {
    setworkingdir %USERPROFILE%
    onexit onexit

    run cmdw /c fastcmd
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; extras {
    incfile = %HOME%\etc\hotkey
    _include(incfile)
    #include *i %a_appdata%\.hotkey\hotkey
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; system hack {
!tab::
    winhide ahk_class #32771 ; BUGFIX for ahk.
    send {escape}{tab}
    return
lwin & tab::alttab
lwin & capslock::shiftalttab
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; autohotkey management {
#!c::
    wingetactivetitle _atitle
    wingetclass _acls, A
    msgbox 0, Class Info, Window: "%_atitle%"`nClass: "%_acls%"
    return
#!e::run cmdw /c no %A_ScriptFullPath%
#!h::
    splitpath, a_ahkpath, name, dir
    run % dir . "/autohotkey.chm"
    return
#!i::run cmdw /c au3info
#!p::pause
#!r::reload
#!s::suspend
#!u::
    usecode_dlg()
    return
#!bs::exitapp
#!/::
    if A_IconHidden {
        menu, tray, icon
    } else {
        menu, tray, noicon
    }
    return
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; multimedia functions {
appskey::send {appskey}
appskey & up::
    process, exist, foobar2000.exe
    if not errorlevel
        run cmdw /c foobar
    send {media_stop}
    return
appskey & down::send {media_play_pause}
appskey & left::send {media_prev}
appskey & right::send {media_next}
appskey & numpadadd::send {volumn_up}
appskey & numpadsub::send {volumn_down}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; console enhancement {
#pgup::wheelup
#pgdn::wheeldown
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; windows management {
#up::
    stackpop("mwin")
    if (mwin == "") {
        soundplay *-1
    } else {
        id_len := instr(mwin, " - ") - 1
        id := substr(mwin, 1, id_len)
        winshow ahk_id %id%
        winactivate ahk_id %id%
    }
    return

#down::
    winget mwin, ID, A
    if (mwin == "") {
        soundplay *-1
    } else {
        wingettitle t, ahk_id %mwin%
        t = %mwin% - %t%
        stackpush("mwin", t)
        winhide ahk_id %mwin%
    }
    return

#left::
    stackdump("mwin", "Hidden Windows")
    return

#right::restore()
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; application shortcuts {
#a::fastcall("start ""ANSI""")
#b::fastcall("start ""Big""")
#c::fastcall("start")
#f::run firefox
#m::run metapad
#n::run cmdw /c no
#p::run cmdw /c paint
#q::run cmdw /c start "Big3" cmd /c settitle "Quick Logger" qlog
#s::run cmdw /c scite
#t::run cmdw /c start "Terminal" %SHELL% --login
#+t::
    rundlg_y = % a_screenheight - 160
    inputbox, cmdline_f, Run, Enter command line[;;mode] to run:,
        , 320, 120, 5, %rundlg_y%, , , %cmdline_f%
    if errorlevel
        return
    modep := instr(cmdline_f, ";;")
    if (modep > 0) {
        mode := substr(cmdline_f, modep + 2)
        cmdline := substr(cmdline_f, 1, modep - 1)
        shell2 = cmdw /c start "%mode%" %SHELL%
    } else {
        cmdline = %cmdline_f%
        shell2 = %SHELL%
    }
    run %shell2% --login -- %cmdline%
    return
#x::run cmdw /c startx -notrayicon
#-::
    nfs1 = %perlw% /lapiota/bin/nfs --wait-close
    nfs2 = %perlw% /lapiota/bin/nfs --wait-close ..
    nfs3 = %perlw% /lapiota/bin/nfs --wait-close ...
    nfs4 = %perlw% /lapiota/bin/nfs --wait-close ....
    nfs5 = %perlw% /lapiota/bin/nfs --wait-close .....
    nfs6 = %perlw% /lapiota/bin/nfs --wait-close ......
    nfs7 = %perlw% /lapiota/bin/nfs --wait-close .......
    funpack(7, "nfs")
    return
#=::
    calc1 = cmdw /c start "Cart" cmd /c settitle "1 + 1 = 2" bc -ilq
    funpack(1, "calc")
    return
#+::run cmdw /c scilab
#f2::run cmdw /c stardict
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; more applications {
#+e::run cmdw /c em
#+g::run cmd /c gcon
#+j::run cmdw /c eclipse
^!enter::
    settitlematchmode 2
    ifwinactive, Eclipse SDK
    {
        send {end}+{home}^+d
        sleep 300
        send {end}{enter}{left 2}
    } else {
        send ^!{enter}
    }
    return
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; handlers {
    return
onexit:
    restore()
    exitapp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;}
