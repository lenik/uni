#!/usr/bin/perl

=head1 NAME

wm - Windows Manager

=cut
use strict;
use vars qw($LOGNAME $LOGLEVEL);
    $LOGNAME    = 'wm'; # $0 =~ /([^\/\\.]+)(?:\.\w+)*$/;
use cmt::ftime;
use cmt::log(2);
# use cmt::msc;
use cmt::path('temp_path');
# use cmt::util;
use cmt::vcs('parse_id');
    my %RCSID   = parse_id('$Id: .pl,v 1.16 2007-09-29 11:31:33 lenik Exp $');
use cmt::winuser;
use Data::Dumper;
use Encode;
use Encode::Alias;
use Getopt::Long;

sub _main; sub _version; sub _help;

sub is_visible;

sub build_tree;
sub get_text;       #(HWND)
sub set_text;       #(HWND, TEXT)
sub bools;          #("123"): "49.50.51"
sub set_kbdstate;   #(VKEY, STATE)
sub send_string;    #(HWND, char[])
sub set_focus;      #(?, HWND)
sub send_input;     #(MSG, VKEY, SCANCODE)
sub dump_tree;      #($TREE, TABCHAR, INDENT-PREFIX, \@OUTPUT)

sub streq;
sub strstr;
sub match;
sub in_list;

our $FindClass_N;
our $FindClass_P;
our $SendMessage_NN;
our $SendMessage_NP;
our $SendMessage_PN;
our $SendMessage_PP;
our $SendDlgMessage_NN;
our $SendDlgMessage_NP;
our $SendDlgMessage_PN;
our $SendDlgMessage_PP;

our $opt_tree           = 0;
our @opt_hwnd;
our @opt_class_name;
# our @opt_match;
our $opt_ignore_case    = 0;
our $opt_sw;
our $opt_recursive      = 0;
our $opt_restore        = 0;
our @opt_send_message;
our @opt_send_string;
our $opt_set_text;
our $opt_use_active     = 0;
our $opt_invisible      = 0;

our $TREE;
our $FLAT = [];

BEGIN {
    sub GW_HWNDFIRST        { 0 }
    sub GW_HWNDLAST         { 1 }
    sub GW_HWNDNEXT         { 2 }
    sub GW_HWNDPREV         { 3 }
    sub GW_OWNER            { 4 }
    sub GW_CHILD            { 5 }

    sub SW_HIDE             { 0 }
    sub SW_SHOWNORMAL       { 1 }
    sub SW_NORMAL           { 1 }
    sub SW_SHOWMINIMIZED    { 2 }
    sub SW_SHOWMAXIMIZED    { 3 }
    sub SW_MAXIMIZE         { 3 }
    sub SW_SHOWNOACTIVATE   { 4 }
    sub SW_SHOW             { 5 }
    sub SW_MINIMIZE         { 6 }
    sub SW_SHOWMINNOACTIVE  { 7 }
    sub SW_SHOWNA           { 8 }
    sub SW_RESTORE          { 9 }
    sub SW_SHOWDEFAULT      { 10 }
    sub SW_FORCEMINIMIZE    { 11 }

    Win32::API->Import('user32', 'HWND GetDesktopWindow()');
    Win32::API->Import('user32', 'HWND GetTopWindow(HWND hWnd)');

    Win32::API->Import('user32', 'HWND GetWindow(HWND hWnd, UINT uCmd)');

    # these can't get the active console window
    # GetActiveWindow
    # GetFocus

    # HWND FindWindowEx(HWND parent, HWND child_after, LPCTSTR class, LPCTSTR window)
    $FindClass_N = new Win32::API('user32', 'FindWindowEx', 'NNNN', 'N');
    $FindClass_P = new Win32::API('user32', 'FindWindowEx', 'NNPN', 'N');

    Win32::API->Import('kernel32', 'GetConsoleTitle', 'PN', 'N'); #(LPTSTR lpTitle, DWORD nSize)');

    Win32::API->Import('user32', 'BOOL ShowWindow(HWND hWnd, UINT nCmdShow)');

    Win32::API->Import('user32', 'int GetWindowTextLength(HWND hWnd)');
    Win32::API->Import('user32', 'GetWindowText', 'NPN', 'N'); #(HWND hWnd, LPTSTR lpString, int nMaxCount)');

    Win32::API->Import('user32', 'HWND SetFocus(HWND hWnd)');
    Win32::API->Import('user32', 'HWND SetActiveWindow(HWND hWnd)');
    Win32::API->Import('user32', 'BOOL SetForegroundWindow(HWND hWnd)');

    Win32::API->Import('user32', 'GetKeyboardState', 'P', 'N');
    Win32::API->Import('user32', 'SetKeyboardState', 'P', 'N');

    Win32::API->Import('user32', 'LRESULT PostMessageA(HWND hWnd, UINT Msg, LONG wParam, LONG lParam)');
    Win32::API->Import('user32', 'LRESULT PostMessageW(HWND hWnd, UINT Msg, LONG wParam, LONG lParam)');

    Win32::API->Import('user32', 'LRESULT SendMessageA(HWND hWnd, UINT Msg, LONG wParam, LONG lParam)');
    Win32::API->Import('user32', 'LRESULT SendMessageW(HWND hWnd, UINT Msg, LONG wParam, LONG lParam)');
    $SendMessage_NN = new Win32::API('user32', 'SendMessage', 'NNNN', 'N');
    $SendMessage_NP = new Win32::API('user32', 'SendMessage', 'NNNP', 'N');
    $SendMessage_PN = new Win32::API('user32', 'SendMessage', 'NNPN', 'N');
    $SendMessage_PP = new Win32::API('user32', 'SendMessage', 'NNPP', 'N');

    Win32::API->Import('user32', 'LONG SendDlgItemMessage(HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam)');
    $SendDlgMessage_NN = new Win32::API('user32', 'SendDlgItemMessage', 'NNNNN', 'N');
    $SendDlgMessage_NP = new Win32::API('user32', 'SendDlgItemMessage', 'NNNNP', 'N');
    $SendDlgMessage_PN = new Win32::API('user32', 'SendDlgItemMessage', 'NNNPN', 'N');
    $SendDlgMessage_PP = new Win32::API('user32', 'SendDlgItemMessage', 'NNNPP', 'N');

    Win32::API::Struct->typedef( WINDOWPLACEMENT => qw{
        UINT len;
        UINT flags;
        UINT showCmd;
        LONG xmini;
        LONG ymini;
        LONG xmaxi;
        LONG ymaxi;
        LONG left;
        LONG top;
        LONG right;
        LONG bottom;
    });
    Win32::API->Import('user32', 'BOOL GetWindowPlacement(HWND hWnd, LPWINDOWPLACEMENT lpwndpl)');
    Win32::API->Import('user32', 'BOOL IsWindowVisible(HWND hWnd)');

    # type == INPUT_KEYBOARD (1)
    Win32::API::Struct->typedef( INPUTKBD => qw{
        UINT type;
        WORD wVk;
        WORD wScan;
        LONG dwFlags;
        LONG time;
        LONG dwExtraInfo;
        LONG res1;
    });
    Win32::API->Import('user32', 'UINT SendInput(UINT nInputs, LPINPUTKBD pInputs, int cbSize)');
    Win32::API->Import('user32', 'LONG GetMessageExtraInfo()');
}

sub _boot {
    GetOptions('quiet|q'        => sub { $LOGLEVEL-- },
               'verbose|v'      => sub { $LOGLEVEL++ },
               'version'        => sub { _version; exit 0 },
               'help|h'         => sub { _help; exit 0 },'tree|t',
               'hwnd|w=s',      => \@opt_hwnd,
               'class-name|c=s' => \@opt_class_name,
             # 'match'          => \@opt_match,
               'use-active',
               'ignore-case|i',
               'hide'           => sub { $opt_sw = SW_HIDE },
               'show'           => sub { $opt_sw = SW_SHOW; $opt_invisible = 1 },
               'sw=n',
               'send-message|m=s'=>\@opt_send_message,
               'send-string|s=s'=>\@opt_send_string,
               'set-text|st=s',
               'recursive|r',
               'restore',
               'invisible',
               );

    for (my $i = 0; $i <= $#opt_hwnd; $i++) {
        my $hwnd = $opt_hwnd[$i];
        if ($hwnd =~ m/^0x(.*)$/i) {
            $hwnd = hex($1);
        } elsif ($hwnd =~ m/^(.+)h$/i) {
            $hwnd = hex($1);
        } elsif ($hwnd =~ m/^00/) {
            $hwnd = hex($hwnd);
        } elsif ($hwnd =~ m/[a-f]/i) {
            $hwnd = hex($hwnd);
        } else {
            next;
        }
        $opt_hwnd[$i] = $hwnd;
    }

    _main;
}

=head1 SYNOPSIS

B<wm>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<...the rest of arguments...> ]>

=head1 DESCRIPTION

B<wm> is a WHAT used for WHAT. It HOW-WORKS.

BACKGROUND-PROBLEM.

HOW-wm-RESOLVES.

=head1 OPTIONS

=over 8

=item B<-m> | B<--my-option>

...

=item B<-q> | B<--quiet>

Repeat this option to suppress unimportant information to display.

=item B<-v> | B<--verbose>

Repeat this option to display more detailed information.

=item B<-h> | B<--help>

Display a breif help page and exit(0).

=item B<--version>

Display a short version information and exit(0).

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    &_version;
    print "\nSyntax: \n    $0 [OPTION] [--] ...\n", <<'EOM';

Common options:
    -t, --tree              dump windows tree
    -w, --hwnd=HWND         add an HWND to mlist
    -c, --class-name=CLASS  add windows of certain class to mlist
        --match             add windows with title matched
    -i, --ignore-case       case-insensitive matching
        --hide              hide the window list
        --show              show the window list
        --sw=<number>       show the window list in specified mode
    -m, --send-message=MSG,WPARAM,LPARAM
                            specify PARAM in number or string
    -s, --send-string=STR   send each char in WM_CHAR
    -st,--set-text=TEXT     by calling SetWindowText
        --restore           restore last window list
        --invisible         include invisible windows
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
    -h, --help              show this help page
        --version           print the version info
EOM
}

exit (_boot or 0);

sub _main {
    my $path_dump = temp_path('wm_last.lst');

    my $req_tree = 1; # $opt_tree
    if ($req_tree) {
        _log2 "Building windows tree...";
        my $desk = GetDesktopWindow();
        $TREE = build_tree $desk;
    }

    dump_tree($TREE, '', '', $FLAT);
    dump_tree $TREE if $opt_tree;

    my @consoles;
    my $console1;
    {
        my $buf = ' ' x 1000;
        my $len = GetConsoleTitle($buf, 1000);
        my $cap = substr($buf, 0, $len);
        chop $cap if substr($cap, -1) eq "\0";
        _log2 "Console Title: '$cap'";

        @consoles = match($cap); #GetActiveWindow();
        _log2 "recognize as a console: $_" for @consoles;
        $console1 = $consoles[0];
    }

    if (@ARGV) {
        my $query = shift @ARGV;
        _log2 "query $query";
        my $test_hwnd = 1 * $query;
        if (get_text($test_hwnd) eq '') {
            my @matches = match($query);
            # remove console from @matches
            @matches = grep { not in_list($_, @consoles) } @matches;
            _log2 "query matched: $_" for @matches;
            push @opt_hwnd, @matches;
        } else {
            _log2 "query-hwnd: $test_hwnd";
            push @opt_hwnd, $test_hwnd;
        }
    } else {
        $opt_use_active = 1;
    }

    for (@opt_class_name) {
        my $cls = $_;
        my $fun = $FindClass_P;
        if ($cls =~ m/^#(\d+)/) {
            $cls = $1;
            $fun = $FindClass_N;
        }
        _log2 "Find-Class: $cls";
        my $last = 0;
        my $hwnd;
        while ($hwnd = $fun->Call(0, $last, $cls, 0)) {
            if (is_visible $hwnd) {
                _log2 "Window-Of-Class: $hwnd - " . get_text($hwnd);
                push @opt_hwnd, $hwnd;
            }
            $last = $hwnd;
        }
    }

    if ($opt_restore) {
        open(DUMP, "<$path_dump")
            or die "Can't open last-list ($path_dump)";
        my @lines = <DUMP>;
        my $script = join('', @lines);
        $script =~ s/^\s* \$\w+ \s* = //x;
        my $val = eval($script);
        close DUMP;
        @opt_hwnd = @$val;
        $opt_sw = SW_SHOW;
    }

    if ($opt_use_active && !@opt_hwnd) {
        if (scalar(@consoles) > 1) {
            _log1 "Warning: multiple console with the same title";
        }
        _log2 "Use Active Window: $console1";
        push @opt_hwnd, $console1;
    }

    _log2 "mlist: $_ - " . get_text($_) for @opt_hwnd;
    if (open(DUMP, ">$path_dump")) {
        _log2 "dump last-list to $path_dump";
        print DUMP Dumper(\@opt_hwnd);
        close DUMP;
    }

    if (defined $opt_sw) {
        for (@opt_hwnd) {
            my $t = get_text($_);
            _log1 "ShowWindow($opt_sw): $t";
            ShowWindow($_, $opt_sw);
        }
    }

    for (@opt_send_message) {
        my @args;
        while (m/((?: \\.|[^,])+?) \s* (?: ,|$)/xg) {
            push @args, $1;
        }
        my $ctrl = undef;
        $ctrl = shift @args if (scalar(@args) == 4 or defined $_ID{$args[0]} );
        $ctrl = $_ID{$ctrl} if defined $_ID{$ctrl};

        # assert scalar(@args) > 0;
        my ($msg, $wparam, $lparam) = @args;
        $msg = $_WM{$msg} if defined $_WM{$msg};
        $msg ||= $_WM{WM_COMMAND};
        $wparam ||= 0;
        $lparam ||= 0;
        my $nw = $wparam =~ m/^\d+$/;
        my $np = $lparam =~ m/^\d+$/;
        my $proto = ($nw ? 'N' : 'P') . ($np ? 'N' : 'P');
        if (defined $ctrl) {
            if ($msg == $_WM{WM_COMMAND}) {
                for my $hwnd (@opt_hwnd) {
                    _log2 "SendMessageA($hwnd, $msg, $ctrl, $lparam)";
                    SendMessageA($hwnd, $msg, $ctrl, $lparam);
                }
            } else {
                my $funname = 'SendDlgMessage_' . $proto;
                my $fun = eval('$'.$funname);
                _log2 "$funname($ctrl, $msg, $wparam, $lparam)";
                for my $hwnd (@opt_hwnd) {
                    $fun->Call($hwnd, $ctrl, $msg, $wparam, $lparam);
                }
            }
        } else {
            my $funname = 'SendMessage_' . $proto;
            my $fun = eval('$'.$funname);
            _log2 "$funname($msg, $wparam, $lparam)";
            for my $hwnd (@opt_hwnd) {
                $fun->Call($hwnd, $msg, $wparam, $lparam);
            }
        }
    }

    if ($opt_set_text) {
        for my $hwnd (@opt_hwnd) {
            set_text($hwnd, $opt_set_text);
        }
    }
    for my $sendstr (@opt_send_string) {
        for my $hwnd (@opt_hwnd) {
            send_string($hwnd, $sendstr);
        }
    }
}

=head1 DIAGNOSTICS

(No Information)

=cut
# (HELPER FUNCTIONS)

sub is_visible {
    return 100 if $opt_invisible;
    my $hwnd = shift;
    return IsWindowVisible($hwnd);
    # my $wndpl = Win32::API::Struct->new('WINDOWPLACEMENT');
    # $wndpl->{len} = $wndpl->sizeof;
    # GetWindowPlacement($hwnd, $wndpl) or die ("Can't get window placement");
    # return 0 if ($wndpl->{showCmd} == SW_HIDE);
    # my $w = abs $wndpl->{right} - $wndpl->{left};
    # my $h = abs $wndpl->{bottom} - $wndpl->{top};
    # return -1 if $w == 0 or $h == 0;
    # return 1;
}

=head1 HACKING

(No Information)

=cut
# (MODULE FUNCTIONS)

# return  children: { hwnd -> tree }
sub build_tree {
    my $parent = shift;
    my %children;
    my $child = GetWindow($parent, GW_CHILD);
    while ($child) {
        if (is_visible($child) > 0) {
            my $ctree = $opt_recursive ? build_tree($child) : undef;
            if ($ctree) {
                $children{$child} = $ctree;
            } else {
                $children{$child} = undef;
            }
        }
        $child = GetWindow($child, GW_HWNDNEXT);
    }
    return %children ? \%children : undef;
}

sub get_text {
    my $hwnd = shift;
    my $len = GetWindowTextLength($hwnd) + 10;
    my $buf = ' ' x $len;
    $len = GetWindowText($hwnd, $buf, $len);
    return substr($buf, 0, $len);
}

sub set_text {
    my $hwnd = shift;
    my $text = shift;
    SetWindowText($hwnd, $text);
}

sub bools {
    my $bin = shift;
    my $buf;
    for (my $i = 0; $i < length($bin); $i++) {
        my $b = substr($bin, $i, 1);
        $buf .= ord($b) . ".";
    }
    return $buf;
}
sub set_kbdstate {
    my ($vk, $st) = shift;
    my $KBD = ' 'x256;
    #GetKeyboardState($KBD);
    #_log2 "KBD 1=". bools($KBD);
    substr($KBD, $vk, 1) = chr($st);
    SetKeyboardState($KBD);
    #GetKeyboardState($KBD);
    #_log2 "KBD 2=". bools($KBD);
}

my %escapes = (
    'n' => "\n",
    'r' => "\r",
    't' => "\t",
    '0' => "\0",
    );
my %ctrlmap = (
    'c' => [ $_WM{WM_KEYDOWN},  $_VK{VK_CONTROL},   0x1D ],
    'C' => [ $_WM{WM_KEYUP},    $_VK{VK_CONTROL},   0x1D ],
    'a' => [ $_WM{WM_KEYDOWN},  $_VK{VK_MENU},      0x38 ],
    'A' => [ $_WM{WM_KEYUP},    $_VK{VK_MENU},      0x38 ],
    's' => [ $_WM{WM_KEYDOWN},  $_VK{VK_SHIFT},     0x2A ],
    'S' => [ $_WM{WM_KEYUP},    $_VK{VK_SHIFT},     0x2A ],
    'r' => [ $_WM{WM_KEYDOWN},  $_VK{VK_RETURN},    0x1C ],
    'R' => [ $_WM{WM_KEYUP},    $_VK{VK_RETURN},    0x1C ],
    'del' => [ $_WM{WM_KEYDOWN},$_VK{VK_DELETE},    0x53 ],
    '/del'=> [ $_WM{WM_KEYUP},  $_VK{VK_DELETE},    0x53 ],

    # Don't work::
    'focus'     => sub { set_focus(@_) },
    'show'      => sub { shift; ShowWindow(shift, SW_SHOW) },
    'hide'      => sub { shift; ShowWindow(shift, SW_HIDE) },
    'sleep'     => \&fsleep,
    'ctrl'      => sub { set_kbdstate($_VK{VK_CONTROL}, 128) },
    '/ctrl'     => sub { set_kbdstate($_VK{VK_CONTROL},   0) },
    'alt'       => sub { set_kbdstate($_VK{VK_MENU},    128) },
    '/alt'      => sub { set_kbdstate($_VK{VK_MENU},      0) },
    'shift'     => sub { set_kbdstate($_VK{VK_SHIFT},   128) },
    '/shift'    => sub { set_kbdstate($_VK{VK_SHIFT},     0) },
    );
sub send_string {
    my ($hwnd, $str_l) = @_;
    my $cs = 'gb2312';
    my $str = decode($cs, $str_l);
    my $str0 = encode($cs, $str);
    my $len = length($str);
    _log2 "send_string($hwnd, $str0)";

    for (my $i = 0; $i < $len; $i++) {
        my $c = substr($str, $i, 1);
        if ($c eq '\\') {
            $i++; $c = substr($str, $i, 1);
            if (defined $escapes{$c}) {
                $c = $escapes{$c};
            } elsif ($c eq '{') {
                if (substr($str, $i + 1) =~ m/^(.*?)( .+?)?\}/) {
                    my ($ctrl, $args) = ($1, $2);
                    $i += length($&);
                    my ($msg, $vk, $sc) = (0, 0, 0);
                    if (defined $ctrlmap{$ctrl}) {
                        my $cm = $ctrlmap{$ctrl};
                        if (ref $cm eq 'ARRAY') {
                            ($msg, $vk, $sc) = @$cm;
                        } elsif (ref $cm eq 'CODE') {
                            &$cm($args, $hwnd);
                            next;
                        }
                    } elsif (substr($ctrl, 0, 1) eq 'k') {
                        $vk = ord(substr($ctrl, 1, 1));
                        $msg = $_WM{WM_KEYDOWN};
                    } elsif (substr($ctrl, 0, 1) eq 'K') {
                        $vk = ord(substr($ctrl, 1, 1));
                        $msg = $_WM{WM_KEYUP};
                    } else {
                        die "Unknown control: $ctrl";
                    }
                    _log2 "send_input($msg, $vk, $sc)"; #hwnd
                    #PostMessageA($hwnd, $msg, $vk, $sc);
                    send_input($msg, $vk, $sc);
                    next;
                } # \{ ... }
            } # \{
        } # \
        _log2 "SendMessageW($hwnd, $_WM{WM_CHAR}, ".ord($c).", 0); ";
        SendMessageW($hwnd, $_WM{WM_CHAR}, ord($c), 0);
    }
}

sub set_focus {
    shift;
    my $hwnd = shift;
    SetActiveWindow($hwnd);
    SetFocus($hwnd);
    SetForegroundWindow($hwnd);
}

sub send_input {
    my ($msg, $vk, $sc) = @_;
    my $flags = 0;

    # KEYEVENTF_KEYUP
    $flags |= 0x0002 if ($msg == $_WM{WM_KEYUP});

    my $kbdin = Win32::API::Struct->new('INPUTKBD');
    $kbdin->{type}      = 1;     # INPUT_KEYBOARD
    $kbdin->{wVk}       = $vk;
    $kbdin->{wScan}     = $sc;
    $kbdin->{dwFlags}   = $flags;
    $kbdin->{time}      = 0;
    $kbdin->{dwExtraInfo}=GetMessageExtraInfo();

    my $n = SendInput(1, $kbdin, $kbdin->sizeof);
    _log2 "SendInput(1, $kbdin, ".$kbdin->sizeof."): $n";

    fsleep .01;
}

sub dump_tree {
    my ($tree, $tab, $indent, $output) = @_;
    for my $hwnd (keys %$tree) {
        my $text = get_text($hwnd);
        my $line = sprintf("$indent%08x - %s", $hwnd, $text);
        if (defined $output) {
            push @$output, $line;
        } else {
            print $line."\n";
        }

        my $ctree = $tree->{$hwnd};
        if (defined $ctree) {
            dump_tree($ctree, $tab, $tab.$indent, $output);
        }
    }
}

sub streq {
    my ($a, $b) = @_;
    if ($opt_ignore_case) {
        return lc($a) eq lc($b);
    }
    return $a eq $b;
}

sub strstr {
    my ($str, $pattern) = @_;
    if ($opt_ignore_case) {
        return index(lc($str), lc($pattern));
    }
    return index($str, $pattern);
}

sub match {
    my $pattern = shift;
    my @list;
    my @matches = grep { strstr($_, $pattern) >= 0 } @$FLAT;
    for (@matches) {
        _log2 "matched: $_";
        my $hwnd_hex = substr($_, 0, 8);
        my $hwnd = hex($hwnd_hex);
        push @list, $hwnd;
    }
    return @list;
}

sub in_list {
    my ($e, @list) = @_;
    my @matches = grep { streq($_, $e) } @list;
    return scalar(@matches) > 0;
}

=head1 HISTORY

=over

=item 0.x

The initial version.

=back

=cut
sub _version {
    print "[$LOGNAME] Windows Manager \n";
    print "Written by Lenik,  Version 0.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"Windows Manager">

=head1 AUTHOR

Xima Lenik <name@mail.box>

=cut
