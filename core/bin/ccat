#!/usr/bin/perl

use strict;
use cmt::atext;
use cmt::pp;
use cmt::util;
use cmt::vcs;
use Getopt::Long;

sub _boot;
sub info;
sub info2;
sub version;
sub help;

sub main;
sub resolv;

our $opt_verbtitle      = 'ccat';
our $opt_verbtime       = 0;
our $opt_verbose        = 1;
our $opt_eof_end;
our $opt_range;
our $opt_primary;
our $opt_undef          = '';
our $opt_format;
our $opt_canonical_mode;
our $opt_trim_lines;

my @line;

my %const = (
    q   => '\'',
    Q   => '"',
    );

sub _boot {
    GetOptions('quiet|q'    => sub { $opt_verbose-- },
               'verbose|v'  => sub { $opt_verbose++ },
               'version'    => sub { version; exit },
               'help|h'     => sub { help; exit },
               'range|r=s',
               'eof-end|e',
               'undef|u=s',
               'format|f=s',
               'canonical-mode|c',
               'trim-lines|t',
               );

    for (my $i = 0; $i <= $#ARGV; $i++) {
        my $arg = $ARGV[$i];
        if (substr($arg, 0, 2) eq 'p;') {
            $ARGV[$i] = substr($arg, 2);
            $opt_primary = $i;
            last;
        }
    }

    die "primary-file is disabled when --end-eof is specified"
        if $opt_eof_end and defined $opt_primary;

    unless (defined $opt_format) {
        my $fmt;
        for (0..$#ARGV) {
            $fmt .= ' ' if defined $fmt;
            $fmt .= '$'.($_+1);
        }
        $opt_format = $fmt;
    }

    info2 'file: '.$_ for @ARGV;
    info2 'primary-file: '.$ARGV[$opt_primary]
        if defined $opt_primary;

    info2 'format.src: '.$opt_format;
    $opt_format = ppfmt_foobar \&resolv, $opt_format;
    info2 'format.dom: '.atext_dump($opt_format);

    main;
}

sub info {
    return if $opt_verbose < 1;
    my $text = shift;
    print cdatetime.' ' if $opt_verbtime;
    print "[$opt_verbtitle] $text\n";
}

sub info2 {
    return if $opt_verbose < 2;
    my $text = shift;
    print cdatetime.' ' if $opt_verbtime;
    print "[$opt_verbtitle] $text\n";
}

sub version {
    my %id = parse_id('$Id: ccat,v 1.4 2007-11-08 10:52:37 lenik Exp $');
    print "[$opt_verbtitle] column-oriented cat utility \n";
    print "Written by Lenik,  Version 0.$id{rev},  Last updated at $id{date}\n";
}

sub help {
    version;
    print "\nSyntax: \n    $0 [OPTION] [--] files...\n", <<'EOM';

Primary file:
    Filename with prefix 'p;' will be treated as primary-file, if a primary-
    -file is specified, then the count of output lines of ccat is explicitly
    equals to the count of lines of primary file.

    When --eof-end is specified, the primary-file feature is disabled.

Virtual files:
    Filename with prefix 'v;' will be treated as an expression evaluated for
    each line.  The format of expression is same to the output format.

Common options:
    -c, --canonical-mode    disable "X;" prefix feature
    -e, --eof-end           end when eof of any of files
    -r, --range=SKIPS,LINES skips head lines, and read no more than LINES
                            (-r=SKIPS -r=,LINES is ok.)
    -u, --undef=STRING      replace non-existing columns
    -f, --format=FORMAT     output format
    -t, --trim-lines        trim input lines
    -h, --help              show this help page
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
        --version           print the version info

Format:
    (see cmt::ppfmt_foobat)
    vars:
        $1, $2, ...         current columns of files
    const:
        $q='    $Q="

Examples:
    ccat -e -f "ren $Q$1$Q $Q$2$Q" old.lst new.lst | source

EOM
}

exit (_boot or 0);

sub main {
    my @fd;
    my $hcount = 0;
    for (my $i = 0; $i <= $#ARGV; $i++) {
        $_ = $ARGV[$i];
        if (substr($_, 0, 2) eq 'v;') {
            my $exp = substr($_, 2);
            info2 'exp<$i>.src: '.$exp;
            $exp = ppfmt_foobar \&resolv, $exp;
            info2 'exp<$i>.dom: '.atext_dump($exp);
            push @fd, $exp;
        } else {
            open(my $h, '<', $_)
                or die "can't open file $_: $!";
            push @fd, $h;
            $hcount++;
        }
    }

    my $end;
    until ($end) {
        undef @line;
        my $eof_count = 0;
        for (my $i = 0; $i <= $#fd; $i++) {
            my $fd = $fd[$i];
            if (ref $fd eq 'GLOB') {
                $_ = <$fd>;
                if (defined $_) {
                    chop;
                } else {
                    if ($opt_eof_end) { $end = 1 }
                    elsif (! defined $opt_primary) { $eof_count++ }
                    elsif ($opt_primary == $i) { $end = 1 }
                    else { $_ = $opt_undef }
                }
            } else {
                $_ = $fd->val;
            }
            $_ =~ s/^\s+// if $opt_trim_lines;
            $_ =~ s/\s+$// if $opt_trim_lines;
            push @line, $_;
        }
        $end = 1 if $eof_count >= $hcount;
        last if $end;

        print $opt_format->val, "\n";
    }

    for (@fd) {
        if (ref $_ eq 'GLOB') {
            close $_;
        }
    }
    0
}

sub resolv {
    my $name = shift;
    if (exists $const{$name}) {
        return $const{$name};
    } elsif ($name =~ /^\d+$/) {
        return $line[$name-1];
    }
    return '?';
}
