#!/usr/bin/perl

use strict;
use cmt::util;
use cmt::vcs;
use Getopt::Long;
use Exporter;
use vars qw/@ISA @EXPORT/;

sub _boot;
sub _main;
sub _use;
sub _require;
sub _info;
sub _info2;
sub _version;
sub _help;

@ISA = qw(Exporter);
@EXPORT = qw(
	_info
	_info2
	);

our $opt_verbtitle      = 'fun';
our $opt_verbtime       = 0;
our $opt_verbose        = 1;
our $opt_funname;

sub _boot {
    my @FARGV;
    for (my $i = 0; $i < scalar(@ARGV); $i++) {
        my $arg = $ARGV[$i];
        if ($arg =~ m/^~/) {
            @FARGV = splice(@ARGV, $i + 1);
            $opt_funname = substr(pop @ARGV, 1);
            last;
        }
    }
    GetOptions('quiet|q'    => sub { $opt_verbose-- },
               'verbose|v'  => sub { $opt_verbose++ },
               'version'    => sub { _version; exit },
               'help|h'     => sub { _help; exit },
               'use|u=s'    => sub { shift; _use shift },
               'require|r=s'=> sub { shift; _require shift },
               );

    die("fun name isn't specified") if $opt_funname eq '';

    _use $_ for @ARGV;

    @ARGV = @FARGV;
    $0 = $opt_funname;
    _info2 "fun name: $0";
    _info2 "fun arg: $_" for @ARGV;

    my $ret = _main;

    _info2 "fun $0 returns: $ret";
    return $ret;
}

sub _use {
    my $pkg = shift;
    $pkg = "fun:$pkg" if $pkg =~ m/^:/;
    _info2 "use $pkg; ";
    my $ret = eval("use $pkg; ");
    _info2 "use failed: $@" if $@ and not defined $ret;
}

sub _require {
    my $pkg = shift;
    _info "require $pkg; ";
    my $ret = eval("require $pkg; ");
    _info "use failed: $@" if $@ and not defined $ret;
}

sub _info {
    return if $opt_verbose < 1;
    my $text = shift;
    print datetime.' ' if $opt_verbtime;
    print "[$opt_verbtitle] $text\n";
}

sub _info2 {
    return if $opt_verbose < 2;
    my $text = shift;
    print datetime.' ' if $opt_verbtime;
    print "[$opt_verbtitle] $text\n";
}

sub _version {
    my %id = parse_id('$Id: fun,v 1.5 2007-06-25 12:58:13 lenik Exp $');
    print "[opt_verbtitle] Perl simple function caller\n";
    print "Written by Lenik,  Version $id{rev},  Last updated at $id{date}\n";
}

sub _help {
    _version;
    print <<"EOM";

Syntax:
        $0 [<options>] [<use-package>...]
            ~<fun-name> <fun-options>...

Option:
        --use=<package> (u)
        --require=<package> (r)
        --quiet (q)
        --verbose (v, repeat twice give you more verbose info)
        --version
        --help (h)
EOM
}

exit _boot;

use fun::test;
sub _main {
    my $sub = eval('\&$0');
    &$sub(@ARGV);
}
