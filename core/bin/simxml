#!/usr/bin/perl

# $Id: simxml,v 1.3 2005-07-06 07:05:56 dansei Exp $

use strict;
use Getopt::Long;
use File::Basename;
use DirHandle;
use cmt::vcs;


our $opt_comment = 0;
our $opt_indent = 0;
our $opt_force = 0;
our $opt_quiet = 0;
our $opt_veryquiet = 0;
our $opt_verbose = 0;
our $opt_help = 0;
our $opt_which_me = $0;
our %opt_constants;
    while (<DATA>) {
        chop;
        next if m/^\#/;
        my ($k, $v) = m/^\s*(\S+)\s*=\s*(\S*)$/;
        next if ! $k;
    }
our %opt_escapes = (
    'n' => "\n",
    't' => "\t",
    'r' => "\r",
    );


sub getopts {
    # print "BEFORE:: ".join(",", @ARGV)."\n";
    our $options = GetOptions(
        'comment|c',
        'indent|i',
        'define|d=s%',
        'force',
        'quiet',
        'veryquiet|vq',
        'verbose|v',
        'help|?' => sub { &help; },
        );
    $opt_quiet = 1 if ($opt_veryquiet);
    # print "AFTER:: ".join(",", @ARGV)."\n";
}

    &getopts;

    # ELEMENT
    #   ATTRLIST
    #       ATTR_EQ
    #       ATTR_VAL
    #   BODY
    #   COMMENT
    #   PREPROCESSOR
    #                       STRING

    my @state_stack;
    my @tag_stack;

    my $c_element = 'ROOT';
    my $c_attrkey;
    my $c_attrvalue;
    my $c_preprocessor;
    my $c_string;

    my @lines;
    my $text;
    my $line = 0;
    my $c;
    my $buf;


    @state_stack = ('ELEMENT');

    while (<>) {
        while (m/[^\\]\$(\w+)/) {
            my $v = $opt_constants{$1};
            if ($v) {
                s/([^\\])\$\w+/$1$v/;
            } else {
                s/([^\\])\$(\w+)/$1\\\$$2/;
            }
        }
        push @lines, $_;
    }

    $_ = join('', @lines);

    SCAN: while ($_) {

        if (m/^\#[^\n]*/) {
            print "<!-- $& -->\n";
            $_ = substr($_, length($&));
            next SCAN;
        }

        $state = $stack_stack[-1];

        STATE: {

            if ($state eq 'ELEMENT') {
                if (m/^(\w+)\s*(\[.*\])\s*\{/) {
                    push @tag_stack, $c_element;
                    $c_element = $1;
                    if ($2) {
                        my @attrs = split(/(?=[^\\])\s+/, $2);
                        print "<$c_element";
                        for my $attr (@attrs) {
                            my ($k, $v) = $attr =~ m/(\w+)\s*=\s*(.*?)\s*$/;
                            if ($v !~ m/^[\"\']/) { $v = "\"$v\""; }
                            print " $k=$v";
                        }
                    }
                }
            }
    }


sub help {
    my %id = parse_id('$Id: simxml,v 1.3 2005-07-06 07:05:56 dansei Exp $');

    print <<"EOM";
[SIMXML] Simplified XML Document based on Symbols
Written by Snima Denik,  Version $id{rev},  last update $id{date}

Syntax:
    simxml
        --comment (-c)
        --indent (-i)
        --define name=value (-d name=value)
        --force (-f)
        --quiet (-q)
        --veryquiet (-vq)
        --verbose (-v)
        --help (-?)
EOM
    exit 0;
}


__DATA__

    NS-XSLT         = http://www.w3.org/1999/XSL/Transform
    NS-FO           = http://www.w3.org/1999/XSL/Format

    NS-XAA          = http://www.bodz.net/xml/XAA
    NS-GDML         = http://www.bodz.net/xml/GDML
    NS-DD           = http://www.bodz.net/xml/DD
    NS-LATIX        = http://www.bodz.net/xml/LATIX
    NS-XDISP        = http://www.bodz.net/xml/XDISP

    NS-REDIRECT     = redirect

