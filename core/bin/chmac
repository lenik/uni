#!/usr/bin/perl

=head1 NAME

chmac - Change MAC Address

=cut
use strict;
use vars qw($LOGNAME $LOGLEVEL);
use cmt::log(2);
    $LOGNAME    = 'chmac'; # $0 =~ /([^\/\\.]+)(?:\.\w+)*$/;
use cmt::vcs('parse_id');
    my %RCSID   = parse_id('$Id$');
use Getopt::Long;
use Net::Adapter;
use Win32::API;
use Win32::API::Struct;
use YAML;

sub _main; sub _version; sub _help;
sub macstr;
sub macbin;
sub iplist;
sub build_devices;
sub dump_devices;

our $opt_device;
our $opt_mac;

my %idx_index;
my %idx_combo;
my %idx_id;
my %idx_desc;
my %idx_mac;
my %idx_ip;

sub _boot {
    GetOptions('quiet|q'        => sub { $LOGLEVEL-- },
               'verbose|v'      => sub { $LOGLEVEL++ },
               'version'        => sub { _version; exit 0 },
               'help|h'         => sub { _help; exit 0 },
               'device|d:s',
               'mac|m=s',
               );
    $opt_device = shift @ARGV unless defined $opt_device;
    $opt_mac    = shift @ARGV unless defined $opt_mac;

    build_devices;

    if ($opt_device eq '') {
        dump_devices;
        exit;
    }

    if (defined $opt_device) {
        if (0) {
            # dummy
        } elsif (exists $idx_combo  {$opt_device}) {
            $opt_device = $idx_combo{$opt_device};
        } elsif (exists $idx_index  {$opt_device}) {
            $opt_device = $idx_index{$opt_device};
        } elsif (exists $idx_id     {$opt_device}) {
            $opt_device = $idx_id   {$opt_device};
        } elsif (exists $idx_desc   {$opt_device}) {
            $opt_device = $idx_desc {$opt_device};
        } elsif (exists $idx_mac    {$opt_device}) {
            $opt_device = $idx_mac  {$opt_device};
        } elsif (exists $idx_ip     {$opt_device}) {
            $opt_device = $idx_ip   {$opt_device};
        } else {
            die "no found of $opt_device";
        }
    }
    _log1 "$opt_device->{addr} ($opt_device->{desc})";
    _log2 'device-info: '.Dump($opt_device);

    _main;
}

=head1 SYNOPSIS

B<chmac>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<...the rest of arguments...> ]>

=head1 DESCRIPTION

B<chmac> is a WHAT used for WHAT. It HOW-WORKS.

BACKGROUND-PROBLEM.

HOW-chmac-RESOLVES.

=head1 OPTIONS

=over 8

=item B<-m> | B<--my-option>

...

=item B<-q> | B<--quiet>

Repeat this option to suppress unimportant information to display.

=item B<-v> | B<--verbose>

Repeat this option to display more detailed information.

=item B<-h> | B<--help>

Display a breif help page and exit(0).

=item B<--version>

Display a short version information and exit(0).

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    &_version;
    print "\nSyntax: \n    $0 [OPTION] [--] [DEVICE [NEWMAC] ]\n", <<'EOM';

Common options:
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
    -h, --help              show this help page
        --version           print the version info

DEVICE:
        (none)      list all devices
        index:      NUMBER      1, 2, 3, ...
        combo:      :NUMBER     :1, :2, :3, ...
        ip:         1.2.3.4
        mac:        11:22:33:44:55:66
        guid:       {11111111-2222-3333-4444-555555555555}

        To reset the mac address, just omit the NEWMAC field.
EOM
}

exit (_boot or 0);

sub _main {
    my $id = $opt_device->{id};
    chmac($id, $opt_mac)
        or die "can't change the mac: $!";
}

=head1 DIAGNOSTICS

(No Information)

=cut
# (HELPER FUNCTIONS)

=head1 HACKING

(No Information)

=cut
# (MODULE FUNCTIONS)
sub macstr {
    my $bin = shift;
    my $str = unpack "H12", $bin;
    my $buf;
    while (length $str) {
        $buf .= ':' if defined $buf;
        $buf .= substr($str, 0, 2, '');
    }
    $buf
}

sub macbin {
    my $str = shift;
    $str =~ s/:-\s//g;
    pack "H12", $str;
}

sub iplist {
    my $bin = shift;
    my $next = unpack "U4", substr($bin, 0, 4);
    my $addr = substr($bin, 4, 16);     $addr =~ s/\x0+$//;
    my $mask = substr($bin, 20, 16);    $mask =~ s/\x0+$//;
    my $context = unpack "U4", substr($bin, 36, 4);
    return wantarray ? ($addr) : $addr;
}

sub build_devices {
    enum_adapters sub {
        my $adap                = shift;
        my $dev;
        $dev->{id}              = $adap->AdapterName;
        $dev->{desc}            = $adap->Description;
        $dev->{index}           = $adap->Index;

        $dev->{addr}            = macstr substr($adap->Address, 0, $adap->AddressLength);
        $dev->{iplist}          = iplist $adap->IpAddressList;
        $dev->{ip}              = $dev->{iplist};           # $adap->CurrentIpAddress;

        # Not used:
        $dev->{combo}           = $adap->ComboIndex;        # reserved
        $dev->{type}            = $adap->Type;              # ETH, TOKENRING, FDDI, PPP, SLIP, LOOPBACK, etc.
        $dev->{gwlist}          = iplist $adap->GatewayList;
        $dev->{dhcp}            = $adap->DhcpEnabled;
        $dev->{dhcpserver}      = iplist $adap->DhcpServer;
        $dev->{wins}            = $adap->HaveWins;
        $dev->{wins1}           = iplist $adap->PrimaryWinsServer;
        $dev->{wins2}           = iplist $adap->SecondaryWinsServer;
        $dev->{l_obtained}      = $adap->LeaseObtained;     # dhcp
        $dev->{l_expires}       = $adap->LeaseExpires;      # dhcp

        $idx_index{$dev->{index}}   = $dev;
        $idx_combo{':'.$dev->{combo}} = $dev;
        $idx_id   {$dev->{id}}      = $dev;
        $idx_desc {$dev->{desc}}    = $dev;
        $idx_mac  {$dev->{addr}}    = $dev;
        $idx_ip   {$dev->{ip}}      = $dev;
    }
}

sub dump_devices {
    for my $i (keys %idx_index) {
        my $dev = $idx_index{$i};
        next unless defined $dev;
        print "$i - $dev->{id} ($dev->{desc})\n";
        if ($opt_verbose > 1) {
            print "    MAC = ".$dev->{addr}."\n";
            print "     IP = ".$dev->{ip}."\n";
        }
    }
}

=head1 HISTORY

=over

=item 0.x

The initial version.

=back

=cut
sub _version {
    print "[$LOGNAME] Change MAC Address \n";
    print "Written by Lenik,  Version 0.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"Perl_simple_cli_program_template">

=head1 AUTHOR

Xima Lenik <name@mail.box>

=cut
