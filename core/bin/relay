#!/usr/bin/perl

=head1 NAME

relay - TCP Relay And Sniff

=cut
use strict;
use vars qw($LOGNAME $LOGLEVEL);
    $LOGNAME    = 'relay'; # $0 =~ /([^\/\\.]+)(?:\.\w+)*$/;
use cmt::inet;
use cmt::log(2);
    sub _text($;$) {
        local $_ = $_[0];
        s/\a/^G/gs if $_[1];  # nobeep
    }
use cmt::serv;
use cmt::stream;
use cmt::util('indent');
use cmt::vcs('parse_id');
    my %RCSID   = parse_id('$Id$');
use cmt::win32;
use Data::Dumper;
use Getopt::Long;
use Term::ReadKey;

sub _main; sub _version; sub _help;
sub f_filter;
sub b_filter;
sub f_dump;
sub b_dump;
sub puts;
sub relay_connect;

our $opt_bind_address   = 'localhost';
our $opt_bind_port;
our $opt_target_host    = 'localhost';
our $opt_target_port    = 80;
our $opt_start_recver;
our $opt_start_sender;
our $opt_start_delay    = 1000;
our $opt_hexdump        = 0;
our $opt_rawdump;
our $opt_rawmask        = qr/[\x07]/;   # no-beep
our $opt_width          = 16;

my  $mios;
my  $mctx;

sub _boot {
    GetOptions('quiet|q'        => sub { $LOGLEVEL-- },
               'verbose|v'      => sub { $LOGLEVEL++ },
               'version'        => sub { _version; exit 0 },
               'help|h'         => sub { _help; exit 0 },
               'bind-address|a=s',
               'bind-port|b=n',
               'target-host|th=s',
               'target-port|tp=n',
               'start-recver|sr=s',
               'start-sender|ss=s',
               'start-delay|sd=n',
               'hexdump|x',
               'rawdump|r:s',
               );
    $opt_target_host = shift @ARGV if @ARGV;
    $opt_target_port = shift @ARGV if @ARGV;

    unless (defined $opt_bind_port) {
        $opt_bind_port = $opt_target_port;
        $opt_bind_port += 1000
            if ($opt_target_host eq $opt_bind_address);
    }

    _log2 "bind-address:    $opt_bind_address";
    _log2 "bind-port:       $opt_bind_port";
    _log2 "target-host:     $opt_target_host";
    _log2 "target-port:     $opt_target_port";
    _log2 "start-recver:    $opt_start_recver" if defined $opt_start_recver;
    _log2 "start-sender:    $opt_start_sender" if defined $opt_start_sender;
    _log2 "start-delay:     $opt_start_delay";

    if (defined $opt_rawdump) {
        my $range   = '^' if $opt_rawdump =~ s/^!//;
        for (split(',', $opt_rawdump)) {
            my ($from, $to) = split('-', $_);
            $from   = '\x'.$from if defined $from;
            $to     = '\x'.$to   if defined $to;
            $range .= defined $to ? $from.'-'.$to : $from;
        }
        $opt_rawmask = eval "qr/[$range]/";
        _log2 "rawmask:         $opt_rawdump";
    }

    _main;
}

=head1 SYNOPSIS

B<relay>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<...the rest of arguments...> ]>

=head1 DESCRIPTION

B<relay> is a WHAT used for WHAT. It HOW-WORKS.

BACKGROUND-PROBLEM.

HOW-relay-RESOLVES.

=head1 OPTIONS

=over 8

=item B<-m> | B<--my-option>

...

=item B<-q> | B<--quiet>

Repeat this option to suppress unimportant information to display.

=item B<-v> | B<--verbose>

Repeat this option to display more detailed information.

=item B<-h> | B<--help>

Display a breif help page and exit(0).

=item B<--version>

Display a short version information and exit(0).

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    &_version;
    print "\nSyntax: \n    $0 [OPTION] [--] [TARGET-HOST [TARGET-PORT]]\n", <<'EOM';

Common options:
    -a, --bind-address=ADDR bind to the interface with specified address
    -b, --bind-port=PORT    default as --target-port (+1000 if both localhost)
    -th,--target-host=HOST  default localhost
    -tp,--target-port=PORT  default 80
    -sr,--start-recver=CMD
    -ss,--start-sender=CMD  execute after delay
    -sd,--start-delay=DELAY default 1000 (ms)
    -x, --hexdump           show hexdump column
    -r, --rawdump[=RANGE]   char code out of RANGE are shown as '.'
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
    -h, --help              show this help page
        --version           print the version info

Deployment:
            +--------+      +----------------+      +--------+
            | source |----->| relayer (serv) |----->| target |
            +--------+      +----------------+      +--------+

    1, The source connects to the relayer and the relayer accepts the incoming
       request and creates a forward-stream (F-stm).
    2, F-stm::binded is triggered, where a connection from the relayer to the
       target is made (B-conn).  a backward-stream (B-stm) is also created.
       The B-conn & B-stm are encapsulated in field {Bk} of cmt::inet type.
   3a, The source sends data to the relayer and F-stm::gotdata is triggered,
       the data may be processed by F-filter, and then forwards to the target
       thru B-stm.
   3b, The target sends data to the relayer and B-stm::gotdata is triggered,
       the data may be processed by B-filter, and then forwards to the source
       thru F-stm.
   4a, Source disconnects from the relayer and F-stm::uninit is trigger, then
       the relayer disconnects from the target.
   4b, Target disconnects from the relayer and B-stm::uninit is trigger, then
       the relayer disconnects from the source.

EOM
}

exit (_boot or 0);

sub _main {
    my $pid_recver;
    my $pid_sender;
    if (defined $opt_start_recver) {
        $pid_recver = ntspawn($opt_start_recver);
        die "Can't spawn the recver process" unless defined $pid_recver;
        at_exit { ntkill $pid_recver };
    }
    if (defined $opt_start_sender) {
        fsleep($opt_start_delay / 1000.0);
        $pid_sender = ntspawn($opt_start_sender);
        at_exit { ntkill $pid_sender };
    }

    my $serv = new cmt::serv(sub { *__ANON__ = '<sfac>';
        # Forward-Stream
        new cmt::stream(
            -binded => sub { *__ANON__ = '<binded>';
                # the source connected to the relayer (F-conn and this F-stm),
                # create a corresponding Bk object.
                my $s = shift;
                _log1 "source ".$s->hinfo." connected";
                my $b_stm = relay_connect($s);
                $s->{b_stm} = $b_stm;
            },
            -unbinded => sub { *__ANON__ = '<unbinded>';
                # the source disconnected from the relayer,
                # so let's disconnect the target.
                my ($s, $fd) = @_;
                _log2 "source ".$s->hinfo." disconnected";
                my $b_stm = $s->{b_stm};
                $b_stm->shutdown(2);
            },
            -gotdata => sub { *__ANON__ = '<gotdata>';
                # the source sent data to the relayer,
                # do f_filter and forward to the target.
                my ($s, $data) = @_;
                my $b_stm = $s->{b_stm};
                _log2 "F-gotdata $s($b_stm): "._text($data);
                $data = f_filter($data);
                f_dump $data;
                if (defined $data) {
                    # return value??
                    return $b_stm->write($data);
                }
                1
            },
            -askdata => sub { *__ANON__ = '<askdata>';
                # IGNORE
                # # Now can_write to the source
                # # let's check if any data available in the target.
                # my $s = shift;
                # my $b_stm = $s->{b_stm};
                # my $sendbuf = $b_stm->pull;
                # if ($sendbuf ne '') {
                #     $s->write($sendbuf);
                #     return 1;
                # }
                _log2 "F-askdata @_";
                undef   # no sendbuf, let's skip -askdata next time.
            },
            -goterr => sub { *__ANON__ = '<goterr>';
                # error between the source and the relayer
                # let's break both F-conn and B-conn
                my $s = shift;
                my $b_stm = $s->{b_stm};
                _log2 "F-goterr $s($b_stm)";
                $b_stm->{ctx}->exit;
                $s->{ctx}->exit;
            },
        )},
        -port => $opt_bind_port,
        -name => 'relay');
    $serv->verbose($LOGLEVEL);

    $mios = $serv->create_ios()->merge;
    _log1 "start relay-service at $opt_bind_address:$opt_bind_port";
    $mctx = $mios->create_context;
    while ($mctx->iterate) {
        my $k = ReadKey -1;
        if ($k) {
            _log2 'pressed: $k('.ord($k).')';
            last if $k eq 'q';
        }
    }
    _log2 Dumper($mctx->{STAT});
}

=head1 DIAGNOSTICS

(No Information)

=cut
# (HELPER FUNCTIONS)
sub f_filter {
    my $data = shift;
    return $data;
}

sub b_filter {
    my $data = shift;
    return $data;
}

sub f_dump  { puts 'F', shift }
sub b_dump  { puts 'B', shift }

my %FROMBUF;
sub puts {
    my $from    = shift;
    local $_    = shift;
    my $cont    = $FROMBUF{$from};
    my $indent  = length($from) + 2;

    if ($opt_hexdump) {
        my $TOHEX = 'H'.($opt_width * 2);
        my $buf;
        while (length $_) {
            $buf .= "\n" if defined $buf;
            my $part = substr($_, 0, $opt_width);
                  $_ = substr($_, $opt_width);
            (my $txt = $part) =~ s/[\x00-\x1f]/./g;
            my $code;
            $code = unpack $TOHEX, $part;
            while (length $code) {
                $buf .= substr($code, 0, 2) . ' ';
                $code = substr($code, 2);
            }
            $buf .= '   'x($opt_width - length $part);
            $buf .= "| $txt";
        }
        $_ = substr(indent($indent, $buf), $indent);
        print "$from> $_\n";
    } else {
        s/$opt_rawmask/./sg if defined $opt_rawmask;
        $_ = substr(indent($indent, $_), $indent);
        print "$from> $_\n";
    }
}

=head1 HACKING

(No Information)

=cut
# (MODULE FUNCTIONS)
sub relay_connect {
    my $f_stm = shift;
    my $b_ios;
    my $b_stm = new cmt::stream(
        -binded => sub { *__ANON__ = "<binded:$f_stm>";
            # the connection is always made from the source to the target,
            # if the target would send-on-connect, this stream would gotdata, then.
            # so the relayer has nothing do with on-connect event.
            my ($s, $fd) = @_;
            _log1 "target ".$s->hinfo." connected";
        },
        -unbinded => sub { *__ANON__ = "<unbinded:$f_stm>";
            # the target is disconnected from the relayer,
            # so let's disconnect the source.
            my ($s, $fd) = @_;
            _log2 "target ".$s->hinfo." disconnected";
            _log2 "Remove $b_ios, $fd";
            $mios->remove($b_ios);
            $mctx->remove($fd);
            $f_stm->shutdown(2);
        },
        -gotdata => sub { *__ANON__ = "<gotdata:$f_stm>";
            # the target sent data to the relayer,
            # do b_filter and forward to the source.
            my ($s, $data) = @_;
            _log2 "B-gotdata $s: "._text($data);
            $data = b_filter($data);
            b_dump $data;
            if (defined $data) {
                # The return value??
                return $f_stm->write($data);
            }
            1
        },
        -askdata => sub { *__ANON__ = "<askdata:$f_stm>";
            # now can_write to the target,
            # let's check if any data available in the source.
            my $s = shift;
            _log2 "B-askdata $s";
            my $sendbuf = $f_stm->pull;
            _log2 "B-askdata resp: "._text($sendbuf);
            if ($sendbuf ne '') {
                $s->write($sendbuf);
                return 1;
            }
            undef   # no sendbuf, let's skip -askdata next time.
        },
        -goterr => sub { *__ANON__ = "<goterr:$f_stm>";
            # error between the relayer and the target
            # let's break both B-conn and F-conn
            my $s = shift;
            _log2 "B-goterr $s";
            $s->{ctx}->exit;
            $f_stm->{ctx}->exit;
        },
    );
    $b_ios = tcp_connect($opt_target_host, $opt_target_port, $b_stm,
                            -cont => 1);
    my $b_fd = $b_ios->{HANDLE};
    _log2 "Merge  $b_ios, $b_fd";
    $mios->merge($b_ios);
    $mctx->add($b_fd);
    return $b_stm;
}

=head1 HISTORY

=over

=item 0.x

The initial version.

=back

=cut
sub _version {
    print "[$LOGNAME] TCP Relay And Sniff \n";
    print "Written by Lenik,  Version 0.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"TCP Relay And Sniff">

=head1 AUTHOR

Xima Lenik <name@mail.box>

=cut
