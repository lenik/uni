#!/usr/bin/perl

use strict;
use cmt::util;
use cmt::vcs;
use Getopt::Long;
use Tk;
use Tk::DialogBox;
use Tk::ProgressBar;

sub _boot;
sub main;
sub info;
sub info2;
sub version;
sub help;
sub runwin;

our $opt_verbtitle      = 'rundelay';
our $opt_verbtime       = 0;
our $opt_verbose        = 1;
our $opt_timeout        = 1000;     # 1 second
our $opt_message        = 'Launcher is waiting for timeout...';
our $opt_force          = 0;
our $opt_cmdline;

if (0) {
# BEGIN {
    # kill the console window
    if ($^O eq 'MSWin32') {
        use Win32::Console;
        Win32::Console::Free();
    }
}

sub _boot {
    # Process X11-specific options
    Tk::CmdLine::SetArguments();

    GetOptions('quiet|q'    => sub { $opt_verbose-- },
               'verbose|v'  => sub { $opt_verbose++ },
               'version'    => sub { version; exit },
               'help|h'     => sub { help; exit },
               'timeout=n',
               'message=s',
               'force',
               'nogui',
               );

    $opt_cmdline = join(' ', @ARGV)
        or die("No command-line specified!");

    main;
}

sub info {
    return if $opt_verbose < 1;
    my $text = shift;
    print cdatetime.' ' if $opt_verbtime;
    print "[$opt_verbtitle] $text\n";
}

sub info2 {
    return if $opt_verbose < 2;
    my $text = shift;
    print cdatetime.' ' if $opt_verbtime;
    print "[$opt_verbtitle] $text\n";
}

sub version {
    my %id = parse_id('$Id: rundelay,v 1.6 2007-11-08 10:52:38 lenik Exp $');
    print "[$opt_verbtitle] launch a command after a specified timeout time\n";
    print "Written by Lenik,  Version 0.$id{rev},  Last updated at $id{date}\n";
}

sub help {
    version;
    print <<"EOM";
syntax:
    rundelay [<options>] <command-line>
options:
EOM
    print <<"EOM";

Syntax:
        $0 [<options>] <command-line>

Options:
        --timeout=<timeout-time, in ms> (t)
        --message=<text> (m)
        --force (f)
        --quiet (q)
        --verbose (v, repeat twice give you more verbose info)
        --version
        --help (h)
EOM
}

our $signal;

boot;

sub main {
    my $starttime = 1000 * time;               # in ms

    if (my $pid = 0) {
        # parent pid
        while (1000 * time - $starttime <= $opt_timeout) {
            if ($signal eq 'exit') {
                exit;
            }
            sleep(1);                       # XXX  should be faster
        }
        # Timeout
        kill 'KILL' => $pid;                # no more wait
    } else {
        # child pid
        my $select = runwin();
        info2 "runwin selected: " . $select . "\n";
        exit if ($select ne 'run');
    }
}

our $current_timeout = 0;

sub runwin {
    my $mw = new MainWindow;

    my $fparam = $mw->Frame()->pack();
    my $msg = $fparam->Label(-justify   => 'left',
                             -text      => "$opt_message\n\nThe following command will be launched after timeout: \n\"$opt_cmdline\"",
                             # -textvariable
                             )->pack();

    my $progbar = $fparam->ProgressBar(-length      => 350,
                                        -width      => 20,
                                        -anchor     => 'w', # left->right
                                        -from       => 0,
                                        -to         => $opt_timeout,
                                        -blocks     => 20,
                                        -colors     => [ 0, 'green',
                                                         0.5 * $opt_timeout, 'yellow',
                                                         0.8 * $opt_timeout, 'red', ],
                                        -variable   => \$current_timeout,
                                        )->pack(-pady => 4);
    my $fctrl = $mw->Frame()->pack(-pady => 4);
    $fctrl->Button(-text        => 'Delay 1x',
                    -underline  => 6,
                    -padx       => 4,
                    -command    => sub { $opt_timeout *= 2;
                                         $progbar->configure(-to => $opt_timeout);
                                       })->pack(-ipadx=>4, -side=>'left', -padx=>4);
    $fctrl->Button(-text => 'Delay 2x',
                    -underline  => 6,
                    -padx       => 4,
                    -command    => sub { $opt_timeout *= 4;
                                         $progbar->configure(-to => $opt_timeout);
                                       })->pack(-ipadx=>4, -side=>'left', -padx=>4);

    my $fcmds = $mw->Frame()->pack(-pady => 4);
    my $btnRun = $fcmds->Button(-underline  => 0,
                                -overrelief => 'raised',
                                -state      => 'normal',
                                -relief     => 'raised',
                                -text       => 'Run',
                                -compound   => 'left',
                                -bitmap     => 'warning',
                                -padx       => 4)->pack(-ipadx=>4, -side=>'left', -padx=>4);

    my $btnCancel = $fcmds->Button(-underline   => 0,
                                   -overrelief  => 'raised',
                                   -state       => 'normal',
                                   -relief      => 'raised',
                                   -text        => 'Cancel',
                                   -compound    => 'left',
                                   -bitmap      => 'error',
                                   -padx        => 4)->pack(-ipadx=>4, -side=>'left', -padx=>4);
    MainLoop;
}
