#!/usr/bin/perl

=head1 NAME

sev - Self Evolution, self-editing scripts

=cut
use strict;
use vars qw($LOGNAME $LOGLEVEL);
use cmt::log(2);
    $LOGNAME    = 'sev'; # $0 =~ /([^\/\\.]+)(?:\.\w+)*$/;
use cmt::vcs('parse_id');
    my %RCSID   = parse_id('$Id$');
use Getopt::Long;

sub _main; sub _version; sub _help;
sub escape_regex;
sub add_decl;
sub add_braced_text;
sub process;

our $opt_sev_tag        = 'self-evolution';
our $opt_mark           = '*';
our $opt_decl           = '%';
our $opt_preload        = 1;    # currently, streaming isn't supported.
our $opt_save           = 1;

my %marks;                              # $name => $line_no
my %decls;                              # $name => $decl_body

sub _boot {
    GetOptions('quiet|q'        => sub { $LOGLEVEL-- },
               'verbose|v'      => sub { $LOGLEVEL++ },
               'version'        => sub { _version; exit 0 },
               'help|h'         => sub { _help; exit 0 },
               'mark=s',
               'decl=s',
               'preload'        => sub { $opt_preload++ },
               'save!',
               );
    $opt_mark = escape_regex $opt_mark;
    $opt_decl = escape_regex $opt_decl;
    _log2 "mark symbol in regex: $opt_mark";
    _log2 "decl symbol in regex: $opt_decl";
    _main;
}

=head1 SYNOPSIS

B<sev>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<...the rest of arguments...> ]>

=head1 DESCRIPTION

B<sev> is a WHAT used for WHAT. It HOW-WORKS.

BACKGROUND-PROBLEM.

HOW-sev-RESOLVES.

=head1 OPTIONS

=over 8

=item B<-m> | B<--my-option>

...

=item B<-q> | B<--quiet>

Repeat this option to suppress unimportant information to display.

=item B<-v> | B<--verbose>

Repeat this option to display more detailed information.

=item B<-h> | B<--help>

Display a breif help page and exit(0).

=item B<--version>

Display a short version information and exit(0).

=back

=head1 EXAMPLES

=over 4

=item Show help

    sev --help

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    &_version;
    print "\nSyntax: \n    $0 [OPTION] [--] ...\n", <<'EOM';

Common options:
        --mark=MARK_SYM     the symbol used to mark line of name
        --decl=DECL_SYM     the symbol used to declare function of name
        --preload           load all content before process (2 steps)
        --save, --no-save   save itself or just print out
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
    -h, --help              show this help page
        --version           print the version info
EOM
}

exit (_boot or 0);

sub _main {
    if (@ARGV) {
        for my $file (@ARGV) {
            _log1 "load file $file";
            open(FH, "<$file")
                or die "Cannot open file $file to read";
            my @lines = <FH>;
            my $ok = process \@lines;
            close FH;

            if ($ok ne 'ok') {
                _log1 "load fails: $ok";
                next;
            }

            if ($opt_save == 1) {
                _log1 "save file $file";
                open(FH, ">$file")
                    or die "Cannot open file $file to write";
                print FH for @lines;
                close FH;
            } else {
                print for @lines;
            }
        }
    } else {
        my @lines = <>;
        print @lines;
        my $ok = process \@lines;
        if ($ok ne 'ok') {
            _log1 "load fails: $ok";
            return;
        }
        print for @lines;
    }
}

=head1 DIAGNOSTICS

(No Information)

=cut
# (HELPER FUNCTIONS)

=head1 HACKING

(No Information)

=cut
# (MODULE FUNCTIONS)

sub escape_regex {
    my $t = shift;
    $t =~ s/([?*+{}()\[\]\\])/\\$1/g;
    return $t;
}

sub add_decl {
    my ($name, $body) = @_;
    if ($name eq 'EVAL') {
        eval($body);
    }
    $decls{$name} = $body;
}

sub add_braced_text {
    my ($line, $br) = @_;
    my $text = $line;
    while ($line =~ m/[\{\}]/g) {
        my $inc = $& eq '{' ? 1 : -1;
        last if ($br == 0 && $inc == -1);
        $br += $inc;
        if ($br == 0) {
            # assert $& eq '}'
            $text = substr($line, 0, $+[0]);
        }
    }
    # $line_rest = substr($line, length($text))
    return ($text, $br);
}

sub process {
    my $src = shift;                    # \@srclines
    %marks = ();                        # mark_name => [ positions ]
    %decls = ();

    my $name;
    my $body;                           # $decl_body
    my $brace = 0;                      # level of open-brace '{'

    # preloading
    _log2 'preloading...';
    my $srclines = scalar(@$src);
    for (my $i = 0; $i < $srclines; $i++) {
        $_ = $src->[$i];
        if (m/${opt_mark}(\w+)/) {      # *mark_name
            my $name = $1;
            push @{$marks{$name}}, $i;
        }
        if ($brace == 0) {
            if (m/${opt_decl}(\w+)/) {
                $name = $1;
                my $init = substr($_, $+[0]);
                my $text;
                # 1, %name <text-only>
                # 2, %name <mixed-text { .{}.. }> ...
                # 3, %name <mixed-text { ...>
                ($text, $brace) = add_braced_text($init, $brace);
                $body = $text;
                if ($brace == 0) {
                    # $_ = substr($_, length($text));
                    add_decl $name, $body;
                }
            }
        } else {
            my $text;
            # 1, <text-only>
            # 2, <... }> ...
            # 3, < .{}...>
            # 4, <... { ..>
            ($text, $brace) = add_braced_text($_, $brace);
            $body .= $text;
            if ($brace == 0) {
                # $_ = substr($_, length($text));
                add_decl $name, $body;
            }
        }
    }

    _log2 "mark $_: line " . join(', ', @{$marks{$_}}) for (keys %marks);
    _log2 "decl $_ = " . $decls{$_} for (keys %decls);

    for (keys %marks) {
        my $linenums = $marks{$_};
        my $decl = $decls{$_};
        next if not defined $decl;

        for my $line_no (@$linenums) {
            my $line = $src->[$line_no];
            $_ = $line;
            eval($decl);
            $src->[$line_no] = $_;
        }
    }

    return 'ok';
}

=head1 HISTORY

=over

=item 0.x

The initial version.

=back

=cut
sub _version {
    print "[$LOGNAME] Self Evolution, self-editing scripts \n";
    print "Written by Lenik,  Version 0.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"Perl_simple_cli_program_template">

=head1 AUTHOR

Xima Lenik <name@mail.box>

=cut
