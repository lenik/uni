#!/usr/bin/perl

=head1 NAME

close - Close Handles [for Windows]

=cut
use strict;
use vars qw($LOGNAME $LOGLEVEL);
    $LOGNAME    = 'close'; # $0 =~ /([^\/\\.]+)(?:\.\w+)*$/;
use cmt::log(2);
use cmt::vcs('parse_id');
    my %RCSID   = parse_id('$Id: .pl 756 2007-11-27 12:51:15Z Lenik $');
use Data::Dumper;
use Getopt::Long;

sub _main; sub _version; sub _help;
sub parse_handles;
sub add_process;
sub add_file;
sub cmp_i;
sub eq_i;
sub ne_i;

our $opt_ignore_case;
our @opt_process_id;            # id | name
our @opt_process_name;          #   or all processes if both undef
our @opt_file_name;             # name + pattern,
our @opt_file_pattern;          #   or all files if both undef
our $opt_test_mode;

sub defcount {
    my $c = 0; for (@_) { $c++ if defined $_ } $c;
}

sub _boot {
    GetOptions('quiet|q'        => sub { $LOGLEVEL-- },
               'verbose|v'      => sub { $LOGLEVEL++ },
               'version'        => sub { _version; exit 0 },
               'help|h'         => sub { _help; exit 0 },
               'ignore-case|i',
               'process|p=s'    => sub { add_process $_[1] },
               'process-id=s'   => \@opt_process_id,
               'process-name=s' => \@opt_process_name,
               'file|f=s'       => sub { add_file $_[1] },
               'file-name=s'    => \@opt_file_name,
               'file-pattern=s' => \@opt_file_pattern,
               'test-mode|t',
               );
    add_file $_ for @ARGV;
    if ($opt_ignore_case) {
        $_ = qr/$_/i for @opt_file_pattern;
    }
    die "at least one of process or file is required to be limited"
        unless @opt_process_id
            or @opt_process_name
            or @opt_file_name
            or @opt_file_pattern;

    _log2 " ignore-case" if defined $opt_ignore_case;
    _log2 "  process-id: $_" for @opt_process_id;
    _log2 "process-name: $_" for @opt_process_name;
    _log2 "   file-name: $_" for @opt_file_name;
    _log2 "file-pattern: $_" for @opt_file_pattern;

    _main;
}

=head1 SYNOPSIS

B<close>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<...the rest of arguments...> ]>

=head1 Close Handles [for Windows]

B<close> is a WHAT used for WHAT. It HOW-WORKS.

BACKGROUND-PROBLEM.

HOW-close-RESOLVES.

=head1 OPTIONS

=over 8

=item B<-m> | B<--my-option>

...

=item B<-q> | B<--quiet>

Repeat this option to suppress unimportant information to display.

=item B<-v> | B<--verbose>

Repeat this option to display more detailed information.

=item B<-h> | B<--help>

Display a breif help page and exit(0).

=item B<--version>

Display a short version information and exit(0).

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    &_version;
    print "\nSyntax: \n    $0 [OPTION] [--] (FILE...)\n", <<'EOM';

Common options:
    -i, --ignore-case       case-insensitive in file name/pattern match
    -p, --process=ID|NAME
        --process-id=ID     limit to process of ID
        --process-name=NAME limit to process of NAME
    -f, --file=NAME|*REGEXP
        --file-name=NAME    include filenames exactly as NAME
        --file-pattern=REGEXP include filenames match to REGEXP
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
    -h, --help              show this help page
        --version           print the version info
EOM
}

exit (_boot or 0);

sub _main {
    if (@opt_process_id or @opt_process_name) {
        for (@opt_process_id) {
            _log2 "scanning process (id: $_)";
            parse_handles `handle -p $_`;
        }
        for (@opt_process_name) {
            _log2 "scanning process (name: $_)";
            parse_handles `handle -p "$_"`;
        }
    } else {
        _log2 "scanning all processes";
        parse_handles `handle`;
    }
}

sub parse_handles {
    my ($pname, $pid, $loc, $user);
    my $curp;
 L: for (@_) {
        s/\r?\n$//; # chop;
        next if /^-+$/;
        if (/^(.+) \s+ pid: \s+ (\d+) \s+ (?:(.+\\)?(\w+))$/x) {
            ( $pname,           $pid,        $loc,  $user) = ($1, $2, $3, $4);
        } elsif (/^\s*([0-9A-F]+): \s+ (\w+) (?:\s+\(([^\(\)]*)\))? \s+ (.*)$/ix) {
            my (      $h,              $type,        $flags,            $path)
                = ($1, $2, $3, $4);
            # $h = eval '0x'.$h;
         F: while (@opt_file_name or @opt_file_pattern) {
                do { last F if eq_i $path, $_, $opt_ignore_case }
                    for @opt_file_name;
                do { last F if $path =~ $_ }
                    for @opt_file_pattern;
                next L
            }
            _log1 $path;
            `handle -p $pid -c $h -y` unless $opt_test_mode;
        }
    }
}

=head1 DIAGNOSTICS

(No Information)

=cut
# (HELPER FUNCTIONS)
sub add_process {
    my $key = shift;
    if ($key =~ /^\d+|0x[0-9a-f]+$/i) {
        push @opt_process_id, eval $key;
    } else {
        push @opt_process_name, $key;
    }
}

sub add_file {
    my $key = shift;
    if ($key =~ s/^\*//) {
        push @opt_file_pattern, qr/$key/;
    } else {
        push @opt_file_name, $key;
    }
}

sub cmp_i {
    $_[2] ? (lc($_[0]) cmp lc($_[1])) : ($_[0] cmp $_[1]);
}

sub eq_i {
    $_[2] ? (lc($_[0]) eq lc($_[1])) : ($_[0] eq $_[1]);
}

sub ne_i {
    $_[2] ? (lc($_[0]) ne lc($_[1])) : ($_[0] ne $_[1]);
}

=head1 HACKING

(No Information)

=cut
# (MODULE FUNCTIONS)

=head1 HISTORY

=over

=item 0.x

The initial version.

=back

=cut
sub _version {
    print "[$LOGNAME] Close Handles [for Windows] \n";
    print "Written by Lenik,  Version 0.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"Perl_simple_cli_program_template">

=head1 AUTHOR

Xima Lenik <lenik@bodz.net>

=cut
