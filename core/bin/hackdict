#!/usr/bin/perl

use strict;
use cmt::util;
use cmt::vcs;
use cmt::codec;
use Crypt::DES;
use Crypt::CBC;
use Data::Dumper;
use Digest::MD5 qw/md5 md5_hex md5_base64/;
use Digest::SHA1 qw/sha1 sha1_hex sha1_base64/;
use Encode;
use Encode::Alias;
use FileHandle;
use Getopt::Long;
use MIME::Base64;

sub _boot;
sub main;
sub call;
sub info;
sub info2;
sub version;
sub help;
sub list_functions;
sub output_result;
sub get_func;
sub get_src;
sub get_stdin_src;
sub true;
sub pass;
sub equal;
sub equal_base64;
sub concat;
sub echo;

our $opt_verbtitle      = 'hackdict';
our $opt_verbtime       = 0;
our $opt_verbose        = 1;
our $opt_passwd_file;
our $opt_encoding       = 'utf-8';      # passwd-file
our $opt_combine_func   = 'concat';
our $opt_crypt_func     = undef;        # md5_base64
our $opt_test_func      = 'equal';
our @opt_dicts;
our @opt_filters;
our $opt_got_file;
our $opt_rest_file;

our @DICT;
our @FILTER;
our $PASSWD;                            # passwd src
our @PASSWD;                            # cached passwd list
our $combinef;                          # (part1, part2): combined
our $cryptf;                            # (data): crypted-data
our $testf;                             # (cat', pwd, cat, %pwd): bool
our $got_file;
our $rest_file;

# our (@D, @E, @F, @G, @H, @I, @J, @K, @L, @M, @N, @O, @P, @Q, @R);
our ($D, $E, $F, $G, $H, $I, $J, $K, $L, $M, $N, $O, $P, $Q, $R); # %$ref
our ($d, $e, $f, $g, $h, $i, $j, $k, $l, $m, $n, $o, $p, $q, $r);
our ($tt, $x, $y);

sub _boot {
    GetOptions('quiet|q'    => sub { $opt_verbose-- },
               'verbose|v'  => sub { $opt_verbose++ },
               'version'    => sub { version; exit },
               'help|h'     => sub { help; exit },
               'list-functions|l' => sub { list_functions; exit },
               'passwd-file|f=s',
               'combine-func|c=s',
               'crypt-func|k=s',
               'test-func|t=s',
               );
    if ($opt_passwd_file) {
        $PASSWD = get_src('passwd', $opt_passwd_file);
        $opt_got_file = "$opt_passwd_file.got";
        $opt_rest_file = "$opt_passwd_file.rest";
    } else {
        $PASSWD = get_stdin_src;
        $opt_got_file = "passwd.got";
        $opt_rest_file = "passwd.rest";
    }

    my $Dref = ord('D');
    for (@ARGV) {
        my ($path, $func) = split('%%', $_);
        my $src = get_src("dict $_", $path);
        push @opt_dicts, $path;
        push @opt_filters, $func;
        push @DICT, $src;
        my $Drefv = eval('\\$'.chr($Dref++));
        $$Drefv = $src;
        my $filter = undef; # \&true;
        $filter = get_func("filter $_", $func) if $func;
        push @FILTER, $filter;
    }
    $combinef = get_func('combinef', $opt_combine_func) if $opt_combine_func;
    $cryptf = get_func('cryptf', $opt_crypt_func) if $opt_crypt_func;
    $testf = get_func('testf', $opt_test_func) if $opt_test_func;

    $| = 1;
    main;
}

sub call {
    my $obj = shift;
    my $mtd = shift;
    die "Invalid call: $obj->$mtd" unless ref($obj) eq 'HASH';
    my $f = $obj->{$mtd};
    &$f($obj, @_);
}

sub info {
    return if $opt_verbose < 1;
    my $text = shift;
    print cdatetime.' ' if $opt_verbtime;
    print "[$opt_verbtitle] $text\n";
}

sub info2 {
    return if $opt_verbose < 2;
    my $text = shift;
    print cdatetime.' ' if $opt_verbtime;
    print "[$opt_verbtitle] $text\n";
}

sub version {
    my %id = parse_id('$Id$');
    print "[$opt_verbtitle] Hack dict decrypt(brute-force) utility\n";
    print "Written by Lenik,  Version 0.$id{rev},  Last updated at $id{date}\n";
}

sub help {
    version;
    print <<'EOM';
Syntax:
        hackdict <options> [dict1 [dict2 ...]] < passwd_file

Options:
        --quiet (q)
        --verbose (v, repeat twice give you more verbose info)
        --version
        --help (h)
        --passwd-file=<path> (f, default STDIN)
        --got-file=<path> (default passwd.got)
        --rest-file=<path> (default passwd.rest)
        --combine-func=<func> (c(bin,bin):bin, default strcat)
        --crypt-func=<func> (k=(bin):bin, default pass)
        --test-func=<func> (t=(cat\',pwd,cat,%pwd):bool, default equal)
        --list-functions (l)

Grammer:
        dict ::= path [ '%%' filter-func ]
        passwd_file ::= { passwd_line '\n' }
        passwd_line ::= id ':' passwd [ ':' .* $ ]
            (The field delimiter is set by regex ^\w+(.), for each line)
        func ::= file_func | sub_func | ref_func
        file_func ::= '@' path
        sub_func ::= '{' func_body '}'
        ref_func ::= \w+ { ',' \w+ }

Variables:
        @D($d) = dict1 (current-entry of dict1)
        @E($e) = dict2 (current-entry of dict2)
        ... (@D, @E, @F, ... isn\'ot supported in current version)

        @FILTER = filter of each dict
        @PASSWD ($passwd) = passwd (current-entry of passwd)
        $passwd = [ id, pwd(y), user1, user2, ... ]

Examples:
        hackdict -v -k=md5,encode_base64 -t=equal_base64 -f=passwd dicts...
        hackdict -v -t=@testf -f=passwd dicts...
EOM
}

sub list_functions {
    print <<"EOM";
        encode_base64 decode_base64
        md5 md5_hex md5_base64
        sha1 sha1_hex sha1_base64
EOM
}

boot;

sub iterate {
    my $depth = shift;
    my $prefix = shift;
    my $top = shift;
    my $filter = $FILTER[$depth];
    my $npasswd = scalar(@PASSWD);
    my $I = 0;
    # @_ == the rest list
    local $_;
    call($top, 'reset');
    while (defined ($_ = call($top, 'read'))) {
        next if $filter and !&$filter($_);
        my $cat = &$combinef($prefix, $_);
        if (@_) {
            iterate($depth + 1, $cat, @_);
        } else {
            print "Testing $I: $cat ($npasswd)             \r";
            $I++;
            if (@PASSWD) {
                for (my $i = 0; $i < $npasswd; $i++) {
                    my $passwd = $PASSWD[$i];
                    my ($id, $y) = @$passwd;
                    $x = $cryptf ? &$cryptf($cat) : $cat;
                    if (&$testf($x, $y, $cat, $passwd)) {
                        output_result($passwd, $cat);
                        splice @PASSWD, $i, 1;
                        $i--;
                        $npasswd--;
                    }
                }
            } else {
                call $PASSWD, 'reset';
                while (defined ($_ = call($PASSWD, 'read'))) {
                    # info2 "PASSWD Line: $_";
                    next if m/^\#/ or m/^\s*$/;
                    $_ = decode($opt_encoding, $_);
                    die "Invalid passwd line: $_"
                        unless m/^\w+(.)/;
                    my $delim = $1;
                    my @segs;
                    my $passwd = \@segs;
                    my $i = 0;
                    while (m/(\\.|[^$delim])*/g) {
                        next if $i++ % 2; # ignore evens
                        push @segs, $&;
                    }
                    my ($id, $y) = @$passwd;
                    $x = $cryptf ? &$cryptf($cat) : $cat;
                    if (&$testf($x, $y, $cat, $passwd)) {
                        output_result($passwd, $cat);
                    } else {
                        push @PASSWD, $passwd;
                        $npasswd++;
                    }
                } # while $PASSWD->read
            } # @PASSWD cached?
        }
    }
    call($top, 'close');
}

sub main {
    die "No dict specified" unless @DICT;

    $got_file = new FileHandle(">$opt_got_file")
        or die("Can't write to got-file $opt_got_file");

    $rest_file = new FileHandle(">$opt_rest_file")
        or die("Can't write to rest-file $opt_rest_file");

    iterate(0, '', @DICT);

    close $got_file;
    close $rest_file;
}

sub output_result {
    my ($passwd, $ls) = @_;
    my ($id, $pwd, @other) = @$passwd;
    info "FoundPassword:$id:$ls";
    print $got_file "$id:$ls\n";
}

sub get_func {
    my ($name, $text) = @_;
    my $func;
    if ($text =~ m/^\w+$/) {
        # func-ref
        $func = eval("\\&$text") or
            die("$name: Bad func-ref: $text");
    } elsif ($text =~ m/^\w+(,\w+)+$/) {
        # func-ref chained
        my @ts = split(',', $text);
        my @fs;
        push @fs, get_func($name."/$_", $_) for @ts;
        $func = sub { *__ANON__ = '<filter-by-chain>';
            my $in = shift;
            $in = $_->($in) for @fs;
            return $in;
        };
    } elsif ($text =~ m/^\@/) {
        my $path = substr($text, 1);
        open(FH, $path)
            or die("$name: Can't open script $path for read");
        my @lines = <FH>;
        close FH;
        my $script = join('', @lines);
        # info2 "script $path: $script";
        $func = eval('sub {*__ANON__ = \'<gen1>\'; '.$script.'}');
    } elsif ($text =~ m/^\{.*\}$/) {
        # func-def
        $func = eval('sub '.$text) or
            die("$name: Invalid func-def: $text");
    }
    info2 "get_func($name) = $func";
    return $func;
}

sub get_src {
    my ($name, $path) = @_;
    my $src;
    if ($path =~ /^(\d+):/) {
        # generated dict
        die("$name: Unsupported now");
    } else {
        die("$name: File not existed: $path") unless -e $path;
        $src = {
            'path' => $path,
            'reset' => sub { *__ANON__ = '<reset>';
                my $self = shift;
                my $path2 = $self->{path};
                close $self->{h} if defined $self->{h};
                $self->{h} = new FileHandle($path2)
                    or die("$name: Can't open file $path2");
            },
            'read' => sub { *__ANON__ = '<read>';
                my $self = shift;
                my $h = $self->{h};
                local $_;
                $_ = <$h>;
                chomp;
                return $_;
            },
            'close' => sub { *__ANON__ = '<close>';
                my $self = shift;
                close $self->{h} if $self->{h};
                delete $self->{h};
            },
        };
        # print Dumper($src);
    }
    return $src;
}

sub get_stdin_src {
    my $src = {
        'reset' => sub {},
        'read'  => sub { local $_; $_ = <STDIN>; chomp; $_ },
        'close' => sub {},
    };
    return $src;
}

sub true {
    1;
}

sub pass {
    $_[0];
}

sub equal {
    my ($x, $y, $cat, $passwd) = @_;
    my $r = $x eq $y;
    # info2 "equal: $cat=>$x eq $y => $r";
    return $r;
}

sub equal_base64 {
    my ($x, $y, $cat, $passwd) = @_;
    $x =~ s/=|\s//g;
    $y =~ s/=|\s//g;
    my $r = $x eq $y;
    # info2 "equal: $cat=>$x eq $y => $r";
    return $r;
}

sub concat {
    my ($a, $b) = @_;
    $a.$b;
}

sub echo {
    my $x = shift;
    info "echo: $x";
    $x;
}
