#!/usr/bin/perl

use strict;
use cmt::util;
use cmt::vcs;
use Data::Dumper;
use DirHandle;
use Getopt::Long;

sub _boot;
sub main;
sub info;
sub info2;
sub lpad;
sub version;
sub help;

our $opt_verbtitle      = 'mp3ltrim';
our $opt_verbtime       = 0;
our $opt_verbose        = 1;
our $opt_delimiter      = '[[:punct:]]';
our $opt_test;
our $opt_rem;
our $opt_at;
our $opt_max            = 1;

sub _boot {
    GetOptions('quiet|q'    => sub { $opt_verbose-- },
               'verbose|v'  => sub { $opt_verbose++ },
               'version'    => sub { version; exit },
               'help|h'     => sub { help; exit },
               'delimiter|d=s',
               'rem|r',
               'test|t',
               'at|a=n',
               'max=n',
               '0'          => sub { $opt_at = 0 },
               '1'          => sub { $opt_at = 1 },
               '2'          => sub { $opt_at = 2 },
               '3'          => sub { $opt_at = 3 },
               '4'          => sub { $opt_at = 4 },
               '5'          => sub { $opt_at = 5 },
               '6'          => sub { $opt_at = 6 },
               '7'          => sub { $opt_at = 7 },
               '8'          => sub { $opt_at = 8 },
               '9'          => sub { $opt_at = 9 },
               );
    #$opt_verbose++ if $opt_test;

    main;
}

sub info {
    return if $opt_verbose < 1;
    my $text = shift;
    print cdatetime.' ' if $opt_verbtime;
    print "[$opt_verbtitle] $text\n";
}

sub info2 {
    return if $opt_verbose < 2;
    my $text = shift;
    print cdatetime.' ' if $opt_verbtime;
    print "[$opt_verbtitle] $text\n";
}

sub lpad {
    my ($str, $len) = @_;
    if (length($str) < $len) {
        $str = '0' x ($len - length($str)) . $str;
    }
    return $str;
}

sub version {
    my %id = parse_id('$Id$');
    print "[$opt_verbtitle] MP3 Utilities - LTrim\n";
    print "Written by Lenik,  Version 0.$id{rev},  Last updated at $id{date}\n";
}

sub help {
    version;
    print <<"EOM";

Syntax:
    $0 [OPTION] ...

Common options:
    -t, --test              test only
    -r, --rem               remove (...), [...] marks
    -N, --at=N              replace title with Nth's part
        --max=N             max number of parts, default 2
    -d, --delimiter=CHAR    default [[:punct:]], a long-space is always be.
    -h, --help              show this help page
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
        --version           print the version info

Part split rule (after --rem removals) (--max=3):
    123 * [part0] * [part1] * [part2 * part2..].mp3
EOM
}

boot;

sub main {
    my $dh = new DirHandle('.');
    my @files = $dh->read();
    foreach (@files) {
        next if -d;
        next if m/^\.+$/;

        my $new = $_;

        # (prefix *)? track * title .extname
        # track:  '(' 000 ')' '.'
        # title: (at) artist *|__ title
        #        (ta) title *|__ artist
        if (my ($prefix, $track, $title, $extname) =
                m/^ (?: (.*) \s* (?:[[:punct:]]|$opt_delimiter) )?   \s*
                    \(? (\d+) \)? \s* (?:[[:punct:]]|$opt_delimiter)? \s*
                    (.*) \s*
                    \. ([^\.]+) $/x
            ) {
            # my $preparts = split('-', $prefix);

            $track = lpad($track, 2);

            my @rem;
            if ($opt_rem) {
                while ($title =~ /\([^\)]*\)|\[[^\]]*\]/g) {
                    push @rem, substr($&, 1, -1);
                }
                $title =~ s/\s*\([^\)]+\)//g;
                $title =~ s/\s*\[[^\]]+\]//g;
            }

            if (defined $opt_at) {
                my $max = $opt_at > $opt_max ? $opt_at : $opt_max;
                my @parts = split(/ (?: \s* $opt_delimiter \s*)
                                   |(?: \s \s+)/x, $title, $max);
                # info "Parts $title: ".join(',',@parts)."\n";
                my $part;
                if ($opt_at <= $#parts) {
                    $part = $parts[$opt_at];
                } elsif ($opt_at - scalar(@parts) <= $#rem) {
                    $part = $rem[$opt_at - scalar(@parts)];
                } else {
                    info "Part-index overflow: $opt_at";
                }
                $title = $part if length $part;
            }

            $new = "$track - $title.$extname";
        }

        if ($_ ne $new) {
            info "rename $_ -> $new";
            rename($_, $new) unless $opt_test;
        }
    }
}
