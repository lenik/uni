#!/usr/bin/perl

=head1 NAME

mp3ltrim - Format file names for media files (mp3, etc.)

=cut
use strict;
use vars qw($LOGNAME $LOGLEVEL);
use cmt::log(2);
    $LOGNAME    = 'mp3ltrim'; # $0 =~ /([^\/\\.]+)(?:\.\w+)*$/;
use cmt::vcs('parse_id');
    my %RCSID   = parse_id('$Id$');
use DirHandle;
use Getopt::Long;

sub _main; sub _version; sub _help;
sub lpad;

our $opt_delimiter      = '[[:punct:]]';
our $opt_test;
our $opt_rem;
our $opt_at;
our $opt_max            = 1;

sub _boot {
    GetOptions('quiet|q'        => sub { $LOGLEVEL-- },
               'verbose|v'      => sub { $LOGLEVEL++ },
               'version'        => sub { _version; exit 0 },
               'help|h'         => sub { _help; exit 0 },
               'delimiter|d=s',
               'rem|r',
               'test|t',
               'at|a=n',
               'max=n',
               '0'          => sub { $opt_at = 0 },
               '1'          => sub { $opt_at = 1 },
               '2'          => sub { $opt_at = 2 },
               '3'          => sub { $opt_at = 3 },
               '4'          => sub { $opt_at = 4 },
               '5'          => sub { $opt_at = 5 },
               '6'          => sub { $opt_at = 6 },
               '7'          => sub { $opt_at = 7 },
               '8'          => sub { $opt_at = 8 },
               '9'          => sub { $opt_at = 9 },
               );
    #$opt_verbose++ if $opt_test;
    _main;
}

=head1 SYNOPSIS

B<mp3ltrim>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<...the rest of arguments...> ]>

=head1 Format file names for media files (mp3, etc.)

B<mp3ltrim> is a WHAT used for WHAT. It HOW-WORKS.

BACKGROUND-PROBLEM.

HOW-mp3ltrim-RESOLVES.

=head1 OPTIONS

=over 8

=item B<-m> | B<--my-option>

...

=item B<-q> | B<--quiet>

Repeat this option to suppress unimportant information to display.

=item B<-v> | B<--verbose>

Repeat this option to display more detailed information.

=item B<-h> | B<--help>

Display a breif help page and exit(0).

=item B<--version>

Display a short version information and exit(0).

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    &_version;
    print "\nSyntax: \n    $0 [OPTION] [--] ...\n", <<'EOM';

Common options:
    -t, --test              test only
    -r, --rem               remove (...), [...] marks
    -N, --at=N              replace title with Nth's part
        --max=N             max number of parts, default 2
    -d, --delimiter=CHAR    default [[:punct:]], a long-space is always be.
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
    -h, --help              show this help page
        --version           print the version info

Part split rule (after --rem removals) (--max=3):
    123 * [part0] * [part1] * [part2 * part2..].mp3
EOM
}

exit (_boot or 0);

sub _main {
    my $dh = new DirHandle('.');
    my @files = $dh->read();
    foreach (@files) {
        next if -d;
        next if m/^\.+$/;

        my $new = $_;

        # (prefix *)? track * title .extname
        # track:  '(' 000 ')' '.'
        # title: (at) artist *|__ title
        #        (ta) title *|__ artist
        if (my ($prefix, $track, $title, $extname) =
                m/^ (?: (.*) \s* (?:[[:punct:]]|$opt_delimiter) )?   \s*
                    \(? (\d+) \)? \s* (?:[[:punct:]]|$opt_delimiter)? \s*
                    (.*) \s*
                    \. ([^\.]+) $/x
            ) {
            # my $preparts = split('-', $prefix);

            $track = lpad($track, 2);

            my @rem;
            if ($opt_rem) {
                while ($title =~ /\([^\)]*\)|\[[^\]]*\]/g) {
                    push @rem, substr($&, 1, -1);
                }
                $title =~ s/\s*\([^\)]+\)//g;
                $title =~ s/\s*\[[^\]]+\]//g;
            }

            if (defined $opt_at) {
                my $max = $opt_at > $opt_max ? $opt_at : $opt_max;
                my @parts = split(/ (?: \s* $opt_delimiter \s*)
                                   |(?: \s \s+)/x, $title, $max);
                # _log1 "Parts $title: ".join(',',@parts)."\n";
                my $part;
                if ($opt_at <= $#parts) {
                    $part = $parts[$opt_at];
                } elsif ($opt_at - scalar(@parts) <= $#rem) {
                    $part = $rem[$opt_at - scalar(@parts)];
                } else {
                    _log1 "Part-index overflow: $opt_at";
                }
                $title = $part if length $part;
            }

            $new = "$track - $title.$extname";
        }

        if ($_ ne $new) {
            _log1 "rename $_ -> $new";
            rename($_, $new) unless $opt_test;
        }
    }
}

=head1 DIAGNOSTICS

(No Information)

=cut
# (HELPER FUNCTIONS)
sub lpad {
    my ($str, $len) = @_;
    if (length($str) < $len) {
        $str = '0' x ($len - length($str)) . $str;
    }
    return $str;
}

=head1 HACKING

(No Information)

=cut
# (MODULE FUNCTIONS)

=head1 HISTORY

=over

=item 0.x

The initial version.

=back

=cut
sub _version {
    print "[$LOGNAME] Format file names for media files (mp3, etc.) \n";
    print "Written by Lenik,  Version 0.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"Perl_simple_cli_program_template">

=head1 AUTHOR

Xima Lenik <name@mail.box>

=cut
