#!/usr/bin/perl

=head1 NAME

catvia - `cat' program with PerlIO::via layers inserted

=cut
use strict;
use vars qw($LOGNAME $LOGLEVEL);
use cmt::log(2);
    $LOGNAME    = 'catvia'; # $0 =~ /([^\/\\.]+)(?:\.\w+)*$/;
use cmt::vcs('parse_id');
    my %RCSID   = parse_id('$Id$');
use Getopt::Long;

sub _main; sub _version; sub _help;

our $opt_rewrite        = 0;
our @opt_via;

sub _boot {
    GetOptions('quiet|q'        => sub { $LOGLEVEL-- },
               'verbose|v'      => sub { $LOGLEVEL++ },
               'version'        => sub { _version; exit 0 },
               'help|h'         => sub { _help; exit 0 },
               'write|r',
               'via-module|m=s' => \@opt_via,
               );

    # check via-modules
    for (@opt_via) {
        my $mod = 'PerlIO::via::'.$_;
        eval "use $mod; 1" or die "Can't load module $mod: $!";
    }

    _main;
}

=head1 SYNOPSIS

B<catvia>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<...the rest of arguments...> ]>

=head1 `cat' program with PerlIO::via layers inserted

B<catvia> is a WHAT used for WHAT. It HOW-WORKS.

BACKGROUND-PROBLEM.

HOW-catvia-RESOLVES.

=head1 OPTIONS

=over 8

=item B<-m> | B<--my-option>

...

=item B<-q> | B<--quiet>

Repeat this option to suppress unimportant information to display.

=item B<-v> | B<--verbose>

Repeat this option to display more detailed information.

=item B<-h> | B<--help>

Display a breif help page and exit(0).

=item B<--version>

Display a short version information and exit(0).

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    &_version;
    print "\nSyntax: \n    $0 [OPTION] [--] ...\n", <<'EOM';

Common options:
    -w, --write             write back
    -m, --via=MODULE        add PerlIO::via::MODULE
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
    -h, --help              show this help page
        --version           print the version info
EOM
}

exit (_boot or 0);

sub _main {
    my $mode;
    $mode .= ':via('.$_.')' for @opt_via;

    my $usetmp = 0;
    my $tmpout;
    my $tmp = '';

    if ($opt_dump or $opt_rewrite) {
        # redirect STDOUT
        my $ok = open(my $oldout, '>&STDOUT');
        if ($ok) {
            open STDOUT, '>&'.$mode, $oldout
                or die "Can't re-open STDOUT: $!";
        } else {
            open($tmpout, '>'.$mode, \$tmp)
                or die "Can't in-memory file: $!";
            select $tmpout;
            $usetmp = 1;
        }
    }

    for (@ARGV) {
        open(my $fh, $opt_dump ? '<' : '<'.$mode, $_)
            or die("error open file $_: $!");
        print while <$fh>;
        close $fh;
    }

    if ($usetmp) {
        select STDOUT;
        close $tmpout;
        print $tmp;
        undef $tmp;
    }
}

=head1 DIAGNOSTICS

(No Information)

=cut
# (HELPER FUNCTIONS)

=head1 HACKING

(No Information)

=cut
# (MODULE FUNCTIONS)

=head1 HISTORY

=over

=item 0.x

The initial version.

=back

=cut
sub _version {
    print "[$LOGNAME] `cat' program with PerlIO::via layers inserted \n";
    print "Written by Lenik,  Version 0.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"Perl_simple_cli_program_template">

=head1 AUTHOR

Xima Lenik <name@mail.box>

=cut
