#!/usr/bin/perl

=head1 NAME

repl - Batch file replacer

=cut
use strict;
use vars qw($LOGNAME $LOGLEVEL);
use cmt::fileproc('/[$%]/', 'batch_main');
use cmt::lang();
use cmt::log(3, '_sigx');
    $LOGNAME    = 'repl';
    $LOGLEVEL   = 2;
use cmt::util('safeslash', 'ssub');
use cmt::vcs('parse_id');
    my %RCSID = parse_id('$Id$');
# use Data::Dumper;
use Getopt::Long;

sub _main; sub _version; sub _help;
sub process;

sub proc_plain;
sub proc_eval;
sub proc_regexp;

our $opt_mode           = 'plain';
our $opt_linemode       = 1;
our @opt_select;
our $opt_pattern;
our $opt_replacement;
our $opt_command        = '';
our $opt_regexp_flags   = 'g';
our $opt_ignore_case;
our $opt_ssub;

sub _boot {
    GetOptions('quiet|q'        => sub { $LOGLEVEL-- },
               'verbose|v'      => sub { $LOGLEVEL++ },
               'version'        => sub { _version; exit 0 },
               'help|h'         => sub { _help; exit 0 },
               %COMOPT,         # bcdfikrtw
               'mode|m=s',
               'regexp|p'       => sub { $opt_mode = 'regexp' },
               'eval|e'         => sub { $opt_mode = 'eval' },
               'exec|x'         => sub { $opt_mode = 'exec' },
               'select|s=s'     => \@opt_select,
               );
    $opt_ignore_case = $cmt::fileproc::opt_ignore_case;
    $cmt::fileproc::LOGLEVEL = $LOGLEVEL - 1;

    for (0..$#opt_select) {
        $opt_select[$_] = [ split('-', $opt_select[$_]) ];
    }

    my %use_regexp = map { $_ => 1 } qw(regexp eval);

    if ($opt_mode eq 'exec') {
        undef @opt_select;
        # undef @ignore_case;       # ignore-case used in filename also.
    }

    if ($opt_mode eq 'exec') {
        die "command isn't specified" if @ARGV < 1;
        my $endpos = array_index(@ARGV, '--');
        if ($endpos == -1) {
            $opt_command = shift @ARGV;
        } else {
            my @args = splice(@ARGV, 0, $endpos);
            $opt_command = \@args;
            shift @ARGV;
        }
    } else {
        die "pattern isn't specified" if @ARGV < 2;
        ($opt_pattern, $opt_replacement) = splice(@ARGV, 0, 2);
        die "pattern can't be empty" unless length $opt_pattern;
        if ($use_regexp{$opt_mode}) {
            $opt_pattern     = safeslash $opt_pattern;
            $opt_replacement = safeslash $opt_replacement;
            if ($opt_pattern =~ /(?<!\\)\\[nr]/) {
                $opt_regexp_flags .= 's';
            }
        }
        if ($opt_ignore_case) {
            if ($opt_mode eq 'plain') {
                $opt_pattern = lc $opt_pattern;
            } elsif ($use_regexp{$opt_mode}) {
                $opt_regexp_flags .= 'i';
            }
        }
        if ($opt_mode eq 'eval') {
            $opt_regexp_flags .= 'e';
        }
        if ($use_regexp{$opt_mode}) {
            $opt_ssub = ssub $opt_pattern, $opt_replacement, $opt_regexp_flags;
        }
    }

    $opt_linemode = index($opt_regexp_flags, 's') == -1;

    # die "no files specified." unless @ARGV;
    @ARGV = qw(.) unless @ARGV;

    if ($LOGLEVEL > 2) {
        _log3 "mode:        $opt_mode";
        _log3 "pattern:     $opt_pattern (flags: $opt_regexp_flags)" if defined $opt_pattern;
        _log3 "replacement: $opt_replacement" if defined $opt_replacement;
        _log3 "command:     ".(ref $opt_command ? join('|', @$opt_command) : $opt_command);
        _log3 "select:      $_->[0]..$_->[1]" for @opt_select;
    }
    _main
}

=head1 SYNOPSIS

B<repl>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<...the rest of arguments...> ]>

=head1 DESCRIPTION

B<repl> is a file utility used to change files in batch. It find files and
replace the file by pattern or execute a command.

BACKGROUND-PROBLEM.

HOW-repl-RESOLVES.

=head1 OPTIONS

=over 8

=item -m, --myoptions

...

=item -q, --quiet

Repeat this option to suppress unimportant information to display.

=item -v, --verbose

Repeat this option to display more detailed information.

=item -h, --help

Display a breif help page and exit(0).

=item --version

Display a short version information and exit(0).

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    _version;
    print "\nSyntax: \n    $0 [OPTION] [--] [MODE-ARGUMENTS] FILE...\n", <<"EOM";

Common Options:
$COMOPT    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
    -h, --help              show this help page
        --version           print the version info

Replacement Options:
    -m, --mode=MODE         specify how to interpret MODE-ARGUMENTS
    -p, --regexp            => --mode=regexp
    -e, --eval              => --mode=eval
    -x, --exec              => --mode=exec
    -s, --select=RANGE      select RANGE(s) of file to replace

$WALKOPT
Mode `plain':   OPTION...) PATTERN REPLACEMENT (FILE...
    Both PATTERN and REPLACEMENT are specified in plain texts.

Mode `regexp':  OPTION...) PATTERN REPLACEMENT (FILE...
    Both PATTERN and REPLACEMENT are specified in (perl-) regular expressions.

Mode `eval':    OPTION...) PATTERN REPLACEMENT (FILE...
    The PATTERN is specified in (perl-) regular expression, and the REPLACEMENT
    is a perl program evaluated to be the final replacement.
    (just as s/PATTERN/REPLACEMENT/e does)

Mode `exec':    OPTION...) COMMAND ARGUMENT... -- (FILE...
                OPTION...) "COMMAND ARGUMENT..." (FILE...
    execute `COMMAND ARGUMENTs FILE' for each file, the whole file will be
    replaced by the captured output.

RANGE format (ignored in mode `exec'):
    N       only the Nth match of PATTERN will be replaced.
    N+C     the Nth to (N+C-1)th match of PATTERN will be replaced.
    N+      don't replace before Nth match of PATTERN.
    +C      The same as 1+C
EOM
}

exit (_boot or 0);

sub _main {
    my $proc = main->can('proc_'.$opt_mode) or die "illegal mode: $opt_mode";
    batch_main [\&process, $proc], @ARGV;
}

sub process {
    my ($path, $tmph, $tmpf, $proc) = @_;

    if ($opt_mode eq 'exec') {
        open(my $oldout, '>&STDOUT')
            or die "can't redirect stdout(get): $!";
        open(STDOUT, '>&', $tmph)
            or die "can't redirect stdout(set): $!";
        my ($ret, $err);
        if (ref $opt_command) {
            $ret = system @$opt_command, $path;
        } else {
            $ret = system $opt_command." \"$path\"";
        }
        open(STDOUT, '>&', $oldout)
            or die "can't redirect stdout(reset): $!";
        if ($ret == -1) {
            _sig1 'exec', "\n     failed to execute: $!\n";
            return 0;
        }
        return undef;
    } else {
        _sig2 'file', $path;
        my $diffs = 0;
        my ($diff, $t);
        my $fh;
        unless (open $fh, '<', $path) {
            _sigx "can't open: $!";
            return 0;
        }
        if ($opt_mode eq 'plain' or $opt_linemode) {
            my $buf = '';
            while (<$fh>) {
                ($diff, $t) = $proc->($buf.$_);
                if (defined $t) {
                    $buf = '';
                    print $tmph $t;
                } else {
                    $buf .= $_;
                }
                $diffs += $diff if defined $diff;
            }
            print $tmph $buf if defined $buf;
        } else {
            my $text = join('', <$fh>);
            ($diff, $t) = $proc->($text);
            print $tmph (defined $t ? $t : $text);
            $diffs += $diff if defined $diff;
        }
        close $fh;
        return $diffs;
    }
}

=head1 DIAGNOSTICS

(No Information)

=cut

=head1 HACKING

(No Information)

=cut

sub proc_plain {
    local $_ = shift;
    my $t = $opt_ignore_case ? lc($_) : $_;
    my $pos = length($_);
    my $edit;
    while ($pos >= 0) {
        $pos = rindex($t , $opt_pattern, $pos);
        last if $pos == -1;
        my $old = substr $_, $pos, length $opt_pattern, $opt_replacement;
        $pos -= length $opt_pattern; # avoid Overlaps.
        $edit++ if $old ne $opt_replacement;
    }
    ($edit, $_)
}

sub proc_eval {
    &proc_regexp;
}

sub proc_regexp {
    local $_ = shift;
    my $old = $_;
    $opt_ssub->($_);
    ($_ ne $old, $_);
}

sub proc_exec { 'placeholder' }

=head1 HISTORY

=over

=item 0.x

The initial version.

=item 1.x

Rewrite version, with a lot of enhancement. (Incompatible with 0.x)

=back

=cut
sub _version {
    print "[$LOGNAME] Batch file replacer \n";
    print "Written by Lenik,  Version 1.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"Perl_simple_cli_program_template">

=head1 AUTHOR

Xima Lenik <lenik@bodz.net>

=cut
