#!/usr/bin/perl
# $Id: so,v 1.7 2005-01-06 04:21:46 dansei Exp $

use strict;
use Socket;
use FileHandle;
use Getopt::Long;
use cmt::vcs;


our $opt_server = "localhost";
our $opt_port = 80;
our $opt_type = SOCK_STREAM;
our $opt_proto = 'tcp';

# [0]: imm after connected, each [1.. for each responses
our @sends;

# default enabled only for HTTP (80)
our $opt_until_end;

# binary mode
our $opt_binary = 1;

our %vars;


sub help;
sub init;
sub main;
sub unescape;


&help if scalar(@ARGV) == 0;
init();
main();


sub unescape {
    my $oldtext = shift;
    my $text = '';
    my $mark = 0;
    while ($oldtext =~ m/(\\.)/g) {
	$text .= substr($oldtext, $mark, $-[0] - $mark);
	if ($1) {
	    my $char = substr($1, 1);
		if ($char eq 'n') { $text .= "\n" }
		elsif ($char eq 't') { $text .= "\t" }
		elsif ($char eq 'r') { $text .= "\r" }
		elsif ($char =~ m/[a-z]/i) {
		    $text = $vars{$char};
		    }
		else { $text .= $char }
	}
	$mark = $-[0] + length($&);
    }
    $text .= substr($oldtext, $mark);
}


sub init {
    my $echo;
    our $opt_as = 'text';

    GetOptions(
        'remote=s'          => \$opt_server,
        'port=n'            => \$opt_port,
        'until-end|e'       => \$opt_until_end,
        'TCP'               => sub { $opt_type = SOCK_STREAM; $opt_proto = 'tcp'; },
        'UDP'               => sub { $opt_type = SOCK_DGRAM;  $opt_proto = 'udp'; },
        'binary'            => \$opt_binary,
        'text'              => sub { $opt_binary = 0; },
        'help'              => sub { &help },
        'as=s'              => \$opt_as,
        'send:s'            => sub {
                my ($_sub, $text) = @_;
                push(@sends, $echo) if $echo;
                $echo = { $opt_as => $text };
            },
        'get=s'         => sub {
                # --get=size:800,x=3..4,y=/hello/,save:file1.dat,wait:1000,print
                my ($_sub, $expect) = @_;
                while ($expect) {
                    if ($expect =~ s/(^|,)size:(\d+)//) {
                        # do get of specified size
                        $echo->{'size'} = int($2);
                    } elsif ($expect =~ s/(^|,)print$//) {
                        # do print
                        $echo->{'print'} = 1;
                    } elsif ($expect =~ s/(^|,)wait(:\d+)?$//) {
                        # wait:<milliseconds>
                        $echo->{'wait'} = 1 * substr($2, 1);
                    } elsif ($expect =~ s/(^|,)save:(.*)$//) {
                        # do save to file
                        $echo->{'save'} = $2;
                    } elsif ($expect =~ s/(^|,)([a-z]+)=(\d+)\.\.(\d+)//) {
                        # save text of specified range of bytes
                        $echo->{'quote'}->{$2} = [int($3), int($4)];
                    } elsif ($expect =~ s/(^|,)([a-z]+)=\/((?:[^\/]|\\.)+)\///) {
                        # save text of specified pattern
                        $echo->{'quote'}->{$2} = ['regex', $3];
                    } else {
                        last;
                    }
                }
            },
        );

    push (@sends, $echo) if $echo;

    $opt_until_end = 1 if ($opt_port == 80 and !defined $opt_until_end);

    if ($opt_binary) {
        binmode STDOUT;
    }

    #print Dumper(\@sends); exit -1;
}

sub main {
    my $iaddr = inet_aton($opt_server);
        die "Server $opt_server not found: $!" if !$iaddr;
    my $paddr = sockaddr_in($opt_port, $iaddr);

    my $proto = getprotobyname($opt_proto);

    socket(SOCK, PF_INET, $opt_type, $proto)
        or die "Can't create socket: $!";
    connect(SOCK, $paddr)
        or die "Connect failure: $!";

    my $data;
    while (my $echo = shift @sends) {
        if ($echo->{'text'}) {
            my $text = unescape($echo->{'text'});
            send(SOCK, $text, 0);
        } elsif ($echo->{'file'}) {
            my $file = unescape($echo->{'file'});
            (my $send_file = new FileHandle("<$file"))
                || die "Can't open input file $echo->{file}: $!";
            while (<$send_file>) {
                send(SOCK, $_, 0);
            }
            $send_file->close();
        }

        if ($opt_until_end and !@sends) {
            while ($data = <SOCK>) {
                print($data) if $echo->{'print'};
                if ($echo->{'save'}) {
                    open SAVE, ">>$echo->{save}";
                    print SAVE $data;
                    close SAVE;
                }
            }
            last;
        } else {
            if ($echo->{'size'}) {
                read(SOCK, $data, $echo->{'size'});
            } else {
                $data = <SOCK>;
            }
        }

        if ($echo->{'quote'}) {
            my $quotes = $echo->{'quote'};
            foreach (keys %$quotes) {
                my $range = $quotes->{$_};
                my $value;
                if ($range->[0] eq 'regex') {
                    if ($data =~ m/$range->[1]/) {
                        $vars{$_} = $&;
                    }
                } else {
                    $vars{$_} = substr($data, $range->[0], $range->[1]);
                }
            }
        }

        print $data;
        if ($echo->{'save'}) {
            open SAVE, ">>$echo->{save}";
            print SAVE $data;
            close SAVE;
        }

    }
    close SOCK;
}

sub help {
    my %id = parse_id('$Id: so,v 1.7 2005-01-06 04:21:46 dansei Exp $');

    print <<"EOM";
[SOCKONCE] socket communication utility for simple dialog
author: snima denik,  version $id{'rev'},  last updated: $id{'date'}

syntax:
    $0
        --remote=<server name, default localhost> (r)
        --port=<port number, default 80> (p)
        --TCP (t, default)
        --UDP (u)
        --utill-end (e)
        --binary (b)
        --text (t)
        --as=<method for next-send, can be 'text', 'file'> (a)
            ( you can describe a sequence of operations by combine multiple
              --as --send --get ... )
        --send=<string> (s)
            ( string may be text or file-name, which was specified by --as )
        --get=<method>[,<method>...] (g)
            <method> ::=
                print
                wait:<milli-seconds>
                size:<bytes-of-block>
                save:<file-name>
                <single-char-variable>=<start-byte>..<bytes-length>
                    ( save specified range of received bytes to variable)
                <single-char-variable>=/<regular-expression>/
                    ( save text of specified pattern to variable )
        --help (h)

example:
    $0 -r=localhost -p=2345
        -s=hello
        -a=file -s=input1.dat -g="x=/(?<=\().*(?=\))/,save:file1.dat"
        -a=text -s="you said \x, see you later!"

    $0 -r=www.microsoft.com -s="GET /\\n\\n" -g=save:microsoft.htm
EOM
    exit 0;
}
