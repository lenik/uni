#!/usr/bin/perl

use strict;
use cmt::util;
use cmt::vcs;
use Getopt::Long;

sub boot;
sub main;
sub info;
sub info2;
sub version;
sub help;

our $opt_lines          = 2;
our $opt_verbtitle      = 'unindent';
our $opt_verbtime       = 0;
our $opt_verbose        = 1;

sub boot {
    GetOptions('lines|l=n',
               'quiet|q'   => sub { $opt_verbose-- },
               'verbose|v' => sub { $opt_verbose++ },
               'version' => sub { version; exit },
               'help|h'    => sub { help; exit },
               );
    main;
}

sub info {
    return if $opt_verbose < 1;
    my $text = shift;
    print datetime.' ' if $opt_verbtime;
    print "[$opt_verbtitle] $text\n";
}

sub info2 {
    return if $opt_verbose < 2;
    my $text = shift;
    print datetime.' ' if $opt_verbtime;
    print "[$opt_verbtitle] $text\n";
}

sub version {
    my %id = parse_id('$Id: unindent,v 1.2 2007-06-25 12:58:14 lenik Exp $');
    print "[opt_verbtitle] Perl simple cli program template\n";
    print "Written by Lenik,  Version $id{rev},  Last updated at $id{date}\n";
}

sub help {
    version;
    print <<"EOM";

Syntax:
        $0 <options> ...

Options:
        --lines=<number> (l, min lines of a paragraph to unindent)
        --quiet (q)
        --verbose (v, repeat twice give you more verbose info)
        --version
        --help (h)
EOM
}

boot;

sub unindent_paragraph {
    my $lines = shift;
    my $n = scalar(@$lines);
    return if ($n < $opt_lines);

    my $minspace = 10000;
    for (@$lines) {
        # if (m/^(\s+)$/) { # ignore...
        if (m/^(\s+)/) {
            my $spc = length($1);
            $minspace = $spc if ($spc < $minspace);
        } else {
            # minspace == 0, donothing
            return;
        }
    }

    # assert $minspace > 0
    for (my $i = 0; $i < $n; $i++) {
        my $line = $lines->[$i];
        $line = substr($line, $minspace);
        $lines->[$i] = $line;
    }
}

sub main {
    my @p;
    while (<>) {
        if (s/^\s+$//) {
            unindent_paragraph \@p;
            print for @p;
            print "\n";
            @p = ();
            next;
        }
        push @p, $_;
    }
    if (@p) {
        unindent_paragraph \@p;
        print for @p;
    }
}
