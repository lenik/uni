#!/usr/bin/perl

=head1 NAME

NFS - Notes for Speed

=cut
use strict;
use vars qw($LOGNAME $LOGLEVEL);
    $LOGNAME    = 'NFS';
use cmt::log(2);
use cmt::path('path_join', 'path_split', 'path_splitext', 'path_normalize');
use cmt::perlsys;
use cmt::util('php_perl', 'readfile', 'writefile');
use cmt::vcs('parse_id');
    my %RCSID   = parse_id('$Id: nfs,v 1.30 2007-09-20 15:25:21 lenik Exp $');
use cmt::winuser;
use DirHandle;
use File::Copy;
use File::Path;
use Getopt::Long;
# use Tk;
use YAML;

sub _main; sub _version; sub _help;

sub file_sync;
sub expand_nfs_title;
sub template_instantiate;
sub template_substitute;
sub expand_symbolic_link;
sub binary_copy;
sub get_serial;
sub get_vol_serial;
sub set_program;
sub set_option;
sub confirm_prompt;
sub cmdexec;

our $opt_program            = '.dep';
our $opt_type;              # document type
our $opt_type_spec;
our $opt_open_all;          # create if none type exists, otherwise ignore option --type
our $opt_map_target         = '.';      # Map the specified nfs document to the target directory
our $opt_map_delete         = 0;        # Delete the target mapping entry
our $opt_link               = '.';      # This relative path will be expanded to actual path.
our $opt_offset             = 0;        # Time or Serial adjustment
our $opt_index_range;                   # Documents range specifies which documents to be indexed
our $opt_keywords_range;                # default "h1 keywords title"
our $opt_flatten_target;                # flatten symbolic links into single directory-tree
our $opt_name_method        = 'date';   # one of (date, ser)
our $opt_format_date        = 'YYYY-MM-DD';
our $opt_format_serial      = 'DDDD';
our $opt_title              = '';       # NFS-Title, Default depends on name-method
our $opt_max_levels         = 'inf';    # Max levels of directories
our $opt_disable_symbolic_link;
our $opt_disable_vex_extension;
our $opt_wait_close;                    # used in hotkey bindings
our $opt_interactive;
our $opt_test_only;

my %FILETYPE = (
    ''      => 'no "%s"',                   # default
    'txt'   => 'metapad "%s"',
    'doc'   => 'winword "%s"',
    'xls'   => 'excel "%s"',
    'x'     => 'SPECIAL',
    'lst'   => 'no "%s"',
);

my $APPNAME                 = 'NFS Version 2';
my $HOME                    = "$ENV{USERPROFILE}/My Documents";
my $NFS_ROOT;               # NFS-Root, default "My Documents/.notes" -or- "~/.notes" for most types.
my $NFS_VOL;                # dynamic: maybe happened to be override in any level of container.
my $NFS_CONTAINER;
my $NFS_FILE;               # should be equal to container/title

sub boot {
    GetOptions('quiet|q'        => sub { $LOGLEVEL-- },
               'verbose|v'      => sub { $LOGLEVEL++ },
               'version'        => sub { _version; exit 0 },
               'help|h'         => sub { _help; exit 0 },
               'root|r=s'          => \$NFS_ROOT,
               'nfs-title|n=s',
               'program|p=s'       => sub { set_program $_[1] },
               'type|t=s'          => sub { die "--type exclusive with --open-all" if $opt_open_all;
                                            $opt_type = $_[1]; },
               'open-all|a'        => sub { die "--open-all exclusive with --type" if defined $opt_type;
                                            $opt_open_all = 1 },
               'backup|b'          => sub { set_program '.bak' },
               'create|c'          => sub { set_program '.new' },
               'delete|d'          => sub { set_program '.del' },
               'map|m:s'           => sub { set_program '.map';
                                            set_option "map target", \$opt_map_target, $_[1], '.' },
               'synchronize|s'     => sub { set_program '.sync' },
               'link|l:s'          => sub { set_program '.link';
                                            set_option "symbolic link file", \$opt_link, $_[1] },
               'index|x:s'         => sub { set_program '.index';
                                            set_option "index range", \$opt_index_range, $_[1] },
               'keywords|k:s'      => sub { set_program '.keys';
                                            set_option "keywords range", \$opt_keywords_range, $_[1] },
               'flatten|fl=s'      => sub { set_program '.flat';
                                            set_option "flatten target", \$opt_flatten_target, $_[1] },
               'max-levels|ml=s',
               'use-date|ud:s'     => sub { $opt_name_method = 'date';
                                            set_option "date format", \$opt_format_date, $_[1], $opt_format_date },
               'use-serial|us:s'   => sub { $opt_name_method = 'ser';
                                            set_option "serial format", \$opt_format_serial, $_[1], $opt_format_serial },
               'offset|o=n',
               'disable-symbolic-link|ds',
               'disable-vex-extension|dv',
               'wait-close',
               'interactive|i',
               'test-only|to',
               'force|fo',
               );

    for (@ARGV) {
        if ($_ eq '//') {               # //        --index
            set_program '.index';
        } elsif (m/^\/(\w+)$/) {        # /ext      --type
            die "$_: exclusive with --open-all" if $opt_open_all;
            $opt_type = $1;
        } elsif (m/^(\d+)\.$/) {        # num.      --offset=-num
            $opt_offset -= $1;
        } elsif (m/^(\.+)$/) {          # ...       --offset=-2
            $opt_offset -= length($1)-1;
        } elsif (m/^\.(\d+)$/) {        # .num      --offset=+num
            $opt_offset += $1;
        } elsif ($opt_title eq '') {      # <title>   --nfs-title
            # REM-ARG-1 for title is title not defined
            $opt_title = $_;
        } else {
            die "Invalid argument: $_";
        }
    }

    unless (defined $NFS_ROOT) {
        if ($opt_type eq 'x') {
            $NFS_ROOT = "$HOME/.scratch";
            $opt_type = 'lst';
            $opt_program = '.ls';
        } else {
            $NFS_ROOT = "$HOME/.notes";
        }
    }

    $opt_type = 'txt' unless $opt_type_spec = defined $opt_type;

    if ($opt_title eq '') {
        my $deftitle = get_serial($NFS_ROOT);
        if ($opt_interactive) {
            set_option 'nfs title', \$opt_title, '', $deftitle;
        } else {
            $opt_title = $deftitle;
        }
    }

    if ($opt_title =~ m/--/) {
        die "Invalid NFS-Title: $opt_title";
    }

    $NFS_ROOT = expand_symbolic_link($NFS_ROOT, 'Not mounted: %s');

    # prepare title name
        if ($opt_title =~ m/^\.(.*)$/) {
            $opt_title = ".vol-$1";
        }

        if ($opt_title =~ s/-$/-placeholder/) {
            # temporary add the serial-name for stacked-document (which has '-' suffix)

            # get the container path
            my ($t_container, $t_vol, $t_full, $t_autoext)
                = expand_nfs_title($NFS_ROOT, $opt_title, $opt_type, 1);

            my $stack_serial = get_serial($t_container);
            $opt_title =~ s/-placeholder$//;
            $opt_title .= "-$stack_serial";
        }

    # expand nfs-title into container-path and full-path
    ($NFS_CONTAINER, $NFS_VOL, $NFS_FILE, $opt_type)
        = expand_nfs_title($NFS_ROOT, $opt_title, $opt_type, $opt_type_spec);

    _log2 'NFS_VOL:         '.$NFS_VOL;
    _log2 'NFS_CONTAINER:   '.$NFS_CONTAINER;
    _log2 'NFS_FILE:        '.$NFS_FILE;
    _log2 'program:         '.$opt_program;

    _main;
}

=head1 SYNOPSIS

B<UnKnOwN>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<...the rest of arguments...> ]>

=head1 DESCRIPTION

B<UnKnOwN> is a WHAT used for WHAT. It HOW-WORKS.

BACKGROUND-PROBLEM.

HOW-UnKnOwN-RESOLVES.

=head1 OPTIONS

=over 8

=item S<[ B<-m> | B<--my-option> ]>

...

=item S<[ B<-q> | B<--quiet> ]>

Repeat this option to suppress unimportant information to display.

=item S<[ B<-v> | B<--verbose> ]>

Repeat this option to display more detailed information.

=item S<[ B<-h> | B<--help> ]>

Display a breif help page and exit(0).

=item S<[ B<--version> ]>

Display a short version information and exit(0).

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    &_version;
    print "\nSyntax: \n    $0 [OPTION] [--] TITLE\n", <<'EOM';

Common options:
    -r, --root=DIR          default ~/.notes
    -n, --nfs-title=TITLE   default use-date
    -p, --program=PROGRAM   override the default program
    -t, --type=TYPE         default txt
    -a, --open-all          open all types of TITLE, exclusive with --type)
    -b, --backup            (not implemented)
    -c, --create            recreate a new file
    -d, --delete            delete the TITLE
    -m, --map=DIR           default current directory
    -s, --synchronize       synchronize the mappings in current directory
    -l, --link=DIR          ln -s DIR CONTAINER/TITLE.link
    -x, --index=TAGS        default "h1"
    -kb,--keywords-build=TAGS default "h1 keywords title"
        --flatten=DIR       flatten symlinks into single directory-tree
    -ml,--max-levels=NUM    limit max levels, must be greater than 1
    -ud,--use-date=FORMAT   default YYYY-MM-DD
    -us,--use-serial=FORMAT default 000
    -o, --offset=DAYS(date-diff) or NUM(serial-diff)
    -ds,--disable-symbolic-link
    -dv,--disable-vex-extension
    -i, --interactive
    -to,--test-only
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
    -h, --help              show this help page
        --version           print the version info

Examples:
    nfs -m /public/myopinion 2001-02-03
    nfs -l .. (TODO)

EOM
}

exit boot;

sub _main {
    # quick delete
        if ($opt_program eq '.del' or $opt_program eq '.new') {
            if (-e $NFS_FILE) {
                my $confirm = confirm_prompt "delete file $NFS_FILE";
                exit if not $confirm;
                _log2 "delete file $NFS_FILE";
                unless (unlink $NFS_FILE) {
                    _log1 "Nfs document $NFS_FILE can not be deleted";
                }
            } else {
                _log1 "Nfs document $NFS_FILE was not existed";
            }
            exit if ($opt_program eq '.del');
            undef $opt_program;         # for .new
        }


    # for special operations

    if ($opt_program eq '.bak') {
        _log2 "backup $NFS_FILE to $NFS_FILE.bak";
        binary_copy $NFS_FILE, "$NFS_FILE.bak";
        return;
    }

    if ($opt_program eq '.map') {
        _log2 "map $NFS_FILE to $opt_map_target";

        # check source existance and get the extension
        if (not $opt_map_delete) {
            if (not -e $NFS_FILE) {
                die "Mapping source $NFS_FILE isn't existed. ";
            }
        }
        if ($opt_map_target !~ m/\./) {
            $opt_map_target .= ".$opt_type";
        }

        if ($opt_map_delete) {
            if (-e $opt_map_target) {
                my $confirm = "delete file $opt_map_target";
                exit if not $confirm;
            }
            unlink $opt_map_target;
        } else {
            # returns the actually full-path of target,
            # this may fill the ignored filename
            $opt_map_target = binary_copy($NFS_FILE, $opt_map_target);
        }

        if (not $opt_disable_vex_extension) {
            # $new_this -> $new_source
            my ($src_dir, $src_name) = path_split($NFS_FILE);
            my ($dst_dir, $dst_name) = path_split($opt_map_target);
                $dst_dir ||= '.';
            my $new_key = $dst_name;            # target
            my $new_value = $NFS_FILE;     # source

            my $vexdir = path_join($dst_dir, '.VEX', 'sync');
            my $synclist = path_join($vexdir, 'sync-nfs');

            if ($opt_map_delete) {
                _log2 "remove vex/sync entry: $new_key=$new_value";
            } else {
                # os-branch
                # if (not -e ".sync-nfs.bat") {
                    open(F, ">.sync-nfs.bat");
                    print F "\@echo off\n";
                    print F "rem NFS-Rev: $RCSID{rev}\n";
                    print F "rem Thie file is auto generated by NFS Program $RCSID{rev}, and it will\n";
                    print F "rem be automaticly updated. Please don't edit this file. \n";
                    print F "call nfs --synchronize --quiet\n";
                    close F;
                # }

                _log2 "add vex/sync entry: $new_key=$new_value";
                mkpath $vexdir;
            }

            my @lines = ();
            if (open(SYNC, "<$synclist")) {
                while (<SYNC>) {
                    if (m/^\s*(\#.*)$/) {
                        push @lines, $_;
                        next;
                    }
                    if (m/^(.*)=(.*)$/) {
                        next if ($1 eq $new_key);
                    }
                    push @lines, $_;
                }
                close SYNC;
            }
            if (not $opt_map_delete) {
                push @lines, "$new_key=$new_value\n";
            }
            if (@lines) {
                open(SYNC, ">$synclist")
                    or die "Can't open $synclist for write";
                for (@lines) {
                    print SYNC;
                }
                close SYNC;
            } else {
                unlink $synclist;

                # os-branch
                if (-e ".sync-nfs.bat") {
                    unlink ".sync-nfs.bat";
                }
            }
        }
        return;
    }

    if ($opt_program eq '.sync') {
        if ($opt_disable_vex_extension) {
            # treat all files under current directory as mapping-items
            my $dh = new DirHandle('.');
            my @files = $dh->read;
            $dh->close;
            while (@files) {
                next if (m/^\.+$/);
                my $fullpath = expand_nfs_title($_);
                if (-e $fullpath) {
                    _log2 "synchronize $_ from $fullpath";
                    file_sync $fullpath, path_join('.', $_), $_;
                }
            }
        } else {
            my $vexdir = path_join($opt_map_target, '.VEX', 'sync');
            my $synclist = path_join($vexdir, 'sync-nfs');
            if (not -e $vexdir) {
                _log2 "no items to synchronize";
                exit;
            }

            if (open(SYNC, "<$synclist")) {
                while (<SYNC>) {
                    next if (m/^\s*(\#.*)$/);
                    if (m/^(.*)=(.*)$/) {
                        my $synckey = $1;                       # sync-target
                        my $syncvalue = $2;                     # sync-source
                        _log2 "synchronize $synckey from $syncvalue";
                        file_sync $syncvalue, path_join('.', $synckey), $synckey;
                    }
                }
                close SYNC;
            }
        }
        return;
    }

    # for normal open

    # browsing?
    if ($opt_program eq '.ls') {
        my $termdir = path_join $NFS_CONTAINER, $opt_title;
        mkdir_p $termdir;
        $opt_program = '.dep';
        cmdexec "\"$termdir\"";
        # continue operations.
    }

    # lazy- create
    if (! -e $NFS_FILE) {
        # auto create the container levels
        mkpath $NFS_CONTAINER;

        # apply the template
        my $template = path_join $NFS_VOL, ".vol-def.$opt_type";
        if (-e $template) {
            _log2 "create new nfs document based on template: $template";
            template_instantiate $template, $NFS_FILE;
        } else {
            _log2 "create new nfs document (empty)";
            open(FH, ">$NFS_FILE")
                or die "Can't create file $NFS_FILE";
            close FH;
        }
    }

    # prepare file-list to open => $full_dir/$full_name . @exts
    my ($full_dir, $full_file) = path_split $NFS_FILE;
    my ($full_name, $full_ext) = path_splitext $full_file;
        $full_ext =~ s/^\.//;
    my @exts;

    if ($opt_open_all) {
        my $dh = new DirHandle($NFS_CONTAINER);
        my @list = $dh->read;
        $dh->close;
        foreach my $item (@list) {
            next if -d path_join($NFS_CONTAINER, $item);
            my ($et_name, $et_ext) = path_splitext $item;
            $et_ext =~ s/^\.//;
            push @exts, $et_ext if ($et_name eq $full_name);
        }
    }
    @exts = ($full_ext) if (not @exts);

    # open file-list
    foreach my $each_ext (@exts) {
        my $open_path = path_join($full_dir, "$full_name.$each_ext");
        my $cmdline;

        if ($opt_program eq '.dep') {
            # use program depends on type to open the document
            my $opener = $FILETYPE{$each_ext};
               $opener ||= $FILETYPE{''};
            $cmdline = sprintf("$opener", $open_path);
        } else {
            # use the specified program to open the document
            $cmdline = sprintf("$opt_program", $open_path);
        }

        cmdexec $cmdline;
    }

}

=head1 INTERNALS

(No Information)

=cut
sub file_sync {
    my ($source, $dest, $name) = @_;
    if (not -e $dest) {
        _log2 "download/new $name";
        binary_copy $source, $dest;
    } elsif (not -e $source) {
        _log2 "upload/new $name";
        binary_copy $dest, $source;
    } else {
        my @st_src = stat $source;
        my @st_dst = stat $dest;
        my $mt_src = $st_src[9];
        my $mt_dst = $st_dst[9];
        if ($mt_src == $mt_dst) {
            _log2 "skip $name";
        } elsif ($mt_src > $mt_dst) {
            # source is newer
            _log2 "download $name";
            binary_copy $source, $dest;
        } else {
            # dest is newer
            _log2 "upload $name";
            binary_copy $dest, $source;
        }
    }
}

# input:    original-root, title
# output:   path-container, path-vol, path-full
sub expand_nfs_title {
    my ($root, $title, $ext, $strict) = @_;
    my @segs = split('-', $title);
    my $current = '';
    my ($container, $vol, $full);

    for (@segs) {
        $current .= '-' if $current;
        $current .= $_;
        $_ = $current;
    }
    my $name = pop @segs;

    $container = $root;
    $vol = path_join $root, '.vol';
    for (@segs) {
        $container .= '/' if $container;
        $container .= $_;
        $container = expand_symbolic_link($container, 'Link target not existed: %s');
        if (-d path_join($container, '.vol')) {
            $vol = path_join $container, '.vol';
        }
    }
    $container = path_normalize $container;
    $vol = path_normalize $vol;

    if (not $strict and -d $container) {
        # auto find extension
        my $dh = new DirHandle($container);
        my @list = $dh->read;
        $dh->close;
        my $autoext = undef;
        for (@list) {
            next if -d path_join($container, $_);
            my ($fi, $ei) = path_splitext($_);
            $ei =~ s/^\.//;
            if ($fi eq $name) {
                $autoext = $ei if not $autoext;
                $autoext = $ei if $ei eq $ext;        # high prior for same-extension
            }
        }
        $ext = $autoext if $autoext;
    } else {
        # extension strictly specified
        # (do nothing)
    }

    $full = path_join $container, "$name.$ext";
    return ($container, $vol, $full, $ext);
}

sub template_instantiate {
    my ($tmpl, $file) = @_;
    my @noteauto_supports = qw/doc xls/;
    if (grep { $_ eq $opt_type } @noteauto_supports) {
        # e.g.
        #   noteauto path/vol create doc path/full.ext
        #   noteauto path/vol create xls path/full.ext
        system "noteauto \"$NFS_VOL\" create $opt_type \"$NFS_FILE\"";
    } else {
        _log2 "instantating $tmpl to $file";
        my $cnt = php_perl readfile $tmpl;
        writefile($file, $cnt) or die "Can't write to $file";
    }
}

sub expand_symbolic_link {
    my ($path, $errmsg) = @_;
    return $path if $opt_disable_symbolic_link;

    chop $path if $path =~ m/[\\\/]$/;

    if (-f "$path") {
        my $sym_to = php_perl readfile $path;
        $sym_to =~ s/^\s+|\s+$//g;

        my $context_dir = path_join($path, '..');
        $path = path_join($context_dir, $sym_to);
        if (not -e $path and $errmsg) {
            $errmsg = sprintf $errmsg, $path;
            print($errmsg), exit if $opt_test_only;
            while ('retry' eq
                    msgbox($errmsg, $APPNAME, 'retry', 'cancel', 'x')) {
                last if -e $path;
            }
            exit if not -e $path;
        }
    }
    return $path;
}

sub binary_copy {
    my ($src, $dest) = @_;
    if (-d $dest) {
        my ($src_dir, $srcfile) = path_split($src);
        $dest = path_join($dest, $srcfile);
    }

    if (-e $dest) {
        my $confirm = confirm_prompt "overwrite file $dest";
        exit if not $confirm;
    }

    _log2 "copy $src to $dest";

    #open(FSRC, "<$src")
    #    or die "Can't open file $src for read";
    #open(FDEST, ">$dest")
    #    or die "Can't open file $dest for write";
    #binmode FSRC;
    #binmode FDEST;
    #while (<FSRC>) {
    #    print FDEST;
    #}
    #close FSRC;
    #close FDEST;

    copy($src, $dest)
        or die "Can't copy $src to $dest";

    return $dest;
}

sub get_serial {
    if ($opt_name_method eq 'date') {
        # YYYY-MM-DD (week W) HH:NN:SS
        my $fmt = '';
        my @list = ();
        my $timestamp = time + $opt_offset * 86400;
        my @lt = localtime $timestamp;
        while ($opt_format_date =~ m/(.)\1*/g) {
            my $c = substr($&, 0, 1);
            my $len = length($&);
            my $f = '%0'.$len.'d';

            if ($c eq 'Y')      { $fmt .= $f; push @list, 1900 + $lt[5] }
            elsif ($c eq 'M')   { $fmt .= $f; push @list,    1 + $lt[4] }
            elsif ($c eq 'D')   { $fmt .= $f; push @list,    0 + $lt[3] }
            elsif ($c eq 'W')   { $fmt .= $f; push @list,    0 + $lt[6] }
            elsif ($c eq 'H')   { $fmt .= $f; push @list,    0 + $lt[2] }
            elsif ($c eq 'N')   { $fmt .= $f; push @list,    0 + $lt[1] }
            elsif ($c eq 'S')   { $fmt .= $f; push @list,    0 + $lt[0] }
            else                { $fmt .= $&; }
        }
        return sprintf($fmt, @list);
    }
    if ($opt_name_method eq 'ser') {
        if ($opt_format_serial !~ m/^(.)\1*$/) {
            die "Invalid serial format: $opt_format_serial";
        }
        my $c = substr($&, 0, 1);
        my $pad = 0;
        my $ordix = 10;
        my $capital = 0;
        if ($c eq 'h') { $ordix = 16; $pad = 0 }
        if ($c eq 'H') { $ordix = 16; $pad = 1 }
        if ($c eq 'x') { $ordix = 16; $pad = 0; $capital = 1 }
        if ($c eq 'X') { $ordix = 16; $pad = 1; $capital = 1 }
        if ($c eq 'd') { $ordix = 10; $pad = 0 }
        if ($c eq 'D') { $ordix = 10; $pad = 1 }
        if ($c eq 'o') { $ordix =  8; $pad = 0 }
        if ($c eq 'O') { $ordix =  8; $pad = 1 }
        my $len = length($opt_format_serial);

        my $f = '%';
        $f .= '0' if $pad;
        $f .= $len;
        $f .= 'd' if $ordix == 10;
        $f .= 'o' if $ordix == 8;
        $f .= 'x' if $ordix == 16 and $capital = 0;
        $f .= 'X' if $ordix == 16 and $capital = 1;
        my $container = shift;
        _log2 "calculate the container-serial for $container";

        my $dh = new DirHandle($container);
        my @files = $dh->read;
        $dh->close;

        my ($min, $max) = (0, 0);
        my $num;
        for (@files) {
            next if (-d path_join($container, $_));
            s/^.*-//;
            if ($ordix == 10) {
                $num = 1 * $_;
            } elsif ($ordix == 8) {
                $num = oct $_;
            } elsif ($ordix == 16) {
                $num = hex $_;
            }
            # _log2 "container-serial number discovered: $num";
            $min = $num if $num < $min;
            $max = $num if $num > $max;
        }
        _log2 "last container-serial retrieved: $max";
        $num = $max + 1 + $opt_offset;

        return sprintf($f, $num);
    }
    die "Name method $opt_name_method is not supported. ";
}

sub get_vol_serial {
    my $serial = 0;
    my $path_serial = path_join($NFS_VOL, '.vol-serial');
    if (-e $path_serial) {
        open(F, "<$path_serial")
            or die "Can't open serial file $path_serial to read";
        $serial = 1 * <F>;
        _log2 "last serial retrieved: $serial";
        close F;
    }
    $serial++;
    open(F, ">$path_serial")
        or die "Can't open serial file $path_serial to write";
    print F $serial;
    close F;
    return $serial;
}

=head2 set_program

Program used to open nfs document

    .dep    Depends on type
    .del    delete document
    .new    delete and create
    .map    copy document to specified directory
    .sync   synchronize the mappings in current directory
    .link   create a symbolic link of the specified container-name
    .index  build index file
    .bak    do backup
    .ls     browsing in the directory

=cut
sub set_program {
    my $program = shift;
    if ($opt_program eq '.dep') {
        $opt_program = $program;
        return;
    }
    if ($opt_program eq '.map') {
        if ($program eq '.del') {
            $opt_map_delete = 1;
            return;
        }
    }
    die "--program=$opt_program has already been specified"
}

sub set_option {
    my ($prompt, $optvar, $optval, $defval) = @_;
    if ($opt_interactive) {
        if ($optval eq '') {
            print "Enter $prompt: ";
            my $userinput = <>;
            chomp $userinput;
            $optval = $userinput;
        }
    }
    $optval = $defval if $optval eq '';
    $$optvar = $optval;
}

sub confirm_prompt {
    my $prompt = shift;
    return 1 if $LOGLEVEL < 1;

    while (1) {
        print "Confirm $prompt? ([y]es, [n]o) ";
        my $userinput = <>;
        chomp $userinput;
        $userinput = lc $userinput;

        return 1 if $userinput =~ m/y(e(s)?)?/;
        return 0 if $userinput =~ m/n(o)?/;
        print "Please enter yes or no. ";
    }
}


sub cmdexec {
    my $cmdline = shift;
    _log2 "$cmdline";
    if ($opt_test_only) {
        # do nothing
        my $local = $NFS_CONTAINER;
        chdir $local;

        $local =~ s {\/}{\\}g;
        _log1 "HOWTO? - cd \"$local\"";
    } else {
        if ($opt_wait_close) {
            #if (my $pid = fork) {
            #    waitpid -$pid, 0;
            #} else {
            #    exec $cmdline;
            #}
            system "$cmdline";
        } else {
            system "cmd /c start $cmdline";
        }
    }
}

=head1 HACKING

(No Information)

=cut
# (MODULE FUNCTIONS)

=head1 HISTORY

=over

=item 0.x

The initial version.

=back

=cut
sub _version {
    print "[$LOGNAME] Notes for Speed \n";
    print "Written by Lenik,  Version 2.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"Perl_simple_cli_program_template">

=head1 AUTHOR

Xima Lenik <name@mail.box>

=cut
