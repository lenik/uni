@rem = '
    @echo off

    perl "%~dpnx0" %*
    goto end
    ';

#!perl

use strict;
use cmt::path;
use cmt::util;
use cmt::vcs;
use Cwd;
use Getopt::Long;

sub _boot;
sub main;
sub info;
sub info2;
sub version;
sub help;

our $opt_verbtitle      = 'rpath';
our $opt_verbtime       = 0;
our $opt_verbose        = 1;
our $opt_base;
our $opt_slash;

sub _boot {
    GetOptions('quiet|q'    => sub { $opt_verbose-- },
               'verbose|v'  => sub { $opt_verbose++ },
               'version'    => sub { version; exit },
               'help|h'     => sub { help; exit },
               'base=s',
               'slash=s',
               );
    $opt_base = getcwd unless defined $opt_base;
    $charFS = $opt_slash if defined $opt_slash;
    main;
}

sub info {
    return if $opt_verbose < 1;
    my $text = shift;
    print cdatetime.' ' if $opt_verbtime;
    print "[$opt_verbtitle] $text\n";
}

sub info2 {
    return if $opt_verbose < 2;
    my $text = shift;
    print cdatetime.' ' if $opt_verbtime;
    print "[$opt_verbtitle] $text\n";
}

sub version {
    my %id = parse_id('$Id: rpath,v 1.3 2007-11-08 10:52:38 lenik Exp $');
    print "[$opt_verbtitle] Real Path (Dirt Version, compat with realpath) \n";
    print "Written by Lenik,  Version 0.$id{rev},  Last updated at $id{date}\n";
}

sub help {
    version;
    print <<"EOM";

Syntax:
        $0 [options] <relative-path> [<relative-base>]

Options:
        --base=<relative-base>
        --slash=<char> (s, default '/')
        --quiet (q)
        --verbose (v, repeat twice give you more verbose info)
        --version
        --help (h)
EOM
}

boot;

sub main {
    info2 "relative-base: $opt_base";
    info2 "path-delimitor: $charFS";
    my $path = shift @ARGV or die "<relative-path> isn't specified";
    if (@ARGV) {
        $opt_base = shift @ARGV;
    }
    my $real = path_join($opt_base, $path);
    print "$real\n";
}

__END__
:end
