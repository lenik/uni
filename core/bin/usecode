#!/usr/bin/perl

=head1 NAME

usecode - dynamic codes

=cut
use strict;
use cmt::codec;
use vars qw($LOGNAME $LOGLEVEL);
    $LOGNAME    = 'usecode';
use cmt::log(2);
use cmt::vcs('parse_id');
    my %RCSID = parse_id('$Id: usecode,v 1.8 2007-09-19 07:51:28 lenik Exp $');
use Getopt::Long;
use Win32::Clipboard;
use Win32::TieRegistry(Delimiter => '/');
    $Registry->{'CUser'}->{'Software'} =
        { 'Lapiota' => { 'usecode' => {} } };

sub _main; sub _version; sub _help;
sub system_encode;
sub system_decode;

our $CFG                = $Registry->{'CUser/Software/Lapiota/usecode'};
our $opt_scheme         = system_decode $CFG->{'/scheme'} if $CFG->{'/scheme'};
our $opt_phrase         = system_decode $CFG->{'/phrase'} if $CFG->{'/phrase'};
our $opt_group          = system_decode $CFG->{'/category'} if $CFG->{'/category'};
our $opt_out            = sub { Win32::Clipboard(shift) };
our $opt_text;
our $opt_make_default;

sub _boot {
    GetOptions('quiet|q'        => sub { $LOGLEVEL-- },
               'verbose|v'      => sub { $LOGLEVEL++ },
               'version'        => sub { _version; exit 0 },
               'help|h'         => sub { _help; exit 0 },
               'scheme|s=s',
               'phrase|p=s',
               'group|g=s',
               'stdout|c'       => sub { $opt_out = sub { _P1 shift } },
               'make-default',
               );

    die 'No text specified. ' if (scalar(@ARGV) == 0);

    $opt_scheme = shift @ARGV if (scalar(@ARGV) > 1);
    $opt_group  = shift @ARGV if (scalar(@ARGV) > 1);
    $opt_text   = join(' ', @ARGV);

    _main;
}

=head1 SYNOPSIS

B<UnKnOwN>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<...the rest of arguments...> ]>

=head1 DESCRIPTION

B<UnKnOwN> is a WHAT used for WHAT. It HOW-WORKS.

BACKGROUND-PROBLEM.

HOW-UnKnOwN-RESOLVES.

=head1 OPTIONS

=over 8

=item -m, --myoptions

use-scheme ::=
    sy  system codec (phrase=[sys-id], group=[e,d], text=[text])
    dq	digest for question (phrase=[], group=[a1..c4], text=[number])
    dm  digest for site-key (phrase=[user], group=[len], text=[site])


=item -q, --quiet

Repeat this option to suppress unimportant information to display.

=item -v, --verbose

Repeat this option to display more detailed information.

=item -h, --help

Display a breif help page and exit(0).

=item --version

Display a short version information and exit(0).

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    &_version;
    print "\nSyntax: \n    $0 [OPTION] [--] [[SCHEME] GROUP] TEXT\n", <<'EOM';

    -s, --scheme=SCHEME     which scheme to use
    -p, --phrase=PHRASE     the key phrase
    -g, --group=GROUP       which sub-category of scheme to use
    -c, --stdout            just print out, don't modify clipboard
        --make-default      save options
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
    -h, --help              show this help page
        --version           print the version info
EOM
}

exit (_boot or 0);

sub _main {
    _log2 "S=$opt_scheme P=$opt_phrase C=$opt_group T=$opt_text";
    if ($opt_make_default) {
        $CFG->{'/scheme'}   = system_encode $opt_scheme;
        $CFG->{'/phrase'}   = system_encode $opt_phrase,
        $CFG->{'/category'} = system_encode $opt_group,
    }

    my $codec_f = main->can('codec_'.$opt_scheme)
        or die "illegal scheme name: $opt_scheme";
    my $result = $codec_f->($opt_phrase, $opt_group, $opt_text);

    _log2 "Out=$opt_out Length=", length($result);
    $opt_out->($result);
}

=head1 DIAGNOSTICS

(No Information)

=cut
# (HELPER FUNCTIONS)

=head1 HACKING

(No Information)

=cut
sub system_encode {
    my $t = shift;
    codec_sy('bodz', 'e', $t) if $t;
}

sub system_decode {
    my $t = shift;
    codec_sy('bodz', 'd', $t) if $t;
}

=head1 HISTORY

=over

=item 0.x

The initial version.

=back

=cut
sub _version {
    print "[$LOGNAME] dynamic codes (critic) \n";
    print "Written by Lenik,  Version 0.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"Perl_simple_cli_program_template">

=head1 AUTHOR

Xima Lenik <lenik@bodz.net>

=cut
