#!/usr/bin/perl

use strict;
use Getopt::Long;
use cmt::vcs;
use Win32::Clipboard;
use Win32::TieRegistry(Delimiter=>'/');
use cmt::codec;


sub main;
sub _Verbose;
sub version;
sub help;

sub system_encode;
sub system_decode;
sub save;


our $opt_scheme;
our $opt_phrase;
our $opt_category;
our $opt_make_default;
our $opt_out = 'C';     # Clipboard  Print  None
our $opt_verbose;
our $opt_text;


&main;


sub main {
    my $reg_path = "HKEY_CURRENT_USER/Software/S-FIA & TC/dir-T/usecode/";
    my $reg = $Registry->{$reg_path};
    if ($reg) {
        $opt_scheme = system_decode $reg->{'/scheme'};
        $opt_phrase = system_decode $reg->{'/phrase'};
        $opt_category = system_decode $reg->{'/category'};
    }

    ::GetOptions(
               'scheme=s',
               'phrase|h=s',
               'category|c=s',
               'make-default',
               'clipboard' => sub { $opt_out = 'C' },
               'print|p' => sub { $opt_out = 'P' },
               'verbose|v',
               'version' => sub { &version; exit },
               'help' => sub { &help; exit },
               );

    die 'No text specified. ' if (scalar(@ARGV) == 0);

    $opt_scheme = shift @ARGV if (scalar(@ARGV) > 1);
    $opt_category = shift @ARGV if (scalar(@ARGV) > 1);
    $opt_text = join(' ', @ARGV);

    _Verbose "S=$opt_scheme P=$opt_phrase C=$opt_category T=$opt_text. \n";
    if ($opt_make_default) {
        $Registry->{"HKEY_CURRENT_USER/Software/S-FIA & TC/"} =
            { "dir-T/" => { "usecode/" => {} } };
        $Registry->{"$reg_path/scheme"} = system_encode $opt_scheme;
        $Registry->{"$reg_path/phrase"} = system_encode $opt_phrase;
        $Registry->{"$reg_path/category"} = system_encode $opt_category;
    }

    my $codec_f = eval("\\&codec_$opt_scheme");
    my $result = &$codec_f($opt_phrase, $opt_category, $opt_text);

    _Verbose "Out=$opt_out Length=" . length($result) . "\n";
    if ($opt_out eq 'C') {
        Win32::Clipboard($result);
    } elsif ($opt_out eq 'P') {
        print "$result\n";
    }
}


sub system_encode {
    my $t = shift;
    codec_sy('bodz', 'e', $t) if $t;
}


sub system_decode {
    my $t = shift;
    codec_sy('bodz', 'd', $t) if $t;
}


sub _Verbose {
    print shift if ($opt_verbose);
}


sub version {
	my %id = parse_id('$Id: usecode,v 1.2 2005-07-01 09:10:08 dansei Exp $');
    print <<"EOM";
[usecode] use codec (critic)
written by s.n.m.  version $id{rev}  last updated $id{date}

EOM
}


sub help {
    &version;
    print <<"EOM";
syntax:
    usecode [options] [--] [[scheme] category] text
        --scheme=<use-scheme> (s)
        --phrase=<prephrase-for-category> (h)
        --category=<category-name> (c)
        --make-default (save to registry)
        --print (p) or --clipboard (default)
        --verbose (v)
        --version
        --help
EOM
}





__DATA__

use-scheme ::=
    sy  system codec (phrase=[sys-id], category=[e,d], text=[text])
    dq	digest for question (phrase=[], category=[a1..c4], text=[number])
    dm  digest for site-key (phrase=[user], category=[len], text=[site])

