#!/usr/bin/perl -w

use strict;
use Getopt::Long;
use File::Basename;
use cmt::path;
use cmt::vcs;
use Data::Dumper;


our $TEMPDIR = $ENV{'TEMP'};
    $TEMPDIR = $ENV{'TMP'} if (!$TEMPDIR);
    if (!$TEMPDIR) {
        mkdir '/tmp' if (! -e '/tmp');
        $TEMPDIR = '/tmp';
    }
    $TEMPDIR =~ s/[\/\\]$//;

# global options
our %opts = (
    'extension'     => 'tmp',
    );

sub main;
sub getopt;
sub process;
sub scanDirectory;
sub help;


sub main {
    %opts = getopt(@ARGV);
    @ARGV = qw/./ if (scalar(@ARGV) < 1);
    my @files = @ARGV;

    for (@files) {
        if (-d) {
            # (no user-parameter)
            scanDirectory $_, $opts{recursive}, \&process, \%opts;
        } elsif (-f) {
            process $_;
        } else {
            die "Illegal argument: $_";
        }
    }
}



################################################################
#
#   SUBROUTINES
#
sub getopt {
    @ARGV = @_;
    # print "--> ".join(',',@ARGV)."\n";
    my %myopts = %opts;

    GetOptions(\%myopts,
        'recursive',
        'write',
        'binary',
        'extension=s',
        'comment-remove',
        'force',
        'quiet',
        'verbose',
        'debug',
        'help|?'            => sub { &help; },
        );
    # print Dumper(\%opts);
    return %myopts;
}


sub process {
    my ($path) = @_;
    return if (-d $path);
    return if $path !~ m/\.sim$/;

    print STDERR "[SIM] $path\n" if not $opts{'quiet'};

    open(FH, "<$path")
        || die "Can't open file: $path";

    my %targetSimOpts = %opts;
    my @targetCmdArgs;
    my @targetText;

    $. = 0;
    while (<FH>) {
        # remove the BOM at the beginning line (line number #1)
        if ($. == 1) {
            s/^\xEF\xBB\xBF//;  # remove utf-8 bom
        }

        if (m/^\s*\#!\s*\S*sim\s*(.*)$/) {
            %targetSimOpts = getopt(split(/\s+/, $1));
            next;
        }
        if (m/^\s*\#\?\s*(.*)$/) {
            @targetCmdArgs = split(/\s+/, eval("\"$1\""));
            next;
        }
        if (m/^\s*\#/ and $targetSimOpts{'comment-remove'}) {
            next;
        }

        # more replacement...
        push @targetText, $_;
    }

    # create the temporary file for @targetText
    my $basename = basename $path;
    my $tempfile = path_join $TEMPDIR, "$basename.$targetSimOpts{extension}";
    open(TEMP, ">$tempfile")
        || die "Can't create the temporary file $tempfile";
    print TEMP join('', @targetText);
    close TEMP;

    my $targetCmd = join(' ', @targetCmdArgs) . " \"$tempfile\"";

    # write the output of target to file
    if ($targetSimOpts{'write'}) {
        my $file_out = $path;
        if ($file_out !~ s/\.sim$//) {
            rename "$path", "$path.bak";
        }
        $targetCmd .= ">\"$file_out\"";
    }

    # execute the target command
    print "[EXEC] $targetCmd\n" if $opts{'verbose'};
    system($targetCmd) unless $opts{'debug'};

    # remove the tempfile
    unlink "$tempfile";
}

sub scanDirectory {
    my ($dir, $recursive, $callback, $user) = @_;
    my $dh = new DirHandle($dir) || return;

    my @files = $dh->read;
    $dh->close;
    for (@files) {
        next if (m/^\.+$/);
        my $path = "$dir/$_";
        if (-d $path) {
            if ($recursive) {
                scanDirectory($path, $recursive, $callback, $user);
            }
        }
        # for each file or directory
        &$callback($path, $user);
    }
}

sub help {
    my %id = parse_id('$Id$');

    print <<"EOM";
[SIM] SIMplified Expander
Written by Snima Denik,  Version 0.$id{rev},  last updated $id{date}

Syntax:
    sim [options] <sim-script> ...

Options:
    --recursive (r)
    --write (w)
    --binary (b)
    --comment-remove (c)
    --extension=<ext> (e)
    --force (f)
    --quiet (q)
    --verbose (v)
    --debug (d)
    --help (?)
EOM
    exit 0;
}

&main;
