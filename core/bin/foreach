#!/usr/bin/perl

use strict;
use DirHandle;
use Getopt::Long;
use cmt::vcs;
use cmt::path;


sub scan_dir;
sub process_item;
sub ls;
sub search;
sub version;
sub help;


    our $opt_recursive = 0;
    our $opt_directories_only = 0;
    our $opt_continue_with_errors = 0;
    our $opt_script = undef;            # <STDIN> default
    our @opt_files;
    our $opt_quiet = 0;
    our $opt_verbose = 0;


    # COMMAND-LINE PARSING
    GetOptions(
        'recursive',
        'quiet',
        'directories-only',
        'files-only',
        'continue-with-errors',
        'script=s',
        'noscript' => sub { $opt_script = '' },
        'version' => sub { &version; exit },
        'help' => sub { &help, exit },
        );

    $opt_verbose = not $opt_quiet;

    my @lines;
    if ($opt_script) {
        open(SCRIPT, "<$opt_script")
            or die "Can't read from file $opt_script";
        @lines = <SCRIPT>;
        close SCRIPT;
    } else {
        if (!defined $opt_script) {
            print STDERR "Enter the script (use -n option to suppress): \n";
            @lines = <STDIN>;
        }
    }
    $opt_script = join('', @lines);

    my $compile = eval(<<"EOM");
        sub process {
            my \$path = \$_[0];
            my (\$dir, \$base) = path_split(\$path);
            my (\$file, \$ext) = path_splitext(\$base);
            $opt_script
        }
EOM
    die "Can't evaluate: $@" if $@;

    # find -- if any
    my $el = -1;
    while (++$el < scalar(@ARGV)) {
        last if ($ARGV[$el] eq '--');
    }
    @opt_files = splice(@ARGV, 0, $el - 1);
    shift @ARGV;    # remove --

    # default ./* if none is specified.
    if (! @opt_files) {
        @opt_files = grep { !(/^\.+$/ or $opt_directories_only and -f) } (<.*>, <*>);
    }


    # PROCESSING
    my $count = 0;
    for (@opt_files) {
        $count += process_item($_);
        $count += scan_dir($_) if $opt_recursive and -d;
    }


    # RESULTS
    if (not $opt_quiet) {
        print <<"EOM";
Total $count files/directories processed.
EOM
    }



sub scan_dir {
    my $dir = shift || $_;
    # print "[SCAN] $dir\n" if $opt_verbose;

    my @files = ls $dir;
    for (my $i = scalar(@files) - 1; $i >= 0; $i--) {
        local $_ = $files[$i];
        my $k = 0;
        $k = 1 if m/^\.+$/;
        $_ = "$dir/$_";
        $k = 1 if $opt_directories_only and -f;
        splice(@files, $i, 1) if $k;
    }

    my $count = 0;
    for (@files) {
        my $path = "$dir/$_";
        $count += process_item($path);
        $count += scan_dir($path) if $opt_recursive and -d $path;
    }
    return $count;
}


sub process_item {
    my $path = shift || $_;
    print " [DIR] $path\n" if -d $path and not $opt_quiet;
    print "[FILE] $path\n" if -f $path and not $opt_quiet;

    my $count = 0;
    $count++ if process($path);

    return $count;
}


sub ls {
    my $path = shift;
    my $dh = new DirHandle($path);
    if (not $dh) {
        if ($opt_continue_with_errors) {
            return ();
        }
        die "Can't access directory $path";
    }
    my @files = $dh->read;
    return @files;
}


sub search {
    my ($list, $item) = @_;
    for (@$list) {
        return 1 if ($item eq $_);
    }
    return 0;
}


sub version {
    my %id = parse_id('$Id: foreach,v 1.5 2005-07-17 03:13:46 dansei Exp $');
    print <<"EOM";
[foreach] files processor framework   version $id{rev}
author: lenik,  last update: $id{date}
EOM
}


sub help {
    &version;
    print <<"EOM";

syntax:
    foreach
        --recursive (r)
        --quiet (q)
        --directories-only (d)
        --continue-with-errors (c)
        --script=<perl-script-file> (s, default read from stdin)
        --noscript
        --version (v)
        --help (h)
        [files/directories ...]     (default '.')

variables:
    path dir base file ext opt_*

EOM
}
