#!/usr/bin/perl

=head1 NAME

foreach - batch file process framework

=cut
use strict;
no  warnings('redefine');   # temporary generated named-subs
use vars qw($LOGNAME $LOGLEVEL);
use cmt::cstr;
    $LOGNAME    = 'foreach'; # $0 =~ /([^\/\\.]+)(?:\.\w+)*$/;
use cmt::log(2);
use cmt::path;
use cmt::util();
use cmt::vcs('parse_id');
    my %RCSID   = parse_id('$Id$');
use Data::Dumper;
use Getopt::Long;
use YAML;

sub _main; sub _version; sub _help;

sub scan_dir;
sub process_item;
sub ls;
sub search;
sub ren;
sub safechar;
sub sortby_name;
sub sortby_size;

our $opt_recursive          = 0;
our $opt_directories_only   = 0;
our $opt_cont_errors        = 0;
our $opt_eval               = undef;    # <STDIN> default
our $opt_just_substitute;               # OLD=NEW, exclusive with --eval.
our $opt_x_mode             = 0;
our $opt_test_only          = 0;
our $opt_sort               = undef;    # 'name' default
our $opt_reversed           = 0;
our @opt_lists              = ();
our @opt_options;

my @files;
my @lists;
my @L;

sub _boot {
    if (@ARGV and $ARGV[0] =~ /\|/) {
        my $m = shift @ARGV;
        unshift @ARGV, split(/\|/, $m);
    }
    my $i = 0;
    while ($i < scalar @ARGV) {
        $_ = $ARGV[$i];
        #    1  2 3 4 5 6            7 8
        if (/^(-o(p(t(i(o(n)?)?)?)?)?)(=(.+))?$/) {
            my ($optk, $optv) = ($1, $8);
            splice @ARGV, $i, 1;
            unless (defined $7) {
                ($optv) = splice @ARGV, $i, 1;
            }
            die "$optk without a value" if $optv eq '';

            $optv =~ /^(\w+)((?:\|\w+)*)(?:[=:](\w+)(\@?))?$/
                or die "Invalid getopt-spec: $optv";
            my ($optname, $optaliases, $opttype, $optarray)
                = ($1, [split(/\|/, substr($2, 1))], $3, $4);
            my $optvar = ($optarray ? '@opt_' : '$opt_').$optname;
            chop $optv if $optarray;
            eval "our $optvar; 1\n"
                or die("Can't define option variable: $@");
            my $optref = eval("no strict; \\$optvar");
            push @opt_options,
                [ $optv, $optref, $optname, $optaliases, $opttype, $optarray];
        } elsif ($_ eq '--') {
            @files = splice(@ARGV, $i + 1);
            pop @ARGV;  # --
            last;
        } else {
            $i++;
        }
    }

    GetOptions('quiet|q'        => sub { $LOGLEVEL-- },
               'verbose|v'      => sub { $LOGLEVEL++ },
               'version'        => sub { _version; exit 0 },
               'help|h'         => sub { _help; exit 0 },
               'cont-errors',
               'directories-only',
               'eval=s',
               'files-only',
               'list=s'         => \@opt_lists,
               'recursive|r',
               'reversed',
               'sort=s',
               'test-only',
               'x-mode',
               'just-substitute=s',
               map( { @$_[0..1] } @opt_options),
               );
    if (@ARGV) {
        push @files, @ARGV;
        @ARGV = ();
    }

    _log2 "user option $_->[2] = ".($_->[5]
            ? eval("no strict; join(',', \@opt_$_->[2])")
            : eval("no strict; \$opt_$_->[2]"))
        for @opt_options;

    if ($opt_sort) {
        my $func = 'sortby_'.$opt_sort;
        die("Invalid sort type: $opt_sort") unless main->can($func);
        $opt_sort = \&$func;
    }

    if ($opt_x_mode) {
        my $f = shift @files;
        die "script file isn't specified" unless defined $f;
        die "script file isn't existed" unless -e $f;
        my $script = readfile($f);
        $opt_eval .= $script;
    }

    if ($opt_just_substitute) {
        if (defined $opt_eval) {
            die "can't eval when --just-substitute is specified";
        } else {
            my ($OLD, $NEW) = split('=', $opt_just_substitute, 2);
            my $opt;
            my $mod;
            if ($OLD =~ s/^(\w)://) { $opt = $1 }
            $mod .= 'g' if $opt =~ s/g//;
            $mod .= 'i' if $opt =~ s/i//;
            if ($opt eq 'a') {
                $OLD = '^'.$OLD.'$';
            } elsif ($opt eq 's') {
                $OLD = '^.*?'.$OLD.'.*$';
            } elsif ($opt eq 'S') {
                $OLD = '^.*'.$OLD.'.*?$';
            } elsif ($opt eq 'l') {
                $OLD = '^.*?'.$OLD.'.*?$';
            } else {
            }
            $opt_eval = "\$new =~ s/$OLD/$NEW/$mod; r";
            _log2 "compile --just to $opt_eval";
        }
    }

    unless (defined $opt_eval) {
        print STDERR "Enter the script (use -n option to suppress): \n";
        while (<STDIN>) {
            $opt_eval .= $_;
        }
    }

    no warnings('uninitialized');
    eval(<<"EOM");
    my (\$a, \$b, \$c, \$d, \$e, \$f, \$g, \$h, \$i, \$j,
        \$k, \$l, \$m, \$n, \$o, \$p, \$q, \$r, \$s, \$t,
        \$u, \$v, \$w, \$x, \$y, \$z);
    sub process {
        my \$path = \$_[0];
        local (\$_) = \$path;
        my (\$dir, \$base) = path_split(\$path);
        my (\$old, \$new) = (\$base, \$base);
        my (\$file, \$ext) = path_splitext(\$base);
        my (\$path2, \$dir2, \$base2, \$file2, \$ext2) =
           (\$path,  \$dir,  \$base,  \$file,  \$ext );
        cs_comp \$base  => [ \\\$file, \\\$ext ],
                -join   => sub { join('', \@_) },
                -split  => sub { path_splitext(shift) };
        cs_alias \$new  => \$base;
        cs_comp \$path  => [ \\\$dir, \\\$base ],
                -join   => sub { path_join(\@_) },
                -split  => sub { path_split(shift) };
        cs_alias \$_    => \$path;

        my (\$L, \$M, \$N, \$O, \$P, \$Q, \$R, \$S, \$T, \$U) = \@L;
        sub r   ; *r = sub
                { ren(\$old, \$new) };
        sub dmp ; *dmp = sub
                { _log1 Dump {
                    _       => \$_,
                    path    => \$path,
                    dir     => \$dir,
                    base    => \$base,
                    file    => \$file,
                    ext     => \$ext,
                    old     => \$old,
                    new     => \$new,
                    }
                };
        1;
        no strict;
        $opt_eval
    }
EOM
    die "Can't evaluate: $@" if $@;

    _main;
}

=head1 SYNOPSIS

B<foreach>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<...the rest of arguments...> ]>

=head1 DESCRIPTION

B<foreach> is a WHAT used for WHAT. It HOW-WORKS.

BACKGROUND-PROBLEM.

HOW-foreach-RESOLVES.

=head1 OPTIONS

=over 8

=item B<-m> | B<--my-option>

...

=item B<-q> | B<--quiet>

Repeat this option to suppress unimportant information to display.

=item B<-v> | B<--verbose>

Repeat this option to display more detailed information.

=item B<-h> | B<--help>

Display a breif help page and exit(0).

=item B<--version>

Display a short version information and exit(0).

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    &_version;
    print "\nSyntax: \n    $0 [OPTION] [--] FILES\n", <<'EOM';

Common options:
    -l, --list=FILE         get filenames from list-file(s)
    -r, --recursive
    -d, --directories-only
    -f, --files-only
    -s, --sort=TYPE         can be name(default), size, etc
        --reversed          use descending sort
    -j, --just-substitute=[OPT:]OLD=NEW
                            just substitute using perl-regex
    -e, --eval=PERLSCRIPT   default read from stdin
    -t, --test-only         only print what would be did
    -c, --cont-errors
    -x, --x-mode            first of files is the script file
    -o, --option=GETOPT-STR add additional/user options
    -h, --help              show this help page
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
        --version           print the version info

Substitute Option:
    a:OLD=NEW               The whold OLD must be explicitly matched
    s:OLD=NEW               Match OLD as short as can in the left-side
    S:OLD=NEW               Match OLD as short as can in the right-side
    l:OLD=NEW               Match OLD as long as can

Variable:
    _=path=dir/base, (old=)new=base=file.ext, opt_*
    a..z: user-variable, L..U: \\\$list-current

Function:
    r = ren(old, new)
EOM
}

exit (_boot or 0);

sub _main {
    for (@opt_lists) {
        open my $fh, "<$_" or die "Can't open list-file: $_";
        push @lists, $fh;
    }

    # default ./* if none is specified.
    if (! @files) {
        @files = grep { !(/^\.+$/ or $opt_directories_only and -f) } (<.*>, <*>);
    }

    # PROCESSING
    my $count = 0;
    @files = sort $opt_sort @files if $opt_sort;
    @files = reverse @files if $opt_reversed;
    for (@files) {
        $count += process_item($_);
        $count += scan_dir($_) if $opt_recursive and -d;
    }

    close $_ for @opt_lists;
    _log1 "Total $count files/directories processed. ";
}

=head1 DIAGNOSTICS

(No Information)

=cut
# (HELPER FUNCTIONS)
sub scan_dir {
    my $dir = shift || $_;
    _sig1 'scan', $dir;

    my @fs = ls $dir;
    for (my $i = scalar(@fs) - 1; $i >= 0; $i--) {
        local $_ = $files[$i];
        my $k = 0;
        $k = 1 if m/^\.+$/;
        $_ = "$dir/$_";
        $k = 1 if $opt_directories_only and -f;
        splice(@fs, $i, 1) if $k;
    }

    my $count = 0;
    for (@fs) {
        my $path = "$dir/$_";
        $count += process_item($path);
        $count += scan_dir($path) if $opt_recursive and -d $path;
    }
    return $count;
}

sub process_item {
    my $path = shift || $_;
    _log2 "$path/" if -d $path;
    _log2 "$path" if -f $path;

    my $count = 0;
    for (@opt_lists) {
        return if ($path eq $_) ;
    }
    @L = ();
    for (@lists) {
        my $l = <$_>;
        $l =~ s/\s+$//;
        push @L, $l;
    }

    $count++ if process($path);

    return $count;
}

sub ls {
    my $path = shift;
    my $dh = new DirHandle($path);
    if (not $dh) {
        if ($opt_cont_errors) {
            return ();
        }
        die "Can't access directory $path";
    }
    my @fs = $dh->read;
    return @fs;
}

sub search {
    my ($list, $item) = @_;
    for (@$list) {
        return 1 if ($item eq $_);
    }
    return 0;
}

my $padx = ' 'x40;
sub ren {
    my ($old, $new) = @_;
    return if $old eq $new;
    die "Non-Existing source: $old" unless -e $old;
    die "Existing target: $new" if -e $new;
    if ($LOGLEVEL > 0) {
        if (length($old) < 40) {
            _P1 "rename ".substr("$old$padx", 0, 40)."--> $new";
        } else {
            _P1 "rename $old\n   --> $new\n";
        }
    }
    rename($old, $new) unless $opt_test_only;
}

sub safechar {
    my $s = shift;
    $s =~ s/[:\/\\?*]/_/g;
    return $s;
}

sub sortby_name {
    return $a cmp $b;
}

sub sortby_size {
    return -s $a <=> -s $b;
}

=head1 HACKING

(No Information)

=cut
# (MODULE FUNCTIONS)

=head1 HISTORY

=over

=item 0.x

The initial version.

=back

=cut
sub _version {
    print "[$LOGNAME] batch file process framework \n";
    print "Written by Lenik,  Version 0.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"Perl_simple_cli_program_template">

=head1 AUTHOR

Xima Lenik <name@mail.box>

=cut
