#!perl

use strict;
use Getopt::Long;
use LWP::Simple;
use Data::Dumper;

sub main;
sub xml;
sub _Verbose;

our $opt_server = 'www.winvod.com';
our $opt_typeid = 1;
our $opt_output;

&main;



sub main {
    GetOptions(
        'server=s',
        'typeid=n',
        'output=s',
        'help' => \&help,
        );

    if ($opt_output) {
        # redirect stdout
        open(STDOUT, ">$opt_output")
            or die "can't redirect stdout: $!";
    }

    # index => info
    #   id
    #   title, actors, directors, voice, region
    #   rank, watchers
    my %movies;

    my $html;
    my $count;


# get total records
    $html = get "http://$opt_server/chinavnet/movie.asp?typeid=$opt_typeid";

    # 共 <font color="#FF6600">151</font> 部影片
    $html =~ m/共 \s* (?:<[^>]+> \s*)* (\d+) \s* (?:<[^>]+> \s*)* 部影片/x
        or die "Component TOTAL not found";

    $count = $1;
    _Verbose "Total $count movies\n";


# get each scores, streaming output
    our %rank_names = (
        '极好' => 60,
        '好'   => 50,
        '较好' => 40,
        '一般' => 30,
        '差'   => 20,
        '极差' => 10,
        );

    our $re_overview = qr/
        (?:<td\b [^>]*> \s*)
            (?:<table\b [^>]*> \s*)
                (?:<tr\b [^>]*> \s*)
                    (?:<td\b [^>]*> \s*) (?:<a \s* href=[^>]*? (\d+) [^>]*?> \s*) (?:<font\b [^>]*> \s*)
                        (?:<strong\b [^>]*> \s*) ([^<]+?) (?:<\/strong> \s*)
                    (?:<\/font> \s*) (?:<\/a> \s*) (?:<\/td> \s*)
                (?:<\/tr> \s*)
            (?:<\/table> \s*)
            (?:<table\b [^>]*> \s*)
                (?:<tr\b [^>]*> \s*)
                    (?:<td\b [^>]*> \s*) (?:[^<]*?) \s* (?:<\/td> \s*)
                (?:<\/tr> \s*)
            (?:<\/table> \s*)
            (?:<table\b [^>]*> \s*)
                (?:<tr\b [^>]*> \s*)
                    (?:<td\b [^>]*> \s*) (?:<font\b [^>]*> \s*) 主演： \s* (?:<\/font> \s*) (?:<\/td> \s*)
                    (?:<td\b [^>]*> \s*) ([^<]*?) \s* (?:<\/td> \s*)
                (?:<\/tr> \s*)
                (?:<tr\b [^>]*> \s*)
                    (?:<td\b [^>]*> \s*) (?:<font\b [^>]*> \s*) 导演： \s* (?:<\/font> \s*) (?:<\/td> \s*)
                    (?:<td\b [^>]*> \s*) ([^<]*?) \s* (?:<\/td> \s*)
                (?:<\/tr> \s*)
                (?:<tr\b [^>]*> \s*)
                    (?:<td\b [^>]*> \s*) (?:<font\b [^>]*> \s*) 配音： \s* (?:<\/font> \s*) (?:<\/td> \s*)
                    (?:<td\b [^>]*> \s*) ([^<]*?) \s* (?:<\/td> \s*)
                (?:<\/tr> \s*)
                (?:<tr\b [^>]*> \s*)
                    (?:<td\b [^>]*> \s*) (?:<font\b [^>]*> \s*) 区域： \s* (?:<\/font> \s*) (?:<\/td> \s*)
                    (?:<td\b [^>]*> \s*) ([^<]*?) \s* (?:<\/td> \s*)
                (?:<\/tr> \s*)
        /six;

    $| = 0;
    print "<?xml version='1.0' encoding='gb2312'?>\n";
    print "<dirt-winvod count='$count'>\n";

    for (my $i = 1; $i <= $count; $i++) {
        # lazy- get keywords
        if (!defined $movies{$i}) {
            my $page = int(($i-1) / 16) + 1;
            my $pagesize = 0;
            my $pagecap = ($count-1) % 16;

            $html = get "http://$opt_server/chinavnet/movie.asp?typeid=$opt_typeid&page=$page";

            while ($html =~ m/$re_overview/g) {
                $movies{$i + $pagesize} = {
                    id => $1,
                    title => $2,
                    actors => $3,
                    directors => $4,
                    voice => $5,
                    region => $6,
                };
                $pagesize++;
            }

            die "Records lost $pagesize/16 at page $page" if $pagesize < $pagecap;
        }

        my $id          = $movies{$i}->{id};

        $html = get "http://$opt_server/chinavnet/showdata/getdata.asp?id=$id";

        my ($rank)      = $html =~ m/pingfen\.innerHTML \s* = \s* \'(.*?)\'/x;
            $rank       = $rank_names{$rank};
        my ($watchers)  = $html =~ m/ renshu\.innerHTML \s* = \s* \'(.*?)\'/x;
        my ($hits)      = $html =~ m/   hits\.innerHTML \s* = \s* \' (?:<[^>]+> \s*)* (.*?) \s* (?:<[^>]+> \s*)* \'/x;
        my ($hits1, $hits2) =
            $hits =~ m/^(\d+)(?:\((\d+)\))?$/;
        $movies{$i}->{rank}     = $rank;
        $movies{$i}->{watchers} = $watchers;
        $movies{$i}->{hits1}    = $hits1;
        $movies{$i}->{hits2}    = $hits2;

        print STDERR '.';
    }

    print STDERR "\n";


    # sort by <id, rank, watchers>
    my @sorts;
    for (my $i = 1; $i <= $count; $i++) {
        my $rank        = $movies{$i}->{rank};
        my $watchers    = $movies{$i}->{watchers};
        $sorts[$i-1] = [$rank, $watchers, $i];
    }

    @sorts = sort {
            ($a->[0] != $b->[0]) ?
            ($a->[0] <=> $b->[0]) :
            ($a->[1] <=> $b->[1])
        } @sorts;

    for (my $j = 1; $j <= $count; $j++) {
        my $i           = $sorts[$j-1]->[2];
        my $id          = $movies{$i}->{id};
        my $title       = $movies{$i}->{title};
        my $actors      = $movies{$i}->{actors};
        my $directors   = $movies{$i}->{directors};
        my $voice       = $movies{$i}->{voice};
        my $region      = $movies{$i}->{region};
        my $rank        = $movies{$i}->{rank};
        my $watchers    = $movies{$i}->{watchers};
        my $hits1       = $movies{$i}->{hits1};
        my $hits2       = $movies{$i}->{hits2};

        print "<movie"
             .xml('index', $i)
             .xml('id', $id)
             .xml('title', $title)
             .xml('actors', $actors)
             .xml('directors', $directors)
             .xml('voice', $voice)
             .xml('region', $region)
             .xml('rank', $rank)
             .xml('watchers', $watchers)
             .xml('hits1', $hits1)
             .xml('hits2', $hits2)
             ." />\n";
    }

    print "</dirt-winvod>\n";
}


sub xml {
    my ($name, $text) = @_;
    $text =~ s/\&\w+?;/?/g;
    $text =~ s/\'/\&apos;/g;
    return " $name='$text'";
}


sub _Verbose {
    print STDERR shift;
}

sub help {
    print <<"EOM";
winvod by s.n.m.
syntax:
    winvod
        --server=<server, default www.winvod.com> (s)
        --typeid=<movie type> (t)
        --output=<filename, default stdout> (o)
server tries:
    202.107.248.188
EOM
    exit;
}
