#!/usr/bin/perl

use strict;
use cmt::path;
use cmt::pp;
use cmt::util;
use cmt::vcs;
use Getopt::Long;

sub boot;
sub main;
sub info;
sub info2;
sub version;
sub help;

our $opt_verbtitle      = 'plbat';
our $opt_verbtime       = 0;
our $opt_verbose        = 1;
our $opt_output;
our $opt_console;
our $opt_make;

my %id = parse_id('$Id: plbat,v 1.7 2007-09-12 17:12:42 lenik Exp $');

sub boot {
    GetOptions('quiet|q'    => sub { $opt_verbose-- },
               'verbose|v'  => sub { $opt_verbose++ },
               'version'    => sub { version; exit },
               'help|h'     => sub { help; exit },
               'output|o=s',
               'console|c',
               'make|m',
               );

    if ($opt_make) {
        while (<>) {
            next if /^\s*$/;
            chop;
            my ($bat, $pl) = split(':', $_, 2);
            unless (defined $pl) {
                my ($bat_name, $bat_ext) = path_splitext $bat;
                $pl = $bat_name . '';
            }
            info "wrap w/$bat -> $pl";
            $opt_output = 'w/'.$bat;
            main $pl;
        }
    } else {
        die "no perl-file specified" unless @ARGV;
        info "wrap $ARGV[0]";
        main $ARGV[0];
    }
}

sub info {
    return if $opt_verbose < 1;
    my $text = shift;
    print datetime.' ' if $opt_verbtime;
    print "[$opt_verbtitle] $text\n";
}

sub info2 {
    return if $opt_verbose < 2;
    my $text = shift;
    print datetime.' ' if $opt_verbtime;
    print "[$opt_verbtitle] $text\n";
}

sub version {
    print "[$opt_verbtitle] perl/bat wrapper \n";
    print "Written by Lenik,  Version 0.$id{rev},  Last updated at $id{date}\n";
}

sub help {
    version;
    print <<"EOM";

Syntax:
    $0 [OPTION] perl-file.pl
    $0 -m list-file

Common options:
    -c, --console           output to stdout
    -o, --output=FILE       specify output file name, default perl-file.bat
    -m, --make
    -h, --help              show this help page
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
        --version           print the version info
EOM
}

exit boot;

my $tmpl;

sub main {
    my $perl_file    = shift;
    my $bat_file     = $opt_output;

    my $target_name  = '%~n0';      # the same name as perl-file
    my ($dir, $base) = path_split $perl_file;
    my ($file, $ext) = path_splitext $base;
    if (defined $bat_file) {
        my ($odir, $obase) = path_split $bat_file;
        my ($ofile, $oext) = path_splitext $obase;
        if ($ofile ne $file) {
            $target_name = $file;
        }
    } else {
        $bat_file = path_join($dir.'/w', "$file.bat");
    }

    my %vars = (
        NAME        => $target_name,
        GENERATOR   => "plbat $id{rev}",
        );

    $tmpl = join('', <DATA>) unless defined $tmpl;

    my $cnt  = ppvar %vars, $tmpl;
    if ($opt_console) {
        print $cnt;
    } else {
        writefile $bat_file, $cnt;
    }
}

__DATA__
@echo off

    rem Generated by $GENERATOR

    if not "%OS%"=="Windows_NT" goto err_os

    setlocal
    set _dir=%~dp0../
    set _nam=$NAME
    set _ext=
    if not exist "%_dir%%_nam%" (
        for %%i in (pl p pc pld) do (
            if exist "%_dir%%_nam%.%%i" (
                set _ext=.%%i
                goto start
            )
        )
        echo is file %_dir%%_nam%.^(,p,pc,pl,pld^) lost?
        goto end
    )

:start
    %perl% "%_dir%%_nam%%_ext%" %*
    goto end

:err_os
    echo You must run this program under Windows NT/2000 or above.
    goto end

:end
