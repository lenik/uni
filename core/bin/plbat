#!/usr/bin/perl

use strict;
use cmt::path;
use cmt::pp;
use cmt::util;
use cmt::vcs;
use Getopt::Long;

sub boot;
sub main;
sub info;
sub info2;
sub version;
sub help;

our $opt_verbtitle      = 'plbat';
our $opt_verbtime       = 0;
our $opt_verbose        = 1;
our $opt_output;
our $opt_console;
our $opt_make;
our $opt_prefix;

my %id = parse_id('$Id: plbat,v 1.9 2007-09-13 00:55:42 lenik Exp $');

sub boot {
    GetOptions('quiet|q'    => sub { $opt_verbose-- },
               'verbose|v'  => sub { $opt_verbose++ },
               'version'    => sub { version; exit },
               'help|h'     => sub { help; exit },
               'output|o=s',
               'console|c',
               'make|m',
               'prefix|p=s',
               );

    if ($opt_make) {
        while (<>) {
            next if /^\s*$/;
            chop;
            if (/^!\s+([^=]+)=(.*)$/) {
                my ($opt, $val) = ($1, $2);
                info "set $opt to $val";
                my $ref = eval '\$opt_'.$opt;
                die "invalid option $opt: $@" if $@;
                $$ref = $2;
                next
            }
            my ($bat, $pl) = split(':', $_, 2);
            unless (defined $pl) {
                my ($bat_name, $bat_ext) = path_splitext $bat;
                $pl = $bat_name . '';
            }
            info "wrap $opt_prefix$bat -> $pl";
            $opt_output = $opt_prefix.$bat;
            main $pl;
        }
    } else {
        die "no perl-file specified" unless @ARGV;
        info "wrap $ARGV[0]";
        main $ARGV[0];
    }
}

sub info {
    return if $opt_verbose < 1;
    my $text = shift;
    print datetime.' ' if $opt_verbtime;
    print "[$opt_verbtitle] $text\n";
}

sub info2 {
    return if $opt_verbose < 2;
    my $text = shift;
    print datetime.' ' if $opt_verbtime;
    print "[$opt_verbtitle] $text\n";
}

sub version {
    print "[$opt_verbtitle] perl/bat wrapper \n";
    print "Written by Lenik,  Version 0.$id{rev},  Last updated at $id{date}\n";
}

sub help {
    version;
    print <<"EOM";

Syntax:
    $0 [OPTION] perl-file.pl
    $0 -m list-file

Common options:
    -c, --console           output to stdout
    -o, --output=FILE       specify output file name, default perl-file.bat
    -m, --make
    -h, --help              show this help page
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
        --version           print the version info
EOM
}

exit boot;

my $tmpl;

sub main {
    my $perl_file    = shift;
    my $bat_file     = $opt_output;

    my $target_name  = '%~n0';      # the same name as perl-file
    my ($dir, $base) = path_split $perl_file;
    my ($file, $ext) = path_splitext $base;
    if (defined $bat_file) {
        my ($odir, $obase) = path_split $bat_file;
        my ($ofile, $oext) = path_splitext $obase;
        if ($ofile ne $file) {
            $target_name = $file;
        }
    } else {
        $bat_file = path_join($dir, $opt_prefix.$file.".bat");
    }

    my %vars = (
        NAME        => $target_name,
        GENERATOR   => "plbat $id{rev}",
        );

    $tmpl = join('', <DATA>) unless defined $tmpl;

    my $cnt  = ppvar %vars, $tmpl;
    if ($opt_console) {
        print $cnt;
    } else {
        writefile $bat_file, $cnt;
    }
}

__DATA__
@echo off

    rem Generated by $GENERATOR

:check_os
    if "%OS%"=="" goto check_cmd
    if "%OS%"=="Windows_NT" goto check_cmd
    echo The operating system isn't supported: %OS%
    exit /b 1

:check_cmd
    verify other 2>nul
    setlocal enableextensions
    if not errorlevel 1 goto boot
    echo The cmd extensions isn't supported.
    echo Maybe your windows version is too old.
    exit /b 1

:check_more

:boot
    setlocal
    set _nam=$NAME
    set _ext=

:find_target
    for %%d in ("" ../) do (
        set _dir=%~dp0%%~d
        if exist "!_dir!%_nam%" (
            goto find_shell
        ) else (
            for %%i in (pl p pc pld) do (
                if exist "!_dir!%_nam%.%%i" (
                    set _ext=.%%i
                    goto find_shell
                )
            )
        )
    )
    echo Can't find the target program %_nam%.
    exit /b 1

:find_shell
    if "%_shell%"=="" (
        for %%a in (%CMDCMDLINE%) do (
            for %%c in (%%a) do (
                set _shell=%%~nc
                goto start_mode
            )
        )
    )

:start_mode
    set _args=%*
    set _look=3
:next_arg
    if %_look% leq 3 goto bycmd
    if "%~1"=="" goto bycmd
    if "%~1"=="-v" goto start
    set _1=%~1
    if "%_1:~0,6%"=="--verb" goto start
    shift
    set /a _look = _look - 1
    goto next_arg

:bycmd
    if "%_shell%"=="cmdw" goto startw
    if "%_shell%"=="CMDW" goto startw
    goto start

:start
    if "%PERL%"=="" set PERL=perl
    "%PERL%" "%_dir%%_nam%%_ext%" %_args%
    goto end

:startw
    if "%PERLW%"=="" set PERLW=perlw
    "%PERLW%" "%_dir%%_nam%%_ext%" %_args%
    goto end

:end
