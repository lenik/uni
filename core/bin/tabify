#!/usr/bin/perl

=head1 NAME

tabify - convert lines to beautiful table in ascii

=cut
use strict;
use vars qw($LOGNAME $LOGLEVEL);
use cmt::lang('_def', '_or', '_NA');
use cmt::log(3);
    $LOGNAME    = 'tabify'; # $0 =~ /([^\/\\.]+)(?:\.\w+)*$/;
use cmt::util('qr_literal');
use cmt::vcs('parse_id');
    my %RCSID   = parse_id('$Id: .pl 776 2007-12-24 12:11:36Z lenik $');
use Data::Dumper;
use Getopt::Long;

sub _main; sub _version; sub _help;
sub print_rows;
sub print_row;
sub print_hr;

sub split_ex;
sub mix_chars;

our $opt_border;                # 'NN*N';
our $opt_delimiter  = ':';
our $opt_tabstop;
our $opt_tabsize    = 8;        # not used
our $opt_trim;

our $field_max;
our @field_size;
my  @last_size;
our @field_auto;                # auto field indexes
our $field_autof    = 0;        # the first auto field
our @field_align;
our @delim;
our @border         = ();
our $border_def;
our $border_tail;
my  $border_index   = 0;
my  $last_border    = 'F';
our $MARGIN         = '';
our $MARGIN_HR      = '';
our $NL             = '';       # non-line

sub _boot {
    GetOptions('quiet|q'        => sub { $LOGLEVEL-- },
               'verbose|v'      => sub { $LOGLEVEL++ },
               'version'        => sub { _version; exit 0 },
               'help|h'         => sub { _help; exit 0 },
               'delimiter|d=s',
               'tabstop|t=s',
               'border|b:s',
               'trim|k:s',
               );
    if (defined $opt_delimiter) {
        while ($opt_delimiter =~ s/(\\.|'.*?'|\*|.)//) {
            my $c = substr($1, 0, 1);
            if ($c eq '\\') {
                $c = substr($1, 1);
            } elsif ($c eq '\'') {
                $c = substr($1, 1, -1);
                $c = [split(/,/, $c, 2)] if index($c, ',') != -1;
            } elsif ($c eq '*') {
                $field_max = @delim + 1;
                last;
            }
            push @delim, $c;
        }
        die "too many delimiters: `$opt_delimiter'" if length $opt_delimiter;
    }

    if (defined $opt_tabstop) {
        # convert -=+% to <|>*
        my %AC = qw(- < = | + > % *);
        my $i = 0;
        while ($opt_tabstop =~ s/(^|[-=+%])(\d+|\*)//) {
            my $align = $1 || '-';
            my $size = $2;
            push @field_align, $AC{$align};
            if ($size eq '*') {
                push @field_auto, $i;
                push @field_size, undef;
            } else {
                push @field_size, $size;
            }
            $i++;
        }
    }
    $field_autof = $field_auto[0] if @field_auto;

    if (defined $opt_border) {
        $opt_border = 'HF*H' if $opt_border eq '';
        while ($opt_border =~ s/([NFOIH])(\*?)//) {
            push @border, $1;
            if ($2 eq '*') {
                die "only one border-style* is allowed" if defined $border_def;
                $border_def = $1;
                $border_tail = @border;
            }
        }
        die "unknown border style: `$opt_border'" if length $opt_border;
        _def($border_def,   'N');
        _def($border_tail,  scalar(@border));
        $MARGIN     = ' ';
        $MARGIN_HR  = '-';
        $NL         = ' ';
    }

    if ($LOGLEVEL >= 2) {
        _log2 "delimiters:  ".join(', ', @delim);
        my @t;
        for (0..$#field_size) {
            my $s = $field_size[$_];
            my $a = $field_align[$_];
            push @t, $a x $s;
        }
        _log2 "max fields:  "._NA($field_max);
        _log2 "fields:      ".join(' - ', @t);
        _log2 "autofield:   ($field_autof) ".join(' - ', @field_auto);
        _log2 "border:      ("._NA($border_def).") ".join(' - ', @border);
        _log2 "border-tail: "._NA($border_tail);
    }

    _main;
}

=head1 SYNOPSIS

B<tabify>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<...the rest of arguments...> ]>

=head1 convert lines to beautiful table in ascii

B<tabify> is a WHAT used for WHAT. It HOW-WORKS.

BACKGROUND-PROBLEM.

HOW-tabify-RESOLVES.

=head1 OPTIONS

=over 8

=item B<-m> | B<--my-option>

...

=item B<-q> | B<--quiet>

Repeat this option to suppress unimportant information to display.

=item B<-v> | B<--verbose>

Repeat this option to display more detailed information.

=item B<-h> | B<--help>

Display a breif help page and exit(0).

=item B<--version>

Display a short version information and exit(0).

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    &_version;
    print "\nSyntax: \n    $0 [OPTION] [--] [FILES]\n", <<'EOM';

Common options:
    -d, --delimiter=LIST    delimiter of each fields, * matches to the rest
    -t, --tabstop=LIST      * means auto size (default)
    -b, --border[=LIST]     border styles of each line, * matches to the rest
    -k, --trim[=HINT]       truncate long-field to fit in the cell
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
    -h, --help              show this help page
        --version           print the version info

Delimiter syntax:
    CHAR        :           age:sex:location
    \CHAR       \'          age'sex'location
    'STRING'    '->'        first->second->third
    'BEGIN,END' '(,)'       (apple) (pear) (banana)

Tabstop format:
    [-=+%]SIZE              left(-), center(=), right(+), full(%)

Border style:
    N   none                  age   sex   location
    F   full                | age | sex | location |
    O   out                 | age   sex   location |
    I   in                    age | sex | location
    H   horizontal line     +----------------------+

Examples:
    tabify -d=":'(,)''->'=*" -t="12-10=7=7+10" -b=HFHF*H
        plane: (Shanghai) 19:30 -> 22:10 = Beijing
     => | plane        | Shanghai   |  19:30  |  22:10  |    Beijing |
EOM
}

exit (_boot or 0);

sub _main {
    my @rows;
    my @fields;
    while (<>) {
        s/\s+$//s; # chop;
        @fields = split_ex(\@delim, $_, $field_max);
        if ($field_autof >= @fields) {
            print_rows @rows;
            @rows = ();
        } else {
            push @rows, [ @fields ];
        }
    }
    if (@rows) {
        print_rows @rows;
    }
    if (defined $opt_border) {
        for (@border[$border_tail..$#border]) {
            if ($_ eq 'H') {
                print_hr;
            } else {
                # print empty row.
            }
        }
    }
}

=head1 DIAGNOSTICS

(No Information)

=cut
# (HELPER FUNCTIONS)

sub print_rows {
    my @size = @field_size;
    _log3 "print_rows: ".Dumper(\@_) if $LOGLEVEL >= 3;
    for my $row (@_) {
        next if $field_autof >= @$row;
        for (0..$#$row) {
            next if defined $field_size[$_];
            my $len = length($row->[$_]);
            $len++ unless defined $opt_border;
            if ($len > _or($size[$_], 0)) {
                $size[$_] = $len;
            }
        }
    }
    @last_size = @size;
    print_row @$_ for @_;
}

sub print_row {
    my $border = 'N';
    if (defined $opt_border) {
        while (1) {
            $border = $border[$border_index];
            $border_index++ unless $border_index >= $border_tail - 1;
            if ($border eq 'H') {
                print_hr;
            } else {
                last;
            }
        }
    }
    $last_border = $border;

    # left-border
    print(($border eq 'F' or $border eq 'O') ? '|' : $NL);
    print $MARGIN;

    for (0..$#_) {
        my $cell = $_[$_];
        my $len = length $cell;
        my $size = $last_size[$_];
        my $align = _or($field_align[$_], '<');
        if ($size > $len) {
            my $alloc = $size - $len;
            if ($align eq '>') {
                $cell = ' 'x$alloc . $cell;
            } elsif ($align eq '|') {
                my $left = int($alloc / 2);
                my $right = $alloc - $left;
                $cell = ' 'x$left . $cell . ' 'x$right;
            } elsif ($align eq '%') {
                $cell = mix_chars($cell, ' 'x$alloc);
            } else {
                $cell .= ' 'x$alloc;
            }
        } elsif ($len > $size) {
            if (defined $opt_trim) {
                my $el = length $opt_trim;
                my $vsize = $size >= $el ? $size - $el : $size;
                my $esize = $size - $vsize;
                $cell = substr($cell, 0, $vsize) . substr($opt_trim, 0, $esize);
            }
        }

        # inside-border
        if ($_ != 0) {
            print $MARGIN;
            print(($border eq 'F' or $border eq 'I') ? '|' : $NL);
            print $MARGIN;
        }

        print $cell;
    }

    # right-border
    print $MARGIN;
    print(($border eq 'F' or $border eq 'O') ? '|' : $NL);
    print "\n";
}

sub print_hr {
    my $border = $last_border;

    # left-border
    print(($border eq 'F' or $border eq 'O') ? '+' : $NL);
    print $MARGIN_HR;

    for (0..$#last_size) {
        my $size = $last_size[$_];

        # inside-border
        if ($_ != 0) {
            print $MARGIN_HR;
            print(($border eq 'F' or $border eq 'I') ? '+' : $NL);
            print $MARGIN_HR;
        }

        print '-'x$size;
    }

    # right-border
    print $MARGIN_HR;
    print(($border eq 'F' or $border eq 'O') ? '+' : $NL);
    print "\n";
}

=head1 HACKING

(No Information)

=cut
# (MODULE FUNCTIONS)
sub split_ex {
    my $delims = shift;
    my $fn = scalar(@$delims) + 1;
    local $_ = shift;
    my $max = shift;
       $max = $fn if defined $max and $fn < $max;
    my @list;
    for (my $i = 0; (!defined $max) or $i < $max; $i++) {
        my $d = $delims->[$i];
           $d = $delims->[-1] unless defined $d or defined $max;
        my $item;
        if (ref $d eq 'ARRAY') {
            my ($b, $e, $optional) = @$d;
            my $bpos = index($_, $b);
            if ($bpos != -1) {
                $bpos += length($b);
                my $epos = index($_, $e, $bpos);
                if ($epos != -1) {
                    $item = substr($_, $bpos, $epos - $bpos);
                    $_ = substr($_, $epos + length($e));
                }
            }
            unless (defined $item) {
                if ($optional) {
                    $item = '';
                } else {
                    $_ = '';
                }
            }
        } elsif (!defined $d) {
            $item = $_;
            $_ = '';
        } elsif (ref $d ne '') {
            die "unknown delimiter: $d";
        } else {
            my $pos = index($_, $d);
            if ($pos == -1) {
                $item = $_;
                $_ = '';
            } else {
                $item = substr($_, 0, $pos);
                $_ = substr($_, $pos + length($d));
            }
        }
        if (defined $item) {
            $item =~ s/^\s+//;
            $item =~ s/\s+$//;
        }
        push @list, $item;
        last unless length $_;
    }
    @list;
}

sub mix_chars {
    my $out = shift @_;
    for (@_) {
        my $len0 = length $out;
        my $l = length $_;
        for (my $i = $l - 1; $i >= 0; $i--) {
            my $c = substr($_, $i, 1);
            my $perc = $l <= 1 ? 0.5 : ($i / $l);
            my $ins = int(($len0 - 1) * $perc);
            substr $out, 1 + $ins, 0, $c;
        }
    }
    $out;
}

=head1 HISTORY

=over

=item 0.x

The initial version.

=back

=cut
sub _version {
    print "[$LOGNAME] convert lines to beautiful table in ascii \n";
    print "Written by Lenik,  Version 0.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"Perl_simple_cli_program_template">

=head1 AUTHOR

Xima Lenik <lenik@bodz.net>

=cut
