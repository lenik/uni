#!/usr/bin/perl

use strict;
use cmt::util;
use cmt::vcs;
use Data::Dumper;
use Getopt::Long;
use labat;
use YAML;

sub boot;
sub info;   *info = \*labat::info;
sub info2;  *info2= \*labat::info2;
sub version;
sub help;
sub _main;

our $opt_verbtitle      = 'labat';
our @opt_category;
our $opt_parallel       = 0;

sub boot {
    GetOptions('quiet|q'    => sub { $labat::opt_verbose-- },
               'verbose|v'  => sub { $labat::opt_verbose++ },
               'version'    => sub { version; exit },
               'help|h'     => sub { help; exit },
               'category|c=s' => \@opt_category,
               'parallel|p',
               );
    _main;
}

sub version {
    my %id = parse_id('$Id: labat,v 1.3 2007-08-28 15:48:58 lenik Exp $');
    print "[$opt_verbtitle] Lapiota Batch Processing System \n";
    print "Written by Lenik,  Version $id{rev},  Last updated at $id{date}\n";
}

sub help {
    version;
    print "\nSyntax: \n    $0 [OPTION] [--] files.lb...\n", <<'EOM';

Common options:
    -c, --category=CATEGORY do CATEGORY(s) only
    -p, --parallel          execute in parallel mode
    -h, --help              show this help page
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
        --version           print the version info
EOM
}

exit boot;

sub load_syaml {
    my ($ll) = $_[0] =~ /^(\s*)/; # last-lead
    my @t;
    local $_;
    for (my $i = 0; $i < @_; $i++) {
        $_ = $_[$i];
        my ($l) = /^(\s*)/;
        if (length($l) > length($ll)) {
            if (/^\s*-\s*/) {
                if ($_[$i-1] =~ /^\s*-\s*(\S+)/) {
                    if ($1 !~ /:$/) {
                        push @t, "$ll-\n";
                    }
                }
            }
        }
        if (/^(\s*)-(\s+)(?=`)/) {
            my ($lead, $pre, $text) = ($1, $2, $');
            $text =~ s/[\\']/\\$1/g;
            chop $text;
            $_ = "$lead-$pre'$text'\n";
        }
        $ll = $l;
        push @t, $_;
    }
    push @t, "\n";
    Load(join('', @t))
}

sub _main {
    my $root = load_syaml(<>);
    my ($ev, $ctx) = labat_compile($root);
    #!info2 "ctx:     " . Dump($ctx);
    # info2 "ev-list: " . Dump($ev);
    labat_eval($ev, $ctx);
}
