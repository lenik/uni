#!/usr/bin/perl

use strict;
use cmt::ftime;
use cmt::path;
use cmt::util;
use cmt::vcs;
use cmt::win32;
use cmt::winuser;
use File::Copy qw/cp/;
use Getopt::Long;
use POSIX;
use Term::ReadKey;

sub boot;
sub info;
sub info2;
sub version;
sub help;
sub _main;

sub fwait;
sub run;
sub get_text;
sub set_focus;
sub quit;
sub do_keyq;
sub do_actq;

our $opt_verbtitle      = 'loop2';
our $opt_verbtime       = 0;
our $opt_verbose        = 1;
our $opt_delay          = -1;
our $opt_interval       = 0.1;
our $opt_clear          = 1;
our $opt_cmode;         # change-restart mode
our $opt_cfile;         # change-file
our $opt_cfile_dup;     # dupped change-file
our $opt_run_dupped     = 0;
our $opt_keep_active    = 0;
our $opt_scriptdev;

my $opt_runcmd;
my @opt_args;
my $current_pid;
my $run_count           = 0;
my @keyq;
my @actq;
my $last_modified;
my $hwnd;
my $hidef;

my %extensions = (
    '.pl'   => 'perl',
    '.p'    => 'perl',
    '.py'   => 'python',
    '.pyc'  => 'python',
    '.rb'   => 'ruby',
);

END {
    ntkill $current_pid if $current_pid;
}

sub boot {
    Win32::API->Import('user32', 'HWND GetTopWindow(HWND hWnd)');
    Win32::API->Import('user32', 'HWND GetForegroundWindow()');
    Win32::API->Import('user32', 'BOOL SetForegroundWindow(HWND hWnd)');
    Win32::API->Import('user32', 'HWND GetActiveWindow()');
    Win32::API->Import('user32', 'HWND SetActiveWindow(HWND hWnd)');
    Win32::API->Import('user32', 'HWND GetFocus()');
    Win32::API->Import('user32', 'HWND SetFocus(HWND hWnd)');
    Win32::API->Import('user32', 'BOOL ShowWindow(HWND hWnd, UINT nCmdShow)');
    Win32::API->Import('user32', 'int GetWindowTextLength(HWND hWnd)');
    Win32::API->Import('user32', 'GetWindowText', 'NPN', 'N'); #(HWND hWnd, LPTSTR lpString, int nMaxCount)');

    for my $i (0..$#ARGV) {
        if ($ARGV[$i] eq '--') {
            @opt_args = splice(@ARGV, $i + 1);
            pop @ARGV;
        }
    }
    GetOptions('quiet|q'    => sub { $opt_verbose-- },
               'verbose|v'  => sub { $opt_verbose++ },
               'version'    => sub { version; exit },
               'help|h'     => sub { help; exit },
               'delay=n',
               'clear|l!',
               'change-restart|r' => \$opt_cmode,
               'change-file|c=s' => \$opt_cfile,
               'run-dupped|d',
               'keep-active|k',
               'scriptdev|s',
               );
    $opt_cmode = 1 if defined $opt_cfile;
    # $opt_run_dupped = 1 if $opt_cmode;

    if (@ARGV) {
        push @opt_args, @ARGV;
        @ARGV = ();
    }

    my $_argbase = 0;
    if ($opt_scriptdev) {
        my $f = $opt_args[0];
        unless (-f $f) {
            $f = which $f;
            die "can't find script file $f" unless defined $f;
            $opt_args[0] = $f;
        }
        my ($file, $ext) = path_splitext $f;
        my $p = $extensions{$ext};
        die "Script with extension $ext isn't support" unless defined $p;
        info2 "using interpreter $p for script file $f";
        unshift @opt_args, $p;
        $_argbase = 1;
        $opt_cmode = 1;
        $opt_cfile = $f unless defined $opt_cfile;
        # $opt_keep_active = 1;
    } else {
        die "No command specified. " unless @opt_args;
    }
    if (defined $opt_cfile) {
        if ($opt_cfile =~ /^\@(\d+)$/) {
            $opt_cfile = $opt_args[$_argbase + $1];
        } elsif (!-f $opt_cfile and $opt_cfile =~ /^(\d+)$/) {
            $opt_cfile = $opt_args[$_argbase + $1];
        }
    } else {
        $opt_cfile = $opt_args[$_argbase];
    }
    if ($opt_run_dupped) {
        my ($dir, $base) = path_split $opt_cfile;
        my ($file, $ext) = path_splitext $base;
        $base = $file . '.copied' . $ext;
        $opt_cfile_dup = path_join($dir, $base);
        $opt_args[$_argbase] = $opt_cfile_dup;
    }
    $opt_runcmd = join(' ', @opt_args);

    info2 "delay         = $opt_delay";
    info2 "change-restart= $opt_cmode";
    info2 "change-file   = $opt_cfile";
    info2 "dupped-file   = $opt_cfile_dup";
    info2 "run-cmdline   = $opt_runcmd";

    my $program = $opt_args[0];
    # die "File $program isn't executable" unless -X $program;

    _main;
}

sub info {
    return if $opt_verbose < 1;
    my $text = shift;
    print datetime.' ' if $opt_verbtime;
    print "[$opt_verbtitle] $text\n";
}

sub info2 {
    return if $opt_verbose < 2;
    my $text = shift;
    print datetime.' ' if $opt_verbtime;
    print "[$opt_verbtitle] $text\n";
}

sub version {
    my %id = parse_id('$Id: loop2,v 1.12 2007-09-12 17:12:42 lenik Exp $');
    print "[$opt_verbtitle] Repeat running command \n";
    print "Written by Lenik,  Version 0.$id{rev},  Last updated at $id{date}\n";
}

sub help {
    version;
    print "\nSyntax: \n    $0 [OPTION] [--] CMD ARGS...\n", <<'EOM';

Common options:
        --delay=SECONDS     repeat interval
    -l, --clear             clear screen before run each time
        -nol, --noclear     don't clear screen
    -r, --change-restart    restart the program if changes
    -c, --change-file=FILE  check if changes happen to this FILE, default CMD
        --change-file=@INDEX set change-file to INDEX of ARGS (1-based)
    -d, --run-dupped        run dupped program to enable write-access
                            (the program file to be dupped is change-file)
    -k, --keep-active       keep active window always active
    -s, --scriptdev         auto detect file type, also set -r -k
    -h, --help              show this help page
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
        --version           print the version info

Examples:
    loop2 -s -c 1 ydump file.yml
EOM
}

exit boot;

sub _main {
    while (1) {
        $last_modified = -M $opt_cfile;

        $current_pid = run;
        info2 "running in background: pid = $current_pid" if $current_pid;

        if ($opt_delay) {
            fwait $opt_delay;
        }
        if ($opt_cmode) {
            info2 "waiting for changes of $opt_cfile";
            while (-M $opt_cfile == $last_modified) {
                # not-modified
                fwait $opt_interval;
                do_actq;
            }
            info2 "changement detected: $opt_cfile";
            push @actq, 'kill';
        }
        do_actq;
    }
}

sub fwait {
    my $interval = shift;
    my $k = ReadKey $interval;
    if ($k) {
        # info2 'pressed: '.ord($k);
        quit if $k eq 'q';
        push(@keyq, $k);
    }
    do_keyq;
}

sub do_keyq {
    while (my $k = shift @keyq) {
        if ($k eq 't') {
            push @actq, 'touch-ps';
        } elsif ($k eq 'T') {
            push @actq, 'touch';
        } elsif ($k eq 'h') {
            push @actq, 'hide';
        } elsif ($k eq 's') {
            push @actq, 'show';
        } elsif ($k eq 'c') {
            push @actq, 'cls';
        } else {
            info "ignored keypress: $k";
        }
    }
}

sub do_actq {
    while (my $act = shift @actq) {
        if ($act eq 'touch-ps') {
            info "do pseudo-touch $opt_cfile";
            undef $last_modified;
        } elsif ($act eq 'touch') {
            info "do touch $opt_cfile";
            utime undef, undef, $opt_cfile;
        } elsif ($act eq 'kill') {
            info "do kill $current_pid";
            ntkill $current_pid;
            undef $current_pid;
        } elsif ($act eq 'hide') {
            # tray-icon...
            # Currently, delete $TEMP/HIDE.$hwnd to show the window.
            my $hide_info = `wm -v -hide`;
            my ($h) = $hide_info =~ /mlist: (\d+)/;
            if ($h) {
                $hwnd = $h;
                $hidef = temp_path('HIDE.'.$hwnd);
                writefile $hidef, '1';
                info "this window($hwnd) is hidden, please remove $hidef to show it again";
            } else {
                info "error when hiding the window";
                info2 "wm output: \n$hide_info";
            }
        } elsif ($act eq 'show') {
            # show self,
            # system 'wm -show';
            unlink $hidef if -f $hidef;
        } elsif ($act eq 'cls') {
            clear_screen(1);
        } else {
            info "unknown action: $act";
        }
    }
    # check if restore the hidden windows
    if (defined $hidef) {
        if (! -f $hidef) {
            info2 "file-removal detected: $hidef";
            undef $hidef;
            info2 "show window: $hwnd";
            my $show_info = `wm -v -show -h $hwnd`;
        }
    }
}

sub run {
    my $win;
    if ($opt_keep_active) {
        $win = GetForegroundWindow();
        info2 "current window = $win: " . get_text($win);
    }

    if ($opt_run_dupped) {
        info2 "dup: $opt_cfile -> $opt_cfile_dup";
        cp $opt_cfile, $opt_cfile_dup
            or die("Error copy file $opt_cfile to $opt_cfile_dup: $!");
    }
    $run_count++;

    my $pid;

    clear_screen if $opt_clear;

    if ($opt_cmode) {
        info "spawn $opt_runcmd ($run_count)";
        $pid = ntspawn(@opt_args);
    } else {
        # return exit-code
        info "exec $opt_runcmd ($run_count)";
        system @opt_args;
    }

    if($opt_keep_active) {
        sleep 2 if $opt_cmode;
        info2 "focus back to window: $win";
        set_focus $win;
    }

    return $pid;
}

sub get_text {
    my $hwnd = shift;
    my $len = GetWindowTextLength($hwnd) + 10;
    my $buf = ' ' x $len;
    $len = GetWindowText($hwnd, $buf, $len);
    return substr($buf, 0, $len);
}

# Don't work.
sub set_focus {
    my $hwnd = shift;
    #info2 "SetActiveWindow = ".
        SetActiveWindow($hwnd);
    #info2 "SetFocus = ".
        SetFocus($hwnd);
    #info2 "SetForegroundWindow = ".
        SetForegroundWindow($hwnd);
}

sub quit {
    info "quitting";
    if ($opt_run_dupped) {
        info2 "remove dupped file: $opt_cfile_dup";
        unlink $opt_cfile_dup;
    }
    exit;
}
