#!/usr/bin/perl

=head1 NAME

alias - set aliase names of programs for windows

=cut
use strict;
use vars qw($LOGNAME $LOGLEVEL);
use cmt::log(2);
    $LOGNAME    = 'alias'; # $0 =~ /([^\/\\.]+)(?:\.\w+)*$/;
use cmt::path('path_split');
use cmt::vcs('parse_id');
    my %RCSID   = parse_id('$Id$');
use Getopt::Long;
use Win32::Registry;
use YAML;

sub _main; sub _version; sub _help;
sub list;

our $opt_name;
our $opt_value;
our $opt_delete;
our $opt_path;
our %opt_option;
our $opt_useshortname;
our $opt_useurl;
our $opt_saveurl;

my  $APP_PATHS;

sub _boot {
    $::HKEY_LOCAL_MACHINE->Open(
        "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths",
        $APP_PATHS) or die "Can't open registry of App-Paths";

    GetOptions('quiet|q'        => sub { $LOGLEVEL-- },
               'verbose|v'      => sub { $LOGLEVEL++ },
               'version'        => sub { _version; exit 0 },
               'help|h'         => sub { _help; exit 0 },
               'list|l'     => sub { list; exit },
               'delete|d',
               'useshortname|s',
               'useurl|u',
               'saveurl|su',
               'option|o=s',    # TODO
               );
    unless (@ARGV) { list; exit }

    if ($opt_delete) {
        die "alias name isn't specified" unless @ARGV;
        $opt_name = shift @ARGV;
    } else {
        #if (scalar(@ARGV) == 1) {
            my $line = join(' ', @ARGV);
            if ($line =~ /^(.*?)\s*=\s*(.*)$/) {
                ($opt_name, $opt_value) = ($1, $2);
            } elsif ($line =~ /^(.*?)\s+(.*)$/) {
                ($opt_name, $opt_value) = ($1, $2);
            } else {
                die "invalid syntax of set-alias";
            }
        #} else {
        #    $opt_name = shift @ARGV;
        #    shift @ARGV if $ARGV[0] eq '=';
        #    $opt_value = join(' ', @ARGV);
        #    @ARGV = ();
        #}
        if ($opt_name eq '@') {
            my ($dir, $base) = path_split($opt_value);
            $opt_name = $base;
        }
        _log2 "set alias $opt_name to \"$opt_value\"";
    }

    _main;
}

=head1 SYNOPSIS

B<alias>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<...the rest of arguments...> ]>

=head1 set aliase names of programs for windows

B<alias> is a WHAT used for WHAT. It HOW-WORKS.

BACKGROUND-PROBLEM.

HOW-alias-RESOLVES.

=head1 OPTIONS

=over 8

=item B<-m> | B<--my-option>

...

=item B<-q> | B<--quiet>

Repeat this option to suppress unimportant information to display.

=item B<-v> | B<--verbose>

Repeat this option to display more detailed information.

=item B<-h> | B<--help>

Display a breif help page and exit(0).

=item B<--version>

Display a short version information and exit(0).

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    &_version;
    print "\nSyntax: \n    $0 [OPTION] [--] <NAME|\@> [=COMMAND]\n", <<'EOM';

Common options:
    -l, --list              list alias names in use
    -d, --delete            delete specified aliases
    -p, --path=DIR          execute under the specified DIR
    -s, --useshortname      execute the command using shortname("name~1")
    -u, --useurl
    -su,--saveurl
    -q, --quiet             repeat to get less info
    -v, --verbose           repeat to get more info
    -h, --help              show this help page
        --version           print the version info
EOM
}

exit (_boot or 0);

sub _main {
    if ($opt_delete) {
        $APP_PATHS->DeleteKey($opt_name)
            or die "can't delete key $opt_name: $!";
    } else {
        $APP_PATHS->SetValue($opt_name, REG_SZ, $opt_value)
            or die "can't set value of $opt_name to $opt_value: $!";
    }
}

=head1 DIAGNOSTICS

(No Information)

=cut
# (HELPER FUNCTIONS)

=head1 HACKING

(No Information)

=cut
# (MODULE FUNCTIONS)

sub list {
    my @keys;
    $APP_PATHS->GetKeys(\@keys) or die "GetKeys";
    for (@keys) {
        my $value;
        $APP_PATHS->QueryValue($_, $value);
        printf "%-20s = %s\n", $_, $value;
        if ($LOGLEVEL > 1) {
            my $entry;
            my %values;
            $APP_PATHS->Open($_, $entry) or die "Open $_";
            $entry->GetValues(\%values);    # [ name, type, data ]
            for (keys %values) {
                next if $_ eq '';
                my $value = $values{$_};
                my ($type, $data) = @$value[1, 2];
                printf "        %-12s = %s\n", $_, $data;
            }
        }
    }
}

=head1 HISTORY

=over

=item 0.x

The initial version.

=back

=cut
sub _version {
    print "[$LOGNAME] set aliase names of programs for windows \n";
    print "Written by Lenik,  Version 0.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"Perl_simple_cli_program_template">

=head1 AUTHOR

Xima Lenik <name@mail.box>

=cut
